# -*- mode: org -*-
#+DATE: 2016-06-22
#+TITLE: Adv Software Engineering: Sample Exam Solutions
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CEG7380 Cloud Computing
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2016 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil


This is essentially a composite of students' answers to
[[./7140-sample-midterm.html]]


* Part 1
** (i) Specs in English
True. A spec can suffer from all the seven sins described by Meyer
especially when written in plain English, the top most being ambiguity
and noise. It is preferable to accompany specs in English with math,
logic based formal specifications.  If the specs are only in plain
english there is no methodology of formally verifying the program's
correctness.
        
** (ii) {true} S {Q}

/If the pre-condition of a piece of code S is true, you are asserting
that S does terminate. True or False?/ False. If the pre-condition of a
piece of code S is true, then we only assert that in all possible
states of the program S can be executed and will terminate satisfying
a given post condition as per Dijktra's WP semantics.  The Hoare triplet
{P} S {Q} does not include termination guarantee no matter what P and
Q are.  However {P} S {false} can be satisfied only by an S that does
not terminate.
    
** (iii) Design by Contract by Assertions

True. The "design by contract" principle prescribes the use of
assertions.  The writer of the class should provide pre-condition,
post-condition for public methods and class invariants as a contract.
Which means the caller should ensure that pre-condition is true before
calling the routine and the routine guarantees that the post-condition
will be achieved if the caller holds their side of the contract.

** (iv) Wicked Problems

/There are wicked problems for which we cannot write programs./ False.
Wicked problems are those for which the specs are not clear before we
implement a solution to the problem.  They are so confusing, seemingly
contradictory, obscure, ... that a reasonably good spec document is
highly unlikely.  And, someone takes a stab at it anyway, and does a
prototype by implementing a portion of the spec, and the full problem
now has a solution.

** (v) Functional Specifications

/A functional specification is a rigorous description of the
relationship between the inputs and outputs./ True, a functional
specification can be considered as a subset of the cross product IXO
of inputs and outputs.  It is often structued into sections (i) the
inputs I, (ii) outputs O, and (iii) their relationship.  A program
implementing the spec can be seen as producing an output y, for a
given input x, where (x, y) is in I x O,a nd if multiple y's for (x, y)
in I x O exist, chose any one such y.

* Part 2

** (i) Specs of Partition of Quick Sort

See [[../Lectures/Examples/QuickSort]]

** (ii)  Telegram-Problem Spec

(This being an exam answer, we won't analyze the words "word", "BLANK",
and "NL" and depend on their sympathetic understanding widely known.)

1. input.lex() = output.lex()
2. Let Q be the same output but viewed as a sequence of lines.
   1. for all i: Q[i].length() <= MAXPOS
3. Among all such output values, choose the one with the shortest Q.

(The above assumes that no word is longer than MAXPOS characters.
Naur's original statement did not ask for any specific treatment for
this special case.  However, this can be considered an academic
example of a pragmatic issue.  So here is a spec that includes this
special case.  Replace the item 2 as follows:
for all i: (Q[i].length() <= MAXPOS  or Q[i].lex().length() == 1)
)

See [[../Lectures/Examples/Telegram-Problem]]


** (iii)  Telegram-Problem Solution Design
#+BEGIN_SRC java
   var string input := all-of-the-input();
   var string thisLine := " ";  // one space
   lex.init(input, MAXPOS);
   output-stream.Open();
   repeat
     var string thisWord := lex.next-word();
     if (thisLine.length() + thisWord.length() > MAXPOS) {
        output-stream.Output(thisLine.strip-leading-blanks() + "\n");
	thisLine := " ";
     }
     thisLine += " " + thisWord;
   until thisWord == END;
   output-stream.Close();
#+END_SRC
(To be really thorough, we should also write down the contracts for all
the methods used above.  In the lex nodule, END.length() is defined as
MAXPOS+1.  If code compactness matters, we should make a new method
out of the output += ... thisLine := ""; lines.)

** (iv) Liskov Subsitution Principle
/Describe Liskov Subsitution Principle rigorosuly./ Here B is a
subclass of A.  If a q(x) holds for a variable x of A then q(y) should
hold for a variable y of B.  This ensures that while class B in
extending A's functionality does not modify existing functionality.
This formally translates to the fact that (1) the class invariants of
A should also hold in B (which may have possibly stronger class
invariant), (2) for all the overriden methods the precondition should
not be stronger in B than that in A, (3) the postcondition should not
be weaker in B than that in A.  That also means that the contract for
all the methods defined in A still holds good even when the object a
reference is holding is of type B.

** (v) Example of JML Specs

(Even though the exam question only mentions group 5, the spec of
every public method includes the class invariants.  However, no points
were taken off even if you only dealt with group 5.  I inserted the
JML assertions so that this page is bit more self-contained -- you did
not have to.)

Class invariants should hold true before and after the execution of
any public method (excluding the constructor).  Class invariant may
not be true before the constructor, but must be after.

#+BEGIN_SRC java
/*@ requires 0 < mb && 0 <= b && b <= mb
  @          && p != null && p.length == 4
  @          && (\forall int i; 0 <= i && i < 4;
  @                             0 <= p[i] && p[i] <= 9);
  @*/
#+END_SRC
The JML Requires gives the precondition of the constructor of class
Purse.  Caller must make sure that the parameters mb, b, []p of the
constructor satisfy this precondition.  The "\ forall" is the sme as
"for all" \forall in mathematics.


#+BEGIN_SRC java
//@ assignable MAX_BALANCE, balance, pin; 
#+END_SRC
The JML assignable declares that these class data members (fields) may
be modified during the execution of this method (constructor) possibly
leading to side effects.  Any class data members not included in this
list must remain unmodified.

#+BEGIN_SRC java
/*@ ensures MAX_BALANCE == mb && balance == b
  @         && (\forall int i; 0 <= i && i < 4; p[i] == pin[i]);  @*/
#+END_SRC
The JML ensures gives the postcondtion of the constructor.  The post
condition of the constructor also includes the class invariants.
Constructor, as it returns, is expected to satisfy these.

#+BEGIN_SRC java
//@ invariant 0 <= balance && balance <= MAX_BALANCE;
#+END_SRC java
This is an invariant on the balance field.

#+BEGIN_SRC java
/*@ invariant pin != null && pin.length == 4
  @           && (\forall int i; 0 <= i && i < 4;
  @                              0 <= pin[i] && pin[i] <= 9);
  @*/
#+END_SRC
This is an invariant on pin[].

-end-of-answers-

# Local variables:
# after-save-hook: org-html-export-to-html
# end:
