#+TITLE: CS 7140 Adv Software Engineering Reading List Etc
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CS7140 Software Engineering
#+LINK_HOME: ../../
#+LINK_UP: ../../Lectures
#+STYLE: <style type="text/css">@media screen {BODY {margin: 15%} }</style>
#+BIND: org-export-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2013 %e &bull; <a href=\"www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+BIND: org-export-html-preamble-format (("en" "<a href=\"http://cecs.wright.edu/~pmateti/Courses/7140/\">CS 7140 Advanced Software Engineering</a>"))
#+OPTIONS: toc:t

* Reading List

The reading list for this course is a transitive closure starting
from the ones linked on the course home page, plus the ones shown
below.  Items marked as Require Reading are sources for exam
questions.  Other items do enhance your understanding, but, if you
are not aiming for an A, you may skip.
  
Finish reading these Real Soon.  They are in rough chronological order
by week.

1. Sorting {bubble sort, quicksort, merge sort}, searching {linear
     search, binary search}.  Your choice of a text book.  Required
     Reading.

1. Prabhaker Mateti, Notes on [[../Lectures/FormalMethods/Assertions-in-the-Small.html][Assertions-in-the-Small]], 2013.
     Required Reading.

1. Oracle.com,
   Programming With Assertions,
   http://docs.oracle.com/javase/1.4.2/docs/guide/lang/assert.html
   Required Reading.
    
1. "Holzmann's Ten Rules":
      Gerard J. Holzmann, The Power of Ten -- Rules for Developing Safety
      Critical Code,'' IEEE Computer, June 2006, pp. 93-95.
      <a href="http://spinroot.com/gerard/pdf/P10.pdf">
	http:// spinroot.com/ gerard/ pdf/ P10.pdf. Suggested
	Reading.
    
1. Mantyla, M. V. and Lassenius, C. "Subjective Evaluation of
      Software Evolvability Using Code Smells: An Empirical
      Study". <i>Journal of Empirical Software Engineering</i>,
      vol. 11, no. 3, 2006, pp. 395-431.
      <a href="http://www.soberit.hut.fi/~mmantyla/ESE_2006.pdf">
	http://www.soberit.hut.fi/ ~mmantyla/ ESE_2006.pdf
      Suggested Reading.

1. Meyer, Bertrand, "On Formalism In Specifications", <i>IEEE
    Software</i>, 1985, vol. 2, no. 1. pp. 6-26.
   http://se.ethz.ch/~meyer/publications/ieee/formalism.pdf
    Required Reading.

1. Mateti, Prabhaker, "A Specification Schema for Indenting Programs,"
   <i>Software - Practice and Experience,</i> Vol.13, 163-179, 1983.
   (Reprinted in <i>Software Specification Techniques</i>, McGettrick
   and Gehani (Eds.), Addison-Wesley 1986, 269-288, ISBN:
   0-201-14230-9.)
   http://onlinelibrary.wiley.com/doi/10.1002/spe.4380130206/pdf Required Reading.
  
1. Patrice Chalin, Joseph R. Kiniry, Gary T. Leavens, and Erik Poll,
   "Beyond Assertions: Advanced Specification and Verification with JML and
   ESC/Java2", http://www.eecs.ucf.edu/~leavens/JML/fmco.pdf, 2004.
   Required Reading.
      
1.  Bertrand Meyer. 
    <a href="http://se.ethz.ch/~meyer/publications/computer/contract.pdf">
      "Design By Contract". <i>IEEE Computer</i>, Vol 25, No. 10,
    pp 40 -51, October 1992.  Also in his book "Object-Oriented
    Software Construction", 2e. <strike>Recommended</strike> Required
    Reading.

1.    Robert Bruce Findler, Mario Latendresse, and Matthias
      Felleisen.
      <a href="http://www.ccs.neu.edu/scheme/pubs/fse01-flf.pdf">
	Behavioral Contracts and Behavioral Subtyping. In
      Proceedings of ESEC/FSE-9, 229-236. 2001 Recommended Reading.

1. http://www.literateprogramming.com/
    "Design Documentation" Recommended Reading

1.      Donald E. Knuth, http://www.literateprogramming.com/knuthweb.pdf
	"Literate Programming", The Computer Journal, 1984, 27(2):
      97-111. Knuth is 1974 Turning Award Winner. Required Reading
    
1. Mateti, Prabhaker, "Specification of the Tabulated Equations
   Problem," [[../Lectures/TabulateEqns/tabulate-eqns.html]] Unpublished.  2013.
   Required Reading.
    
1. Hoare, C. A. R., Jayadev Misra, Gary T. Leavens, and Natarajan Shankar, 
   <a href="http://www.cs.utoronto.ca/~hehner/csc465/VSI-manifesto.pdf">
   "The verified software initiative: A manifesto."
   ACM
   Computing Surveys 41, no. 4 (2009): 1-8. Hoare is 1980 Turing
   Award Winner. Required Reading.
  
1. Donald E. Knuth and M. D. McIlroy, "Programming Pearls: The
   Common Words Problem and its Solutions," Communications of the
      ACM, Vol. 29, No. 6, 471-483.  1986.
      <a href="../Notes/CWP/cwp-knuth-cacm-1986.pdf">
      cwp-knuth-cacm-1986.pdf, Required Reading.
  
1. 
    <a href="http://en.wikipedia.org/wiki/Software_design_pattern">
      http://en.wikipedia.org/wiki/Software_design_pattern
    Visit the links to the individual patterns also. 2013.
    Required Reading.
    
1. Miryung Kim, Thomas Zimmermann, Nachiappan Nagappan, 
   A Field Study of Refactoring Challenges and Benefits,  
   FSE '12: ACM SIGSOFT the 20th International Symposium on the
   Foundations of Software Engineering, 11 pages. 2012. http://users.ece.utexas.edu/~miryung/Publications/fse2012-fieldrefactoring.pdf
  
1. Java Reflection
     http://docs.oracle.com/javase/tutorial/reflect/index.html
     Recommended Reading.
    
1. http://www.cse.lehigh.edu/~glennb/oose/ppt/Junit.ppt
   JUnit slides
   Required Reading.
    
1. http://java.ociweb.com/javasig/knowledgebase/2008-12/TestNG.ppt
   TestNG slides
   Required Reading.

1. http://beust.com/t/testng-gtac.ppt
   Beyond JUnit: TestNG the next gen.   Required Reading.
  
1. McGraw, Gary, and Ming Chow. "Guest Editors' Introduction:
   Safeguarding the Future of Software Security." IEEE Security &
   Privacy,  vol 7, no. 3 (2009): 11-12.  PDF accessible via WSU
   Library proxy.  Required Reading.
  
1.     David Hovemeyer and William Pugh, "Finding Bugs is Easy", ACM
   SIGPLAN Notices, Volume 39 Issue 12, December 2004, pp 92 - 106,
   search for its PDF, 
    <a href="http://findbugs.sourceforge.net/">
      http://findbugs.sourceforge.net/ Eclipse and IDEA Plugins.
    <a href="../Lectures/2013-03-26/findbugs-etc.pptx">
      ../Lectures/2013-03-26/findbugs-etc.pptx slides. Both paper
    and slides: Required Reading

1.  Diomidis Spinellis, Georgios Gousios, "Beautiful Architecture",
    O'Reilly Media, Inc., 432 pp, 2009.  Highly readable.  Find it on
    WSU Library Safari.  The whole book is a Reference.
    
    1.  Chapter 11 by Blandy on "GNU Emacs Architecture" is Required Reading.
    
    1. Chapter 13 by Bertrand Meyer on "Software Architecture:
       Object-Oriented Versus Functional" is Required Reading.

1. Prabhaker Mateti, "Condense the List of Numbers", <a
  href="../Notes/condenseNumRanges-2013.pdf"> A good example of what
  pseudo code ought to be.  Unpublished.  2013.  Required Reading.
  
1. Prabhaker Mateti, "Rigorous Re-Design of Knuth's Solution to the
   Common Words Problem",
   href="../Lectures/CWP/cwp-pm-selected-pages.pdf"> These are
   selected pages from a paper that is a work in progress.
   Unpublished.  2013.  Required Reading.

* Quotes

"There are two ways of constructing a software design: One way is
  to make it so simple that there are obviously no deficiencies, and
  the other way is to make it so complicated that there are no obvious
  deficiencies. The first method is far more difficult."
  -- Sir Charles Antony Richard Hoare, 1980 Turning Award Winner
  

  
"Program testing can be used to show the presence of bugs, but never
    to show their absence!" 
    --    Edsger W. Dijkstra, 1972 Turning Award Winner
  


* Tools

We will use many of the following tools.  Almost all of these are
included as open-source packages ready to install on Ubuntu Linux
distro; I do not know about RedHat.  Almost all of them also have
versions available for Windows.

  1. http://git-scm.com/ Git is a
    free and open source distributed version control system designed
    to handle everything from small (in KB) to very large projects (in
    TB) by individuals or teams.  (The URL is to a site that hosts a
    free book.)  Debian Linux: =apt-get install git-gui=
  
  1.  http://www.eclipse.org/
    Eclipse is an IDE for programming in Java, C++, and other
    languages.  Has many plugins.  Debian Linux: =apt-get install eclipse=

  1. http://www.jetbrains.com/idea/ Idea is an IDE for programming
    in Java, C++, and other languages.  Has many plugins.  Not in
    Debian.  Community edition is free; Ultimate is not.
  
  1. http://www.cs.tufts.edu/~nr/noweb/ Literate Programming tool.
     You prepare a literate programming file and then run it through
     this tool to produce a nicely typeset pdf, and also
     ready-to-compile source code files.  Debian Linux: =apt-get
     install noweb=

  1.  http://www.doxygen.org Doxygen is the de facto standard tool for
      generating documentation from annotated C++, Java, ... sources.

  1.  http://splint.org/ Splint can analyze C source code for
      security vulnerabilities and coding mistakes.  It is for the C
      language only, not C++ or other languages.

  1. http://frama-c.com/ Frama-C is
    a free and open source tool for the analysis of source code.
    Given a program and its assertions, it can mathematically verify
    if the program is correct.  It is for the C language only, not C++
    or other languages.

  1. Miscellaneous programs:
     1. indent, cccc, sloccount, pmccabe,
     1. bogosec, check, Electric Fence, valgrind, alleyoop, Valkyrie,
     1. KCachegrind, Massif Visualizer

     1. cobertura: java tool that calculates the percentage of code
        accessed by tests, 
     1. cbmc: bounded model checker for C and C++ programs,
     1. Umbrello, dia2code, AutoDia
     1. xxgdb, kdbg, gdb server, ddd
     1. ant, maven

* Books

There is no prescribed text book for CS7140.  Books are grouped by topic.

1. Ivan Marsic, Software Engineering, Sep 2012, 600+ pp. This is a
   free PDF to download: http://www.ece.rutgers.edu/~marsic/books/SE/
   Recommended reading, in general.
      
1. Ian Sommerville, Software Engineering (9th Edition),
      Addison-Wesley; 2010, 792 pages, ISBN-10: 0137035152.  Freely
      downloadable slides on all chapters.  Reference.
      
1. Pierre Bourque, Robert Dupuis, Alain Abran and James Moore
   (Editors), "Guide to the Software Engineering Body of
   Knowledge", 2004. This is free to read in HTML format only:
   http://www.computer.org/portal/web/swebok/about.   Reference.

1. Alan J Perlis (Editor), Frederick Sayward (Editor), Mary Shaw
      (Editor), Software Metrics.  ISBN-13: 978-0262512817, 420 pages, The
      MIT Press (November 1, 2008).
      Reference.
    
1. Paul C. Jorgensen, Software Testing: A Craftsman's Approach,
      (Third or Fourth Edition).  ISBN-10: 0849374758. Reference.

1. Martin Fowler, Kent Beck, John Brant, William Opdyke, Don Roberts,
   Refactoring: Improving the Design of Existing Code Addison-Wesley,
   ISBN-13: 978-0201485677, 464 pages, 1999.  Reference.

1. David Parnas, Collected Papers, [search the web].  Reference.
1. Bertrand Meyer, Object-Oriented Software Construction (OOSC) 2e.
   Has an excellent chapter on Undo/Redo.  1997 [search the web] Highly
   recommended reading, in general.
1. Bertrand Meyer, Touch of Class, a fresh way of teaching
   programming. 2013. [search the web]
