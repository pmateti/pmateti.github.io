# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+DATE: 2018-05-27
#+TITLE:Adv Software Eng: HW1 Summer 2018
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CS7140 Software Engineering Lecture
#+HTML_LINK_HOME: ../Top/index.html
#+HTML_LINK_UP: ../Top/index.html
#+HTML_HEAD: <style> P,li {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../Top/\">CS 7140</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2017 &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP: showeverything
#+OPTIONS: toc:nil

Home work in this course is done individually, without help from
others.  The due date is announced on the course home page.

In this HW1, we are focussed on the +SOLID principles of OOD, and in
particular on+ Design by Contract and use of Assertions.

The numbers in parens indicate relative importance of subtopics.  Do
not expect them to add upto a 100.


* Improve OOD C++

[45 points] [Improve OOD] [C++] The file [[../Examples/Worms/worms-one-file.cpp.html][worms.cpp colorized]] |
[[../Examples/Worms/worms-one-file.cpp][worms.cpp plain]]
 implements a grass roots game example of wiggly worms
(scissor heads, cannibals, or vegetarian kind) moving about.
Additional Notes in the pages at [[../Lectures/Examples/Worms/][Worms]].

    1. (40) Revise it so that it is in "proper" OOP form.  Describe the end
       result and the changes made in a brief tech report.
    1. (60) Write entry- and exit-assertions for all the methods, and class
       invariants.  You may ignore assertions relating to
       =ncurses.h=.
    1. (20) The design and code-as-given does not "really" do anything
       about the z-axis.  Suggest ideas and implement.
    1. (00) It probably has bugs.  Feel free to ignore its bugs (that is,
       you are not expected to fix bugs).  If you can, identify them!
    1. (10) Write one or two paragraphs reporting on how you discovered and
       revised the classes, and on your experince with the tools you
       used to carry out this assignment.

** Bonus

1. [25 points Bonus] The worms program did not use threads.  Use
   threads to improve the "look and feel" and revise your answers to
   1.1 through 1.5.  [Bonus points help only when you are just below a
   grading curve.  At the discretion of your instructor.]


* Implement Condense the Numerical Ranges

1. [In Java8+, or Kotlin] [45 points] See Section 6 of
   [[../Examples/CondenseNumRanges/]] [Inserted]

Your exercise! Part of HomeWork#1.  In Java8+, or Kotlin.  45 points.
Later, we will use this code during discussions of Testing, etc.


1. (40) Design and implement in Java two solutions to the Condense the
   Numerical Ranges (CNR) Problem.  Use the above designs.  If you
   prefer other designs, you must also include your design
   descriptions.

1. (60) Write entry- and exit-assertions for all (well, longer than 10
   lines) the methods, and all class invariants.

1. (30) Outline a rigorous (executable?) specification that every CNR
   program should satisfy.

1. (50) Correctness must be the focus.  Not efficiency.

1. (20) Include test results for at least 200 examples.

1. (10) Must build cleanly with the latest Java8+.  Note that Java10
   is around the corner.  Use a build system of your choice: ant,
   maven or gradle.

1. (10) Write one or two paragraphs reporting on how you discovered and
   revised the classes, and on your experience with the tools you used
   to carry out this assignment.


* Archive

1.  For archival purpose, some old problems are still included below.

1. For Spring 2017, improve OOD Java.  For Summer 2018, skip this.

1. [45 points] [Java8] [JavaFX] [Threads] [Testing] Read about the
   Game of Life by Conway (GoL) on the wikipedia.

1. (40) Design and implement in Java an elegant looking GoL program.
   Google Play has several Android APKs.  Use the source code of
   http://www.bitstorm.org/gameoflife/. Or not.

1. (60) Write entry- and exit-assertions for all (well, longer than 10
   lines) the methods, and all class invariants.

1. (30) Outline a rigorous (executable?) specification that every GoL
   program should satisfy.

1. (40) Many GoL programs fail to implement the game properly.
   Particularly, the concurrency and the infinite grid parts.  How do
   we devise a test plan to check that well-known example patterns are
   done right?  Present an executable solution.

1. (10) Must build cleanly with the latest Java8 + JavaFX.  Note that
   Java9 is around the corner.  You are welcome to use an alternative
   instead of JavaFX.  But then include an articulation of why.

1. (10) Write one or two paragraphs reporting on how you discovered and
   revised the classes, and on your experience with the tools you used
   to carry out this assignment.


* Journal

1. [10 Easy-to-Earn Points] Please maintain a journal for this homework.
Submit a summary.

* Turn In

1. Follow all ethical/ scholary traditions of attribution.

1. Include screenshots, particularly for the Worms program.  Other
   than the source code files, put everything else together and
   produce *one* PDF file.

1. The file hw1.tar.bzip2 should be a compressed tar ball of all the
   files related to this homework.  Include the revised/ original
   source code files so that everything builds cleanly.  I expect to
   see sub-directories for each problem.  I expect to be able to build
   all the programs by invoking =make=, ..., =gradlew build= at the
   top level.

1. Submit on Pilot.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
