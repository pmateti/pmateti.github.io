# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+DATE: 2020-09-11
#+TITLE:Adv Software Eng: HW Problems
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CS7140 Adv Software Engineering
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 &bull; <a href=\"https://cecs.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil


Home work in this course is done individually, without help from
others.  The due date is announced on the course home page.

In this HW1, we are focussed on the Design by Contract and use of
Assertions.

The numbers in parens indicate relative importance of subtopics.  Do
not expect them to add upto a 100.


* Improve OOD C++

[45 points] [Improve OOD] [C++] The file [[../Examples/Worms/worms-one-file.cpp.html][worms.cpp colorized]] |
[[../Examples/Worms/worms-one-file.cpp][worms.cpp plain]] implements a grass roots game example of wiggly worms
(scissor heads, cannibals, or vegetarian kind) moving about.
Additional Notes in the pages at [[../Lectures/Examples/Worms/][Worms]].

    1. (40) Revise it so that it is in "proper" OOP form.  Describe the end
       result and the changes made in a brief tech report.
    1. (60) Write entry- and exit-assertions for all the methods, and class
       invariants.  You may ignore assertions relating to
       =ncurses.h=.
    1. (20) The design and code-as-given does not "really" do anything
       about the z-axis.  Suggest ideas and implement.
    1. (00) It probably has bugs.  Feel free to ignore its bugs (that is,
       you are not expected to fix bugs).  If you can, identify them!
    1. (10) Write one or two paragraphs reporting on how you discovered and
       revised the classes, and on your experince with the tools you
       used to carry out this assignment.

** Bonus

1. [25 points Bonus] The worms program given above did not use
   threads.  Use threads to improve the "look and feel" and revise
   your answers to 1.1 through 1.5.
1. Bonus points help only when you are just below a grading curve.  At
   the discretion of your instructor.


* Implement Condense the Numerical Ranges [CNR]

[45 points] [In Java8+, or Kotlin] See Section 6 of
[[../Examples/Condense-Num-Ranges/]].  Two designs were presented to the
CNR Problem.  Implement these in Java or Kotlin.  Later, we will use
this code during discussions of Testing, etc.  The numbers within
parens indicate relative importance.  They do not add up to a 100.

1. (60) Write entry- and exit-assertions for all (well, longer than 10
   lines) the methods, and all class invariants.  For every loop,
   include a strong (strongest?) loop invariant.

1. (50) Correctness must be the focus.  Efficiency is important, but a
   distant secondary goal.  Include supporting discussion.

1. (20) Include test results for at least 200 examples.  Explain how
   you constructed these examples.  Chronologically, we are yet to
   cover testing.

1. (10) Must build cleanly with the latest Java8+ or Kotlin.  Note
   that Java10+ is around the corner.  Use a build system of your
   choice: ant, maven or gradle.

1. (10) Write one or two paragraphs reporting on how you discovered and
   revised the classes, and on your experience with the tools you used
   to carry out this assignment.


* Archive

1. For awareness and archival purposes, some old HW1 problems are
   (still) included below.

** Game of Life

1. [45 points] [Java8] [JavaFX] [Threads] [Testing] Read about the
   Game of Life by Conway (GoL) on the wikipedia.

1. (40) Design and implement in Java an elegant looking GoL program.
   Google Play has several Android APKs.  Use the source code of
   http://www.bitstorm.org/gameoflife/. Or not.

1. (60) Write entry- and exit-assertions for all (well, longer than 10
   lines) the methods, and all class invariants.  For every loop,
   include a strong (strongest?) loop invariant.

1. (30) Outline a rigorous (executable?) specification that every GoL
   program should satisfy.  Two candidate languages for the executable
   specs are Python and Haskell.

1. (60) Many GoL programs fail to implement the game properly.
   Particularly, the concurrency of life forms and the infinite grid
   parts.  How do we devise a test plan to check that well-known
   example patterns are done right?

1. (10) Must build cleanly with the latest Java + JavaFX or Kotlin.
   You are welcome to use an alternative instead of JavaFX.  But then
   include an articulation of why.

** Print Errors
** Freecell Solitaire
** Library Method strlen(3)
** The Famous "Telegram Problem"

1. (Originally described in 197x by Peter Naur, 2005 Turing Award
   Winner.) 
1. Informal Problem Statement: "Write a program that takes a number w,
   then accepts lines of text and outputs lines of text, where the
   output lines have as many words as possible but are never longer
   than w characters. Words may not be split, but you may assume that
   no single word is too long for a line."
1. The problem is analyzed at length by Bertrand Meyer.


* Journal

1. [10 Easy-to-Earn Points] Please maintain a journal for this
   homework.  Submit a summary.

* Turn In

1. Follow all ethical/ scholary traditions of attribution.

1. Include screenshots, particularly for the Worms program.  Other
   than the source code files, put everything else together and
   produce *one* PDF file.

1. The file hw1.tar.bzip2 should be a compressed tar ball of all the
   files related to this homework.  Include the revised/ original
   source code files so that everything builds cleanly.  I expect to
   see sub-directories for each problem.  I expect to be able to build
   all the programs by invoking =make=, ..., =gradlew build= at the
   top level.

1. Submit on Pilot.

* References

1. Prabhaker Mateti, Lecture Notes on Wiggly Worms
1. Prabhaker Mateti, Lecture Notes on Condense Num Ranges
1. Prabhaker Mateti, A Collection of HW1 Problems.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
