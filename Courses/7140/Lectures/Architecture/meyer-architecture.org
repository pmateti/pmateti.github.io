# -*- mode: org -*-
#+DATE: 2016-02-25
#+TITLE: Software Architecture: OOP v Functional Prog by Meyer
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: Software Engineering
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2016 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil


Bertrand-Meyer-Arch-OO-Func-2009-Orig.pdf  meyer-pudding-ex.png
Bertrand-Meyer-Arch-OO-Func-2009.pdf       
Bertrand-Meyer-OOP-v-Func-Split


1. A toy example:  From (precise) descriptions of puddings, compute
   1. sugar content
   1. estimate time to make
   1. retrieve instructions to make it

1. One Approach

   1. List all puddings (Trifle, lemon upside-down pudding, Dutch apple
      cake, Christpudding)

   1. For each pudding, write down sugar content, time to make,
      instructions, etc.

1. Another Approach

  1. Define a small set of 'pudding combinators.'
  1. Define all puddings in terms of these combinators.
  1. Calculate sugar content from these combinators too.
  1. An Example of a Pudding: [[./meyer-pudding-ex.png]]

1. Descriptions Of Puddings
  1. salad = on-top-of topping main-part
  1. topping = whipped (take pint cream)
  1. main-part = mixture apple-part orange-part
  1. apple-part = chopped (take 3 apples)
  1. orange-part = optional (take 6 oranges)

** Compute S (i.e., Sugar Content): Functional Prog Solution

  1. S (on-top-of p1 p2) = S (p1) + S (p2)
  1. S (whipped p) = S (p)
  1. S (take q i) = = q * S(i)
  1. ...

** Advantages

1. When we define a new pudding/recipe, we can calculate its sugar content
   with no further work.  

1. Only if we add new combinators or new ingredients would we need to
   enhance S.


** Statemnt of A Financial Contract Problem


1.  Against the promise to pay USD 2.00 on December 27 (the price of
    the option), the holder has the right, on December 4, to choose
    between:
  1. Receiving USD 1.95 on December 29, or

  1. Having the right, on December 11, to choose between:

        1. Receiving EUR 2.20 on December 28, or

        1. Having the right, on December 18, to choose between:

           1. Receiving GBP 1.20 on December 30, or

           1. Paying immediately one more EUR and receiving EUR 3.20
              on December 29‚Äù

** Functional Programming Version

1. Europian Option: european t u = get (truncate t (or u zero))

1. H below denotes the expiry date, or horizon

1. H (zero) = infinity , where infinity is a special value with the
   expected properties

1. H (or c1 c2)  = max (H (c1), H (c2))

1. H (anytime c) = H (c)

1. H (truncate t c) = min (t, H (c))

1. H (get c) = H (c)


* References

1. Diomidis Spinellis, Georgios Gousios, "Beautiful Architecture",
   O'Reilly Media, Inc., 432 pp, 2009.  Highly readable.  Find it on
   WSU Library Safari.  
  1. The whole book is a Reference.  

  1. Chapter 13 by Bertrand Meyer on Software Architecture:
     Object-Oriented Versus Functional is Required Reading.

