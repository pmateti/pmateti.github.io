# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+STARTUP:showeverything
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:nil
#+LINK_HOME: ../../
#+LINK_UP: ../../Lectures
#+DESCRIPTION: CS7140 Software Engineering Lecture
#+BIND: org-export-html-preamble-format (("en" "<a href=\"../../Top/\">CS 7140 Advanced Software Engineering</a>"))
#+BIND: org-export-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2013 %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+STYLE: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>

#+TITLE: Bertrand Meyer on Architecture: OOP v Func TBD


* Toy Example: Puddings

[[./meyer-pudding-ex.png]] 

** Expressed in Functional Prog

  1. pudding = on-top-of topping main-part
  1. topping = whipped (take pint cream)
  1. main-part = mixture apple-part orange-part
  1. apple-part = chopped (take 3 apples)
  1. orange-part = optional (take 6 oranges)
  1. /combinators/: take, whipped, mixture, chopped, optional
     1. All the internal (i.e., non-leaf) nodes are combinators. 
     1. "combinator" a func prog term for functions that construct
       composite objects.

** Pudding Class Diagram

[[./meyer-pudding-classes.png]]

** Compute S, the Sugar Content: Functional Prog Solution

  1. S (on-top-of p1 p2) = S (p1) + S (p2)
  1. S (whipped p) = S (p)
  1. S (take q i) = = q * S(i)
  1. ...

** Advantages
1. When we define a new pudding/recipe, we can calculate its sugar content
   with no further work.  

1. Only if we add new combinators or new ingredients would we need to
   enhance S.

* Statement of A Financial Contract Problem
1. Against the promise to pay USD 2.00 on December 27 (the price of
   the option), the holder has the right, on December 4, to choose
   between:
  1. Receiving USD 1.95 on December 29, or

  1. Having the right, on December 11, to choose between:

        1. Receiving EUR 2.20 on December 28, or

        1. Having the right, on December 18, to choose between:

           1. Receiving GBP 1.20 on December 30, or

           1. Paying immediately one more EUR and receiving EUR 3.20
              on December 29”
1. Originally used as an example of how Functional Prog can do things well.

** Functional Programming Version

1. Europian Option: european t u = get (truncate t (or u zero))

1. H below denotes the expiry date, or horizon

1. H (zero)  = ∞  , where ∞ is a special value with the expected properties

1. H (or c1 c2)  = max (H (c1), H (c2))

1. H (anytime c) = H (c)

1. H (truncate t c) = min (t, H (c))

1. H (get c) = H (c)

* List from the Eiffel Library

[[./meyer-eiffel-list.png]]

TBD why 

* Visitor Pattern Explored

[[./meyer-actors-visitor-pattern.png]]

* An Architecture for Constructing Puddings

[[./meyer-pudding-architecture.png]]

* References

1. Diomidis Spinellis, Georgios Gousios, "Beautiful Architecture",
   O'Reilly Media, Inc., 432 pp, 2009.  Highly readable.  Find it on
   WSU Library Safari.  
   1. The whole book is a Reference.  

   2. Chapter 11 by Blandy on GNU Emacs is Required Reading.

   3. Chapter 13 by Bertrand Meyer on 
      [[./Bertrand-Meyer-Arch-OO-Func-2009.pdf][Software Architecture: Object-Oriented Versus Functional]]
      is Required Reading.

2. http://www.oodesign.com/factory-method-pattern.html

3. http://www.oodesign.com/visitor-pattern.html

4. [[http://stackoverflow.com/questions/255214/when-should-i-use-the-visitor-design-pattern][the visitor design pattern]] at stackoverflow.com

5. http://en.wikipedia.org/wiki/Command-query_separation

6. http://en.wikipedia.org/wiki/Lamda_expression (correct spelling: lambda)

7. [[http://en.wikipedia.org/wiki/Eiffel_(programming_language)#Deferred_classes_and_features][Eiffel: deferred class]] v effecting class

8. [[./meyer-eiffel-intro.pptx]]  Introduction to Eiffel slides
