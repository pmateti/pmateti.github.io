# -*- mode: org -*-
#+DATE: 2016-03-16
#+TITLE: Secure Programming in C/ C++
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2016 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:0

* Buffer Overflow + Smashing The Stack

1. Prabhaker Mateti, "Buffer Overflow",
   http://www.cs.wright.edu/~pmateti/ InternetSecurity/ Lectures/
   BufferOverflow/, 2012.  (This article not the embedded Aleph One
   article) Required Reading.

1. Secure Programming for Linux and Unix HOWTO -- Creating Secure Software
   http://www.dwheeler.com/secure-programs/  2003.  Reference

1. Ulfar Erlingsson, Yves Younan, and Frank Piessens "Low-Level
   Software Security by Example" 2008 Chapter 30 Low-Level Sofware
   Security by Example.pdf URL TBD  Recommended Reading

* Code Analysis Tools and Run-time Protection

1. [Web search for URLs]
1. Splint for C
1. RatScan 6 (a graphical front end to RATS)
1. Coverity.com
1. CodeSonar 7 from Grammatech
1. en.wikipedia.org List-of-tools-for-static-code-analysis
1. [[http://cwe.mitre.org/cwss/][Common Weakness Scoring System]] Recommended Reading.

* References

1. [Book] Introduction to Computer Security, Michael Goodrich, University
   of California, Irvine Roberto Tamassia, Brown University, Addison
   Wesley, 2011.  Reference

1. Robert C. Seacord, Secure Coding in C and C++, 600 pages,
   Addison-Wesley Professional; 2 edition, 2013
   Recommended Reading.
