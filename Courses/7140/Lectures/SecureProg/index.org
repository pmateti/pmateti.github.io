# -*- mode: org -*-
#+DATE: 2018-07-11
#+TITLE: Secure Programming
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

Abstract: In this course, we are discussing Cyber Security narrowed
down to software engineering.

* Improving Cyber Security

1. CPU Architecture
   1. Secure Boot
   1. Executable Address Space
1. Network Protocols
   1. Redesign of nearly all protocols
   1. Client/Server Dis-Trust
   1. Encrypted Packets
1. OS Design
   1. Privileges, Permissions, and Policies
   1. Process Lineage/ Provenance
   1. Address Space Layout Randomization
   1. Control-Flow Integrity
   1. Detection of Races
1. Cryptography
1. System Administration
1. Software Engineering
1. Only SE considered here, all others not

* Security Architecture Design Flaws

1. Cryptography misuse
1. Lack of compartmentalization
1. More privilege used than necessary
1. Relying on secret algorithms
1. Sharing resources 
1. Usability problems

* Software Without Security Holes


** Bugs v Vulnerabilities v Exploit

1. A bug is a behavioral deviation from the functional spec. Read more
   on this topic: [[../Debugging]]

2. A vulnerability is a bug that has "security implications".
   1. Can you deduce this??
   2. Know it after the fact.

3. An exploit takes a vulnerabilty and builds software with an
   unexpected behavior.

4. 2016 Fact about the State of the Art: No contests to the following
   claim: No single example exists that is 1000+ SLOC and is bug-free.

** Past Exploits and Their Causes

1. Unauthorized Access
1. Denial of Service
1. Confidential Information leakage 
1. Hijacking the Flow of Control 
1. Smashing the stack / Arbitrary Code injection 
1. [[http://en.wikipedia.org/wiki/Cross-site_scripting][Cross-site scripting]] on wikipedia.  Recommended   Reading.
1. [[http://en.wikipedia.org/wiki/SQL_injection][SQL Injection]] on wikipedia.   Recommended   Reading.

** Software Security Principles

1. (Overview of) Security Principles, 2012,
   https://www.cs.ucsb.edu/~kemm/courses/cs177/principles.pdf 25
   slides, [[./principles-ucsb-2012.pdf]] Required Reading.

1. [[./sec-nasa-2015.pdf][NASA Addressing SW Security]], 20+ slides, 2015.  Required
   Reading.

1. IEEE Avoiding the Top 10 Software Security Design Flaws,
   https://cybersecurity.ieee.org/blog/2015/11/13/avoiding-the-top-10-security-flaws
   with my scribbled-in comments [[./10-Flaws-2014-IEEE-pmMarked.pdf]]
   2014.  Required Reading.



* CERT and Other Secure Coding Guidelines

1. http://cs.stanford.edu/people/eroberts/cs181/projects/viruses/cert.html
   The Role of CERT

1. https://www.securecoding.cert.org/confluence/display/seccode/SEI+CERT+Coding+Standards
   CMU SEI CERT Coding Standards. Required Reading -- Top Level.

1. https://www.securecoding.cert.org/confluence/display/java/SEI+CERT+Oracle+Coding+Standard+for+Java SEI CERT Oracle Coding Standard for Java

1. Prabhaker Mateti, Audit of Android Src Code, work-in-progress (not
   ready for public), {pm-aosp-audit-min.pdf} located on thumb drive.
   Discuss a couple of CERT rules for Android.

1. [[./pl-security-java.org][Secure Java Programming]] basics by PM. About 2pp. Required Reading.

1. [[./pl-security-c-cpp.org][Secure Programming in C/ C++]] basics by PM.  About 1 page. Required
   Reading.


* Static Analysis of Source Code

1. [[./StaticAnalysis][Static Analysis of Source Code]]
   1. Data Flow Analysis
   2. Control Flow Graph
   3. Taint Analysis
   4. Lexical Analysis
   5. False Positives
   6. False Negatives

2. Well-known "simple" Tools
   1. splint
   2. CheckStyle
   3. FindBugs
   4. PMD
   5. Ubuntu/ Debian: =apt install ...=
3. Commercial Tools
4. Advanced Tools
      1. AutoRefactor Examples   
      2. Security Improvement; 
      3.    Misc Open Source Projects; 
5. Formal Verification Tools
   1. Spoon
   2. JTransformer
   3. Frama-C

* References

1. Several references embedded in the above.

1. [Book] Chess, Brian, and Jacob West. Secure Programming with Static
   Analysis. Pearson Education, 2007.  Reference

1. [Book] Introduction to Computer Security, Michael Goodrich, University
   of California, Irvine Roberto Tamassia, Brown University, Addison
   Wesley, 2011.  Reference

1. McGraw, Gary, and Ming Chow. "Guest Editors' Introduction:
   Safeguarding the Future of Software Security." IEEE Security &
   Privacy,  vol 7, no. 3 (2009): 11-12.  PDF accessible via WSU
   Library proxy.  Required Reading.

1. Prabhaker Mateti, [[http://www.cs.wright.edu/~pmateti/InternetSecurity/Lectures/SecSoftware/]["Software without Security Holes"]], 2012. Required
   Reading.

1. [[http://cwe.mitre.org/top25/][2011 CWE/SANS Top 25 Most Dangerous Software Errors]] Recommended
   Reading.

1. Dawson Engeler, et al., A Few Billion Lines of Code Later: Using
   Static Analysis to Find Bugs in the Real World, CACM, 10pp, 2010.
   http://courses.cs.washington.edu/courses/cse484/14au/reading/coverity.pdf.   Required Reading.

1. [[http://www.ccs.neu.edu/home/noubir/Presentations/Network-Security-Use-Misuse-Crypto.pdf][Cryptography misuse]] 95+ slides, Guevara Noubir, Northeastern
   University.  Recommended Reading

1. [[https://www.cs.ucsb.edu/~chris/research/doc/ccs13_cryptolint.pdf][An Empirical Study of Cryptographic Misuse in Android Applications]]
   2013 Recommended Reading.

* End

# Local variables:
# after-save-hook: org-html-export-to-html
# end:
