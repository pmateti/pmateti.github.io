
#+TITLE: Secure Java Programming
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:t
#+LINK_HOME: ../../
#+LINK_UP: ../../Lectures
#+DESCRIPTION: CS7140 Software Engineering Lecture
#+BIND: org-export-html-preamble-format (("en" "<a href=\"../../Top/\">CS 7140 Advanced Software Engineering</a>"))
#+BIND: org-export-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2013 %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+STYLE: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>


*  Java Security

1. https://www.google.com/search?q=java+vulnerabilities+2013
1. [[http://www.oracle.com/technetwork/java/security-136118.html][The Java Language Environment]] The Byte Code Verification Process:
   Checks class files before running.
   1. Jumps (Branches) are always to locations within the same method.
   2. Data is always initialized and references are always type-safe.
   3. Access to private data and methods is controlled.
   4. http://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html#jvms-4.10

1. Sandbox: Local code is trusted to have full access to local resources (such
   as the file system) while (downloaded) remote code (e.g., an
   applet) is not trusted and can access only the limited resources
   provided inside the sandbox.  The sandbox is a set of rules.
   Similar to =chroot= "jail". 

1. .\\
   [[./java-security-anc9.gif]] Java Sandbox

* Java Classloaders

1. =java.lang.ClassLoader= Part of the JRE that dynamically load
   classes into the JVM.

1. Environments are populated from the system (boot) classpath, app
   server classpaths, application classpaths, and many more.

1. Applet Class Loader -- when and how an applet can add/replace
   classes to JRE.  Applets are sent by a web server.

1. The bootstrap class loader loads the core libraries
   =$JAVA_HOME/jre/lib=

1. The extensions class loader loads the code in the extensions
   directories =$JAVA_HOME/jre/lib/ext=

1. The system class loader loads code found on =$CLASSPATH.=

1. Classes loaded by different loaders do not have package-private
   access to one another even if they have the same package name.

1. http://www.onjava.com/pub/a/onjava/2005/01/26/classloading.html Reference

1.  The hierarchies of class loaders are increasingly complex, as are
    the environments they
    produce. http://incubator.apache.org/depot/version/jar-hell.html
    Reference

* The Security Manager

1. =SecurityManager appsm = System.getSecurityManager();=
   1. Defines a security policy for an application. 
   1. system policy file =${JAVA_HOME}/lib/security/java.policy=
   1. Applies to all Java programs that run in the JVM on that system
     #+begin_src java
  grant signedBy "Duke" {
      permission java.io.FilePermission "/tmp/*", "read,write";
  };

  // Grant everyone the following permission:
  grant { 
      permission java.util.PropertyPermission "java.vendor", "read";
  };
#+end_src
1. Java library checks with SM whenever a "dangerous" operation is
   about to be called.
1. SM can raise a =SecurityException=
   1. 
     #+begin_src java
java.security.AccessControlException: access denied 
   (java.io.FilePermission some-file-name read)
#+end_src
     #+begin_src java
grant codeBase "file:user_client_installed_location" {   
    permission java.io.FilePermission "that-file-name", "read"; };
#+end_src

* JAR file Manifest Attributes

1. The Permissions attribute is used to ensure that the application
   requests only the level of permissions that is specified in the
   applet tag or JNLP file.

1. The Codebase attribute is used to ensure that the code base of the
   JAR is restricted to specific domains.

1. The Application-Name attribute is used to provide the title that is
   shown in the security prompts for signed applications.

1. The Application-Library-Allowable-Codebase attribute is used to
   identify the locations where your application is expected to be
   found.

1. The Caller-Allowable-Codebase attribute is used to identify the
   domains from which JavaScript code can make calls to your
   application.

1. The Trusted-Only attribute is used to prevent untrusted components
   from being loaded.

1. The Trusted-Library attribute is used to allow calls between
   privileged Java code and sandbox Java code without prompting the
   user for permission.


* References

1. http://docs.oracle.com/javase/tutorial/index.html Java Tutorials by
   sun/oracle.com.  Excellent tutorials.  Free to download in its
   1000+ page entirety. Recommended Reading.

1. http://docs.oracle.com/javase/tutorial/security/index.html
   "Tutorial Trail: Security Features in Java SE"  From the above.
   Highly Recommended Reading.

1. http://www.oracle.com/technetwork/java/seccodeguide-139067.html
   Secure Coding Guidelines for Java.  [[./sec-java-oracle-pm-edited.html][CS7140 version]]
   [[./sec-java-oracle-pm-edited.html]] Required Reading.

1. Java Security Resource Center http://www.oracle.com/technetwork/java/javase/overview/security-2043272.html  Reference
