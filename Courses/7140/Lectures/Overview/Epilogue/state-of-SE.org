# -*- mode: org -*-
#+DATE: 2016-04-28
#+TITLE: The State of Software Engineering
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../
#+HTML_HEAD: <style> P,li {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2016 &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:1

Do you know of any bug-free program?  What is its length?

* Opinions on Software Quality

1. Hoare on Software Quality,
   http://onlinelibrary.wiley.com/doi/10.1002/spe.4380020202/epdf,
   Software -- Practice and Experience, 103-105, 1972.

1. A Few Opinions of Professor [[./hehner.org][Hehner]]

1. Bill Gates, RSA Conference, 2005: "64% of developers are not
   confident in their ability to write secure applications."

1. Bruce Schneier: "We wouldn't have to spend so much time and effort
   on network security if we didn't have such bad software security."
   -- Bruce Schneier, author of "Applied Cryptography", and "Secrets &
   Lies: Digital Security in a Networked World".

1. "Malicious hackers don't create security holes; they simply
   exploit them.  Security holes and vulnerabilities -- the real root
   cause of the problem -- are the result of bad software design and
   implementation."  -- John Viega & Gary McGraw, authors of
   Building Secure Software, 2001.

1. "Have you ever written a program section with a security hole?
   How did you know?" -- Mark G. Graff & Kenneth R. van Wyk, authors of
   "Secure Coding: Principles and Practices"

1. "There is no software liability -- no incentive for secure software.
   Most developers never learned to produce secure code.  Secure code
   often takes a performance hit -- i.e., the software runs about 1/3
   slower -- something many users don't want to tolerate.  Writing
   secure code also takes a lot more time -- hence, development costs
   are higher than usual.  Consequently, the longer development times
   and the longer running times discourage developers from writing
   secure code."

1. [[http://www.gnu.org/philosophy/shouldbefree.html][www.gnu.org/philosophy/ shouldbefree.html]] Opinion


* Software Engineering

1. Software Engineering "culture" at leading companies: Sustained on
   the large scale. Thousands of engineers conforming to style guides,
   documenting specs and designs, writing unit, regression and
   integration tests.

1. "Bad programmers dive right in and start coding. Good programmers
   wrestle with a problem, thinking of different ways of looking at
   it, trying to come up with a breakdown of the components of the
   solution, and considering a variety of approaches before they can
   write any code at all."

1. "Featurism", Performance: Overriding concern, Correctness: some
   concern, Security: ??, Privacy: ??

1. Secure software development is to prevent software crash/ hang/
   misbehave -- any concern??

1. Typically, 5 - 50 bugs per KLOC ?  Suppose 10% of the bugs result
   in security faults.  40,000 KLOC*5*10% = 25,000 security bugs.


* Software "Science"

1. Like physics is to engineering ...
1. [[./metrics.html][Software Metrics]]

* Software "Engineering"

1. Life cycle [[../Cartoon/7140-life-cycle-cartoon.html][cartoon]]

2. Is software engineering "engineering"?  Can we defend the title,
   "Software Engineering"?

3. Civil Engineering can do cost-estimates, excellent long before a
   project begins.  Upon completion, these can be seen to have been
   valid (but for inflation, political turmoil, etc.)
   1. Can software "engineering" do that?

4. Meaning of "Software Maintenance"
   1. Software Smells
   3. Refactoring
   4. Maintenance v Enhancement

* Best Practices

1. [[../BestPractices]]

# Local variables:
# after-save-hook: org-html-export-to-html
# end:

