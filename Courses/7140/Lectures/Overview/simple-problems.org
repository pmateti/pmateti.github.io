# -*- mode: org -*-
#+DATE: 2020-08-27
#+TITLE: Simple Programming Problems
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../Top/
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil

What are some simple programming problems?

* /bin/ls

Everyone is familiar with the =/bin/ls= of Unix/Linux.  Is this a
"simple" problem?  How difficult (e.g., in man-hours) do you think it
is to a "Specifications of ls" document?  Did the (original)
developers have this doc?  How long might it take you to design and
implement a new ls?

Suppose we simplify this problem to just doing "ls" with no options,
and no arguments.  Here is an incomplete list of (definition) tasks

1. Current Working Directory (CWD)
1. Raw (unformatted) Listing of CWD contents

1. Should /bin/ls take on the responsibility of "correct" listing?

1. Columnizing the listing

* The Dutch National Flag Problem

An array a[1..n] is filled with elements colored red, white or
blue. Design an algorithm that rearranges the elements so that all the
red-elements are at the left, all the blues are at the right, and the
whites are in the middle.

Non-functional requirements: Do not assume that (i) red, white and
blue are named integer constants; (ii) nor that red < white < blue.

Can you write, in an afternoon, the algorithm/program?  One that is
guaranteed to work?

* Condense the List of Numbers

Problem Statement: You are given a comma separated list of items in a
text file. The list is terminated with a period. Each item is either a
number, or a hyphen separated pair of numbers. Your program should
condense this list as much as possible, as can be seen from the
following examples.

=1,3,4,2,6,5,8,5,7. becomes=\\
=1-8.=

=9,100-4870,4993,4871-4875,5016,5118,7-250,5100-5123. becomes=\\
=7-4875,4993,5016,5100-5123.=

=1103,1023-1100,87654321,1050-1150,1110,1250-1344. becomes=\\
=1023-1150,1250-1344,87654321.=

How would you proceed?  Will you do requirements analysis, specs,
design, implement, test, ... in that order?  Or, will you jump into
"coding" and testing through which you discover things?

* Bubble Sort

You undoubtedly learnt Bubble Sort.  May be many versions.

In our CS7140, we are not that interested in efficiency (BigOh
notation, etc.) as we are in elegance, and correctness.  We can
certainly define correctness for sorting.  May be not "elegance".

Try writing down the correctness criteria.  Try developing a test
harness for this.  Are these two tasks "simple" (enough)?

* Quick Sort

You undoubtedly learnt Quick Sort also.  May be just one version.
Re-read it.  E.g., read https://algs4.cs.princeton.edu/23quicksort/
from the book by Sedgewick and Wayne.

Do a new version with the following constraint.  You are given the
array a, and permitted to use index variables i, ..., etc.  But, not
allowed to do any assignments to a[i].  Instead, you are encouraged to
use a primitive named =exchanged(i, j)= that exchanges a[i] with a[j].
Is this a simple task?  Is the resulting program simple?

* CWP (Common Words Problem)

"Given a file of text, and a number k, print the k most common words."
Is this a simple problem?  Can you understand an implementation
of this "quickly"?

We will be spending several lectures on this problem and one of its
solution by Donald E. Knuth, "A Solution to the Common Words Problem",
Communications of the ACM, 1986. Knuth is a Turing Award
winner.

* An Exercise on Bit Sequences

Consider sequences of b bits.  Each such sequence has (b - 4) 5-bit
subsequences of adjacent bits.  For example, the sequence 1101011...
contains the 5-bit subsequences 11010, 10101, 01011,...  Given a file
of sequences of b bits, we wish for an algorithm/ program that would
print all and only the b-bit sequences with the two properties: (1)
the first 5 bits are 00000, and (2) no two 5-bit subsequences are the
same.

1. Formally specify the informal description.
2. Efficiency is not a priority, but do not make it super slow.
3. Correctness is super important.
4. Elegance (also) is super important.  For now, elegance is is the
   ease with which you can convince a colleague of yours that it works
   just by reading it, long before she tries to execute it.
5. Does your program generalize to sequences of arbitrary characters?
   How easily?



* Self Analysis

As a software engineer can you "solve" (at least) these and other
problems of this range of complexity?

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
