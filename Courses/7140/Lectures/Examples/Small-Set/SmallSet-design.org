# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+TITLE: Design of a SmallSet
#+AUTHOR: Prabhaker Mateti
#+LINK_HOME: ../../
#+LINK_UP: ../
#+DESCRIPTION: Mateti: OO Programming and Design 
#+HTML_LINK_HOME: ../../
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\"> ../../</a> | <a href=\"SmallSet-design-slides.html\"> Slides </a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil

* Design Example: SmallSet

1. Illustrates /abstraction/ in design
2. cf.  [[http://docs.oracle.com/javase/8/docs/api/java/util/Set.html]]
   The details of the Set as defined in Java API
3. Focus on the "methods"
   1. not the size.
   2. not the PL notation.
   3. for now, not (even) Java.
   4. Not trying to match the Java Set API.
1. Only one design is presented below.


* Design Idea

1. Design of SmallSet using int array A[0 .. sz-1] of fixed size, sz
   >= 1000 (Requirement Clarification RC1)
1. [More sophisticated designs do NOT use arrays  (see union-find).]
1. Fill the array l-to-r as we insert.
1. int i, ux, ne, sz, ...;  // related to array indices.
1. ux is the least index i so that A[i] is unfilled.
1. number-of-items-in-the-set, ne, may be strictly < ux
1. ux <= sz;  initial value of ux == ?
1. Deducible: A[ux .. sz-1] vacant


* Abstraction Documentation

1. Duplicate items are permitted (Requirement Clarification)
1. abstraction(A, ux) == S, the set is-def-as (::=) {A[i] | 0 <= i < ux}
1. This is the big S used in Specs.
1. setOf(int []) is the abstraction function that yields the
   mathematical set represented by the Java SmallSet object s.
1. setOf(SmallSet s) ::= setOf(s.ear[0 .. s.ux -1]).

* insert-an-item(S, e)

1. pre: ux  <  sz
1. post:  S == S.pre + {e}
1. S stands for the value it has at the point used; so, we simplify
   S.post to S.
1. design:  A[ux] := e; ux++;

** Design Documentation  

1.  Note that at pre item-is-in-the-set(S, e) may be true.
1.  May be better: A[ux] := A[ 0]; ux++; A[ 0] := e;
1.  Is this design dependent on how is-in-the-set is designed?


* item-is-in-the-set(S, e)

1.  design: A[ux] := e; fx := linear-search(A, 0, ux);
1.  fx  <  ux?
    1.  if so  {swap A[fx] with A[ 0]}  (why?)
1.  return (fx  <  ux)

** The idea of a sentinel

1. design: A[ux] := e;  (ux should be < sz, always)
1. without it linear search has two tests per iteration

* Class Invariants

1. Recall that for all public methods, classInv() is
   1. both a pre- and a post-condition; it is a convention not to
      state this again and agian for each public method.

1. Exercise: Write the class invariant.

* More Design Issues

1. Do we ever compact (e.g., delete dupes from) the A[0 .. ux-1]?
   1.  As is, our design is prone to fail.
   1.  If we do, when do we do it?
   1.  All the time?
1.  Is this a design or implementation?
1.  Concurrency?


* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
