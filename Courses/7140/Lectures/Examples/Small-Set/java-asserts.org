# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+Date: 2018-07-20
#+TITLE: Java Assert Practical Issues via SmallSet of Int Example
#+AUTHOR: Prabhaker Mateti
#+LINK_HOME: ../../
#+LINK_UP: ../
#+DESCRIPTION: Mateti: OO Programming and Design 
#+HTML_LINK_HOME: ../../
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+STARTUP:showeverything
#+OPTIONS: toc:1

Abstract: This article jots down a few "gotchas" in using assertions
in a real Java program.  In the src code for every Java class, our
goal is to include the class invariant as part of (i) both a pre- and
a post-condition for every public method, and (ii) a post-condition of
every constructor.

* SmallSet Implementation Context

1. [[./smallset-impl.org]] implemented in Java
1. Includes assertions.  Does not use JML.
1. This is NOT an implementation of Java Set container.
1. Note: The code may contain bugs, and other issues.  It is intended
   to be used in various teaching purposes.

* Abstraction Function

1. setOf(SmallSet s) is the abstraction function.  Intended to be used
   *only* in assertions.
1. The code for setOf() uses compact().

** Compact

1. compact(s) is a function, based on the information hiding
   principle, removes duplicates, while preserving the abstraction of
   s.  So, the object s before and after abstractly-equals the same
   setOf(s), as in, taking liberties with our notation,
   setOf(s.before) == setOf(s.after).
1. We happen to have declared compact(s) public.  So, we must have
   classInv.  setOf(this) == setOf(newset).
1. You can see the recursion.  This will be endless, because depending
   on s, there is no escape.

* Code of Assertions

1. The expressions used in pre- post and class invariants ought to be
   disjoint from the code of all methods.  Had we done the assertions
   in JML, this would have been clear.  Why? Bugs in the methods will
   alter the true/false results of assertions.

1. For several best-practice-without-JML reasons, the SmallSet.java
   implementation did not do the above.  It "reused" the code of a
   couple of public and private methods.

** Failed Expectation of the Compiler

1. Having reused the code, when a method M is being invoked as part of
   an assertion evaluation, assertions of M ought to be ignored.

1. More TBD

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
