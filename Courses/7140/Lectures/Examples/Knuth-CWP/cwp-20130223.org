
#+TITLE: Knuth's Common Words as a Software Design Documentation Example
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:t
#+LINK_HOME: ../../../
#+LINK_UP: ../../Lectures
#+DESCRIPTION: Software Engineering Lecture

* Knuth's Common Words Problem
1. Donald E. Knuth, "A Solution to the Common Words Problem",
   Communications of the ACM, 1986,
   [[../../Notes/cwp-knuth-cacm-1986.pdf]], Required Reading.
1. "Given a file of text, and a number k, print the k most common words."
1. Used as an example of Literate Programming
1. Criticized as an example of software development
1. Our interest here:  How to describe its spec + design?
  1. Let us not question: Why do we need such a complex design?
  1. Instead: How do we describe this design?
  1. Instead: Did Knuth describe the design or the implementation?
  1. How do we progress from a simple "set of words" to n-ary hash trie?
** Common Words Problem Spec
1. Defs of text, words, ...?
1. Def of "common" word?
1. "Most Common"?
** Common Words Solution Design
1. Collection of Words Occuring in the file
  1. Natural data type: Bag
  1. Refined into: Set SWN of (Word, nOccurs)
     1. Sorted on the spelling
     1. n-ary trees, tries, â€¦
1. QWN := Sort the set SWN based on nOccurs
  1. Destructive Traversals

** Overview of N-ary Trees to Hash Tries
1. Design Description of CWP needs several levels.
1. Collection of (Word, nOccurs) as an n-ary tree: [[http:../../Notes/cwp-nary-tree.pdf][cwp-nary-tree.pdf]]
  1. A Prefix of a Word is a Word?
1. A more space efficient trie: [[http:../../Notes/cwp-plain-trie.pdf][cwp-plain-trie.pdf]]
1. One more improvement: [[http:../../Notes/cwp-ringed-trie.pdf][cwp-ringed-trie.pdf]]
1. In the absence of pointers: [[http:../../Notes/cwp-hash-trie.pdf][cwp-hash-trie.pdf]]
