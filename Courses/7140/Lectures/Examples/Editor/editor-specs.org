# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-

#+Date: 2015-07-25
#+TITLE: Specs of Entities and Operations within a Programmer's Editor
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:2
#+DESCRIPTION: WSU CS 7140 Advanced Software Engineering
#+BIND: org-html-preamble-format (("en" "<a href=\"../../Top/\">CS 7140</a> %d"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+HTML_LINK_HOME: ./index.html
#+HTML_LINK_UP: ./
#+HTML_HEAD: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STYLE: <style type="text/css">@media screen {BODY {margin: 15%} }</style>

I use editors as target examples in Software Engineering courses I
teach.  The materials below are hence deliberately incomplete.
The context of this article is [[./index.org][Programmers' Editor]]

* Meta Commentary

1. Specs can be written in ordinary English.  Almost always, these are
   highly ambiguous.

1. Specs should be written in stylized English.  They should be peer
   reviewed for the elimnation of ambiguity and to check for
   completeness. Re-read Meyer's Seven Sins of Specifiers.

1. A certain amount of notations (formalism) always improves
   communication -- when the notation is well chosen.

1. Even when good notations are in use, always include well written
   specs in stylized English.

1. For sequences, we use the familiar array [] notation.
1. Let q be a sequence.  #q is the number of elements in it. q[#] is
   the last item.  q[ 0] is the first item.

1. These notes implicitly reference items explained in [[./][Editors]]

1. Please report errors.  I am afraid it is not error-free.  Ignore
   spaces within the = =  token.

* Text Elements

** Lines

1. A line, el, is a sequence of characters ending in '\n'. el[#] == '\n'
2. Note the ambiguity.  Is this "hello\nthere\n" a line?
   1. Excluding the last character, the line should have no '\n'.
   2. What about strange characters, such as control chars, ...
   3. for i in 0 .. #el - 1: el[i] != '\n';

** Text File Content

1. Consider a text file tf.  Its content is almost always thought of as
   a sequence of bytes.  This is often the way the OS gives the
   content of a text file.  This content can also be viewed as a
   sequence of lines.

1. =is-a=  You probably have heard of this from AI courses.
1. tf.content is-a seq of lines
1. tf.content is-a seq of bytes
1. There is an unambiguous way of mapping back-and-forth between these
   two: tf.content.lines and tf.content.bytes


* Buffers

** Buffer Data Type

1. An edit buffer B has text content, B.content
1. It may (not must) also have other "things": e.g., cursors,
   views/ windows, its file name, ...

** Buffer Operation: create

1. create(file-name fnm) returns buffer b
2. pre: fnm exists
   1. OS responsibility
   2. f := sys-call-open(fnm) + sys-call-read() + sys-call-close(); f
      non-null
   3. This is depending on "you-know-what-I-mean" and usurping some
      amount of "how" it is done.

3. post: b.content = = f.content, f.name == fnm
4. Requirements Clarification: If f does not exist, create an empty
   file, then do as above.

** Buffer Operation: save

1. save() returns file f

1. f := sys-call-write(this-buffer.file-name, this-buffer.content)

1. Requirements Clarification: If f is the file from which we created
   this buffer, silently replace it with new file content.  Retain all
   file permission, file create time stamp etc.  File modification is
   now.

** Buffer Operations: insert, delete, cut, paste, undo, redo, ...

1. A spec should define all the operations.

** Cut- Paste- Buffers

* Cursors

** Cursors Overview

1. We use several cursors.

2. dot and the mark: two must-have cursors
3. Cursors exist in the buffers and views/windows.
4. Cursors do not exist independently of a buffer or a window.
5. A buffer has these cursors, but not necessarily "alive" at all
   times.

6. Constraints (also known as invariants)
   1. Let b be a buffer; it has b.dot and b.mark cursors, among others.
      1. 0 <= b.mark.y < number of lines in b
      2. 0 <= b.mark.x < num chars of b.lines[b.mark.y].
      3. All of these constraints go into the class invariant of
         Buffer, whose data members include dot and mark

** Cursor Data Type

1. We model a cursor as a pair x,y of numbers as in Cartesian
   coordinates.  In our context, both are always non-negative
   integers, and the y grows downwards.
7. Init values: dot = = mark = = (0, 0)

** Cursor Operations

1. Here are some suggestively named operations:
   move-right-by-one-char, move-right-by-one-word,
   move-right-by-one-line, move-right-by-one-sentence.
1. Similar operations for "left" moves.
1. In a spec suggestively naming is necessary but not sufficient.
   Exercises for you!
1. The specs depend on definitions of word, line and sentences.
1. The moves are constrained by the buffer that the cursor is on.

1. Requirements Clarification: What happens if the cursor is at the
   end of the buffer, and we (try to) move right?

1. Requirements Clarification: What happens if the cursor is at the
   right-bottom of the wind, and we (try to) move right?

* Windows

** Windows Overview

1. The window content is "visible".  We are *not* using the word in
   the sense of the Windows OS, or Linux KDE.  We mean it as a
   rectangular area showing the content of some buffer.  We can
   simplify the first sentence to: The window is visible.

1. Requirements clarification: Unless a window is on a buffer B, the
   content of B is invisible.

1. Requirements Clarification: Should we be able to edit B even when B
   is invisible?  Our answer: No.  Even though, it is very powerful to
   say yes.

1. Requirements Clarification: Do windows overlap? Tiled? Left to the
   "GUI Window Manager of the System"?

1. Requirements Clarification: It is perfect to map our windows into
   Windows OS or Linux KDE windows.


** Windows Data Type

1. A window W is of width ww, height hh.  Window operations may
   shrink, enlarge, move it relative to the buffer, etc.
   1. ww >= 0, hh >= 0
   2. Forbid == 0?  Why? Why not? Requirements clarification?

1. A window "has" a buffer B.  The window content is dictated by this.
1. A window has dot mark cursors.

** Window Content

1. The W.content is a portion of the buffer behind it.
2. We specifiy the content t for the core (i.e., typical) case first.
   Then, we worry about fringe cases.
3. W.content is a sequence of bytes.  Does not have '\n'.
4. #W.content = hh * ww
5. Recall that W slides along its buffer B, only showing a portion of
   the buffer.  From now on, we will visualize the B as a scroll.

6. Relative to the buffer B, assume that the left-top corner of window
   W is positioned at (wx, wy).
   1. W.content.lines[ 0] == Buffer.content.lines[wy], assuming h > 0
   2. W.content.lines[i] == Buffer.content.lines[wy + i -1] truncated
      to ww chars, for i: 0 .. hh - 1, in general
   3. What if Buffer.content.lines[wy + j], for some j, is too short?
      We pad it with blanks.  Let us call W.content.lines[j] by the
      name el.  Then, el = Buffer.content.lines[wy + j] + enough
      spaces so that #el = ww.

** Window Operation: Place a Window on a Buffer

1. Case 1: Buffer B has no windows on it.
1. Case 2: Buffer B has exactly one window on it.
1. Case 3: Buffer B has > 1 windows on it.
1. We focus on Case 1 only.  Next subsection.

** Window Operation: Place a New Window on a Buffer

1. createWin(buffer B, width w, height h) returns Window
1. create a Window object w x h, so that its buffer is B, its dot and
   mark cursors are at (0, 0), left-top at (0, 0) of B, the content
   computed from B.
1. Generally, we prefer "declarative" specs.  Some times, it is easier
   to do this "operationally", as above.

** Window Operation: Delete a Window

1. Obviously the window is destroyed/ released.
1. Requirements Clarfications: What happens to the buffer?  Does this
   depend on whether the buf has other windows? Does the window have
   its own dot + mark?  In addition to those of the buffer?  Suppose
   the buffer has only this window, and now it is deleted.  If then
   place a new window on it, should the new window have the last dot +
   marks?

** Cursor in a Window

1. Perennial Goal: The dot cursor should remain in the window.

1. The mark cursor, if possible, should remain in the window.  But may
   not be possible because the window is too small to contain both.

1. Requirements Calrification: Both of these should have been described.

1. Spec Decision: Are the (x, y) of the cursors relative? Relative to
   window? Or buffer?

1. Requirements Calrification: Assume that the dot is at the
   right-bottom of the window.  User wants to move right.  Complain by
   beeping? Or move/ reposition the window appropritiately, honoring
   the wish?

* Key Bindings

** Key Bindings Overview

1. Let QM be a sequence of public methods.  So, e.g., QM[ 7] might be
   the creation of new buffer based on a file name you are yet to
   give.

1. This QM is well defined at compile/ build time.  It will not grow
   or shrink dynamically.

1. Key bindings specifies what key stroke invokes what method of QM.

** Key Bindings Data Type

1. Spec predicated on a design idea: Have an array called KB, of size
   equal to the number of key "codes".  For now, let us say we have
   256 codes (based on ASCII 8-bit chars).

1. KB[x] = = QM[i], 0 <= x < 256, for some i.

1. The value of KB[x] can be changed by the user, at run time, or
   through a config file.

1. Requiremenst Clarification: All the above.

1. Design Suggestion: QM can be an array of *pointers* to public
   methods.

** QM Self-Insert Method

1. There is a Self-Insert Method.  It has one parameter -- the key
   code.  Effect: inserts at the dot position this character.

1.  Most key bindings are to Self-Insert.
   
** KB Operation: Display Current Bindings

** KB Operation: Edit Bindings

** KB Operation: Read Bindings from Config File

* The Editor

** The Editor Overview

1. Requirements Clarification: Our editor should be able to edit
   multiple files simultaneously.  It should permit cut-n-paste across
   these.

1. Requirements Clarification: Our editor truly edits buffers, never
   files.  Buffers are created from files.  When a buffer is saved, it
   replaces the file it was created from.

1. Requirements Clarification: New files are created by trying to edit
   a non-existing file.

** Editor Operation: Start

1. The editor as a process has already begun.
1. Requirements Clarification: Start operation should resume where the
   user left off in the last session.

** Editor Operation: Finish

1. Exits (i.e., terminates) the editor process.
1. Requirements Clarification: Warn and take helpful actions if hours
   of work by the user is about to be abandoned.  Introduce the notion
   of last session.

** Editor Operation: Loop

1. It is essentially a non-terminating loop listening to key strokes
   and executing method bound to the keys.

1. To exit the loop, user must invoke Finish.
