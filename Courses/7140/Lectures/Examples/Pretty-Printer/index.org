# -*- mode: org -*-
#+DATE: 2016-06-20
#+TITLE: Req, Spec, Design and Proof of a Pretty Printer for Pascal
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2016 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Requirements

1. The design and construction of pretty printers is a solved problem
   for decades.  
   2. indent for C, C++  (=apt-get install indent=)
   3. Builtin pretty printers in Eclipse, Intellij, et al.

1. Stand alone pretty printer, PPP.
1. fout = PPP(fin), fin and fout are text files.
1. The fout is very useful particularly when fin /syntactically
   invalid/.
1. The semantics of the source code in fout and fin must be
   equivalent.
1. Speed: Comparable to =cat=.  Not discussed further.
1. Example of a pretty printed listing: [[./ppp-Spec-166.pdf]]

* A Specification Schema For Indenting Programs

1. [[http://onlinelibrary.wiley.com/doi/10.1002/spe.4380130206/abstract][Abstract]]

2. "A two level specification of the functional behaviour of a
   class of indenting programs for Pascal is presented."

1. The high level specification is given as a stylized Pascal grammar,
   [[./ppp-Spec-168.pdf][p168]] and  [[./ppp-Spec-169.pdf][p169]] in Extended BNF.

1. The low level specifications define how syntactically invalid text
   is dealt with.

1. These specs require several mathematical functions.

1. Most indentation styles appearing in the literature can be
   specified with precision using methods developed in this paper.

** Lexical Equivalence

1. lex(fin) == lex(fout), assuming a proper def of lexical analysis.
1. The def of lex must not ignore comments.

** Spec of a Lexical Analyzer

1. Delimiters
1. Set of reserved words
1. Constants: integers, real numbers, characters, strings
1. Definition of LEX
1. See Ref#1

** Spec of a Lex Including Comments

1. Pascal Comments: {} and (* *)
1. Requirements Analysis: Should we "mess" with comments in pretty
   printing"?
1. See Ref#1

** Selected Pieces of Specs

1. Def of Text File p165 bottom
1. The high level specification is given as a stylized Pascal grammar,
   [[./ppp-Spec-168.pdf][p168]] and  [[./ppp-Spec-169.pdf][p169]] in Extended BNF.

1. Predicate Properly-Laid-Out p170.
1. Def of Tokens p172 and p173.
1. Reduced Toekn Sequences p174.
1. Segments p176.
1. Left Margin of a Segment p177.

* A Design of PPP

3. The transformation that these programs perform on the input text is
   a composition of
   1. splitting input lines, 
   2. altering the blank space   between tokens and 
   3. computing the margin required in front of each of the split
      lines.

1. Four modules: io, lex, stack and indent.  See Fig 1
   [[./ppp-Spec-Schema-1983.pdf]] p203.
1. Lexical Analyzer: lex
1. Pretty Printer: indent
1. See Ref#2 and Ref#3.  From these you should be able to extract the
   design in our VHLL.  Exercise!

* An Implementation of PPP

1. The program is approximately 330 lines long and consists of four
   modules: io, lex, stack and indent.

1. The local copy [[./ppp-Correctness-1983.pdf]] includes source
   code listing and assertions.

1. Exercise: Implement the standard indent (=apt-get install indent=)
   of Linux for C source code based on the design above using C as the
   implementation language.  Minor deviations are permitted.

* A Proof of PPP

** Overview

1. http://onlinelibrary.wiley.com/doi/10.1002/spe.4380130302/abstract
   The correctness of an indenting program for Pascal is proved at an
   intermediate level of rigour. The specifications of the program are
   given in the companion paper.

1. Correctness Proof using entry-/exit-assertions.  See Ref#2 for
   a local copy [[./ppp-Correctness-1983.pdf]].

1. We prove first that the individual procedures contained in the four 
   modules meet their specifications as given by the entry and exit
   assertions. A global proof of the main routine then establishes
   that the interaction between modules is such that the main routine
   meets the specification of the entire program. 

1. We argue that correctness proofs at the level of rigour used here
   serve very well to transfer one's understanding of a program to
   others.  We believe proofs at this level should become commonplace
   before more formal proofs can take over to reduce traditional
   testing to an inconsequential place.

** Selected Assertions

1. Fig 2.  The Line buffer. [[./ppp-Correctness-1983.pdf]]   p205.
1. Lines 40..43 p207.
1. Class Invariant of Lex, lexINV(uu) , p209.
1. Entry- Exit assertions of function nexttoken, p213.
1. Loop invariant in indent, p220.

* References

1. Prabhaker Mateti, "A Specification Schema for Indenting Programs],"
   Software -- Practice and Experience, Vol.13, pp. 163--179, 1983.
   (Reprinted in {\it Software Specification Techniques}, McGettrick
   and Gehani (Eds.), Addison-Wesley 1986, 269--288, ISBN:
   0-201-14230-9.)  Links:  [[./Pretty-Printer-links.html]] Local copy of
   the paper: [[./ppp-Spec-Schema-1983.pdf]]
   Required Reading.  

1. Prabhaker Mateti and Joxan Jaffar, "A Correctness Proof of an
   Indenting Program", Software: Practice and Experience, Vol. 13,
   pp 199-226, 1983.  Local copy [[./ppp-Correctness-1983.pdf]]
   Recommended Reading.

1. Prabhaker Mateti, "Documenting Program indent: An Example," 1984.
   Local copy of Tech Report [[./ppp-doc.org]].  Required Reading.

# Local variables:
# after-save-hook: org-html-export-to-html
# end:

