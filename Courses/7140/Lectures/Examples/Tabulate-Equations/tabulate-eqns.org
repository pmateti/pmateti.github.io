# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+TITLE Two Specifications of Tabulated Equations
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:t
#+LINK_HOME: ../../
#+LINK_UP: ../../Lectures
#+DESCRIPTION: CS7140 Software Engineering Lecture
#+STYLE: <style> @media screen {BODY {margin: 10%} }</style>
#+BIND: org-export-html-preamble-format (("en" "<a href=\"http://cecs.wright.edu/~pmateti/Courses/7140/\">CS 7140 Advanced Software Engineering</a>"))
#+BIND: org-export-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2013 %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))

* Two Specifications of Tabulated Equations

This note contains both a "good'' answer, and a "really'' precise
answer to an exam question in a Software Engineering class.  The
occasional commentary by this instructor is set in the type size of
this paragraph.

* Informal Statement of the Problem

Consider the informal description, given in the next paragraph, of a
program.  Give a carefully written specification of it, using
well-chosen notations, and words.  Pretend that the requirements
analysis is already done: That is, wherever relevant in the specs,
explain in English the appropriate parts of requirements.



Our mathematician friend wants a program that can "tabulate'' a
sequence of symbolic equations found in typical linear algebra into a
matrix form.

For example, given the input below

#+BEGIN_EXAMPLE
3x + 5y + 714z = 12g + 53b,
76489x +3z = 2g+8b+99a + 1024,
           x+ 49 = 7g,
1234567y+ 2z = a + 999b + 6x + 911,
 + 3x + 5y =  53b + 12g.
#+END_EXAMPLE
your program should produce the result shown
#+BEGIN_EXAMPLE
    3x +       5y + 714z      = 12g +  53b,
76489x +              3z      =  2g +   8b + 99a +      1024,
     x +                   49 =  7g,
         1234567y +   2z      =       999b +   a + 6x +  911,
    3x +       5y             = 12g +  53b.
#+END_EXAMPLE

Our friend  tells us that her equations do not contain
minus signs, nor floating point numbers, but that sometimes the
coefficients are larger than can fit in 64-bits, and the equations
become so long that she has to write them on a long scroll of paper
sideways.  We impressed her by remarking that we will imagine the
paper width to be infinity.


* A Good Solution

There are essentially three things we must consider. (1) What
are the preconditions? (2) Output looks good.  (3) Output is
equivalent to the given input.  This solution is deliberately written
in an informal way to emphasize what needs to be specified versus how
to specify it.  So, find all the ambiguities -- but, do not just nit
pick! 

Since nothing particular is said about how i/o ought to be, we assume
that the required tabulateeqn program takes its textual input
from stdin and outputs to stdout.


** Syntax of Equations

The input must be a sentence derived from the non-terminal eqns
of grammar  given below.  Note that (a) an equation can span
multiple lines, and (b) terms of the same variable may occur multiply
either in the rhs or in the lhs or both.

#+BEGIN_EXAMPLE
eqns ::= eqn ',' eqn  '.'
eqn ::= lhs '=' rhs
lhs ::= exp
rhs ::= exp
exp ::= term  term '+' exp
term ::= number  coeff varid
coeff ::= empty  ['+'] number
varid ::= letter
#+END_EXAMPLE

(Requirements Analysis: It is not clear if long equations are
presented on multiple lines in the input.  We will de facto allow it
as our grammar/parser of input takes care of it.
If our client insists that that should not be permitted, our
task becomes more complex.  The required grammar is no longer
context-free. )

Other than using some kind of grammar, I know of no way to
describe this precondition.  Syntax diagrams etc. are, of course,
other ways of specifying context-free grammars.  Why should we let
coeff begin with an optional plus?  Is the grammar
"unambiguous'' ?  What does unambiguous mean in this context?  The
same as in an "unambiguous specification'' ?  If duplicate-var-id
terms are not to be permitted in an equation, why does the required
grammar become more complex?  For that matter, are Pascal, C, Ada,
... context-free?  

Output is Equivalent to the Input

Item 3 was easier to do than item 2.  So we do that
next.

The output is also a sentence derivable from eqns.  The -th
equation of the input is semantically equivalent to the -th
equation of output.  Two equations  and  are
equivalent if  is equivalent to , and  is equivalent to
.  An expression  is equivalent to  if both  and 
have the same terms, same number times in each.  Note that
permutations of terms is allowed.  Simplification of terms is not even
attempted.


** Output is Well-Formatted

(Requirements Analysis: Since we impressed our customer by remarking
that we will imagine the paper width to be infinity, we choose to
output each equation as one line, regardless of its length.)

Let n be the number of lines in the output.

The output consists of equations printed one per line.  The
order of the equations is the same as that of input.

To describe the formatting of the output, imagine dividing the 2-d
output into columns of  rows as follows.  Draw vertical
straight-lines, from the topmost line to the bottom-most spanning the n
 lines of output, immediately surrounding each variable id letter,
each '+' and the '=' .  Similarly draw a line to the
immediate right of each number, and one straight line at the leftmost
edge of the output.

The first (i.e., the leftmost) column must be a number-column.  Each
row in a column of numbers must be either a string of blanks, or a
right-justified number.

Each row of the equals-column must contain " = ".  Each row of
each plus-column must contain either a " + "  or three blanks.
All the rows of a variable id column must be 
either one blank or contain some letter, and all these letters
must be the same.

Should we also say "no column is all blanks''.  I think not;
what say you?  What about "The first (i.e., the leftmost) column is a
number-column'' ?  


* A Precise Solution



The following is a precise and rigorous spec.  Is it
error-free?  Is it complete?  Obviously, some of the sentences from
the preceding section need to be reproduced below if this section were
the only thing you wrote.  

** Syntax of Equations

Imagine (better yet: You write it!) a predicate parses-ok
 that yields true iff the string  is a sentence derivable from
the non-terminal  in the grammar .


Input must be a well-formed sentence of :
parses-ok eqns, input.


Let us call the required program as TE.  Its signature is:

function TE(fi: seq of eqn) returns fo: seq of line


where eqn is a set of sentences generated by the eqn of
the grammar above.

The auxiliary function that obtains the  and  sequences
from their derivation trees is left as an exercise to you.  Note that
while the commas and the period in the input are helpful in parsing,
the  sequence does not contain them; but the  does.  

Output is Equivalent to the Input

Two equations  and  are semantically
equivalent,

semantically-eq
bag-of-terms bag-of-terms, 
bag-of-terms bag-of-terms.

semantically-equal-eqnsinput, output
 
 parses-ok eqn,  and
 semantically-eq  .



Note that in parses-ok eqn, , it is  and
not .  Why?  What is the signature of semantically-eq?  Is it
ok to write  semantically-eq ,  ?


** Output is Well-Formatted

There Exists a Matrix


We now imagine a matrix M of size , with the
following properties.

well-formatted
  is-seq-chars and equal-width  and 

 is-a-plus or is-an-equals or is-a-varid or is-a-num

Recall that  is the number of equations.  For now, we do not know
; we simply postulate its existence.  We refer to  as the
y-th column.

We need the following aux functions.


isblank  blank .


isnumber parses-ok.


rjustified 
 isblank and isnumber and
isnumber 

Could we drop isnumber?
Should we change   isnumber to isnumber?


Each cell, , contains a seq of characters:
is-seq-chars
   in seq of char .


Each row in a given column  is equal in
width to the others in that column:
equal-width
    



Column  is a plus-column: 
is-a-plus

    or isblank  and 
    


Column  is an equals-column:
is-an-equals
    


Column  is a varid column.  At least one row contains a letter.
Each row is either one blank or this letter.

is-a-varid
 letter
    and 
.   or  blank  


Column  is a number-column.  At least one row contains a number.
Each row is either all-blanks or contains a right-justified number:
is-a-num
  isblank or rjustified  and
  isnumber 

Print the Rows of M

The -th line of output is a printing of the -th row of M followed by
either a comma if , or a period if .


print-all
 
 print ","  and
 print "."


Print is simply a catenation of all the columns of the -th
row and then trimming any blanks at the tail end.

Define print.
Shouldn't the previous section also say this?  Whatever happened to
the value ?  

** Output is Looking Gooood!


looks-good
 array  of seq of char
 well-formatted and  print-all 

Putting it all Together

output  tabulateeqns input , where
tabulateeqnsinput TE, where 
convert-to-eqn-seqinput.

convert-to-eqn-seqinput is a companion to
parses-ok.


This output is such that
semantically-equal-eqnsinput, output and
 nat  looks-goodoutput .

** Discussion

The following are some imagined questions from students.

If we have some 40 minutes to spend on this problem, do you
expect us to finish it this well?


Well, if you want an A, yes! More seriously, an answer along the lines
of Section 2 is certainly expected.  Section 3 is home work that you
should be able to do a good draft in a few, say 4, hours.  Such a
draft probably contains errors.  It is best to let others read it.  If
that is not possible, read it yourself, but after a day or two.

Is it worth spending this much effort in specifying instead of
producing several hundreds of lines of code?

I think so.  There are no statistics that can validate or
invalidate this belief.  Assuming that the program being developed is
not a throw-away program, but has a long lifetime, the careful
translation of requirements to specs and then paraphrasing them back
to the user/client is an effective technique to prevent expensive
design and coding errors.




