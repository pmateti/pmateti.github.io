# -*- mode: org -*-
#+DATE: 2017-02-01
#+TITLE: Core of /bin/ls: Columnize
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CEG7380 Cloud Computing
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2017 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil


This is an example of re-doing =/bin/ls=, a well-known utility of Unix.
We wish to consider requirements, specs, design, and implementation of
=ls=.  Several sections are deliberately shown incompletely.

1. [[../terminology.html]]
1. http://man7.org/linux/man-pages/man1/ls.1.html

* Requirements

** Requirements Doc

Make sure you experience the /bin/ls, i.e., run it a few times in
different directories.  Observe its output.  Read its man page.  Think
about what its requirements would have been, had this =ls= been a new
program to design.  But, it does exist.

So, we will assume that we re-wrote the requirements document.  It is
a learning experience to actually produce this document in full.
Exercise for you!

Here are the important statements of our requirements.

1. We wish to have a clone of =/bin/ls=, CLS, but implemented in Java/
   Kotlin/ Scala.  Note that the "standard" /bin/ls of Linux is from
   the FOSS GNU collection, written in plain C.  We will refer to this
   as GNULS.

1. The performance of CLS should be "comparable" to that of GNULS.
   Must not be slower/ longer than 10% of GNULS.

** Classroom Simplification

1. In the rest of these notes, we will focus on the =ls= with no
   arguments/ options.


** Requirements Analysis

1. Current Working Directory (CWD)
1. Should CLS take on the responsibility of "correct" CWD listing?

1. Raw Listing of CWD contents, as provided by OS calls.  The ls uses
   several system calls to read the contents of directories, and such.

1. How long is the longest file name?
1. Columnize the listing

The rest of these notes focus on =columnize=.  We occasionally
re-write the statements from the above paragraphs.  Verify that we are
not committing any of the "sins".

* Columnize: Description

: /* Columnize the list of strings pted by r. */
: char * columnize (char r[], unsigned int windowwidth) { ... }

The above plain C snippet is to be redone.  Study the declaration of
the function =columnize()= and the informal statements of intent shown
below and give (a) Requirements Analysis, and (b) Specifications of
=columnize()=.

The function should implement the core of the typical command (the
Unix command =ls=) to list the contents of a directory in a brief way.
A list of file names is obtained from the operating system.  This list
is given to =columnize()= as the first argument.  In this "list", the
names are separated by the =nul= (ascii =\0=) char; the end of the
list is indicated by two =\0\0=.  The =columnize()= routine must work
for arbitrarily long r[] inputs, subject only to the available amount
of memory.  See the performance expectations written above.

** Example#1 Input/ Output

In the input =r[]= example two lines are used only for the sake of
readability.

: 460\0casedl\0g.txi\0gulam\0manifest\0papers\0adapdl\0src\0dotg\0gu.prg\0
: gulam.g\0micrognu\0release\0airforce\0dsd\0gu3.prg\0gulam.hlp\0misc\0se\0\0

The string returned by =columnize(r, 60)= should be 

: 0         1         2         3         4         5
: 012345678901234567890123456789012345678901234567890123456789
: 460~~~~~|casedl|g.txi~~|gulam~~~~|manifest|papers~|adapdl\n
: src~~~~~|dotg~~|gu.prg~|gulam.g~~|micrognu|release\n
: airforce|dsd~~~|gu3.prg|gulam.hlp|misc~~~~|se\n\0

where (i) each blank is shown explicitly as =~=, (ii) to emphasize the
columns vertical-bar character is shown, and (iii) the top two lines
of digits are given only to help with the requirements analysis.


** Example#2 Output windowwidth = 50

1. Actual output of =% /bin/ls= in my directory
   =Sutherland:~/Courses/7140/Lectures=.

#+begin_src bash
0         1         2         3         4         5
012345678901234567890123456789012345678901234567890123456789
2017-01-09  Abstraction     OOP
2017-01-11  Assertions      Overview
2017-01-18  Bugs            Practices
2017-01-23  Design          Requirements
2017-01-25  Examples        SecureProg
2017-01-30  Implementation  Specs
2017-02-01  Maintenance     XP-Agile
#+end_src

** Example#3 Output, Same cwd as above, but windowwidth = 80

#+begin_src bash
0         1         2         3         4         5         6         7   
01234567890123456789012345678901234567890123456789012345678901234567890123456789
2017-01-09  2017-01-25   Assertions  Implementation  Practices     XP-Agile
2017-01-11  2017-01-30   Bugs        Maintenance     Requirements
2017-01-18  2017-02-01   Design      OOP             SecureProg
2017-01-23  Abstraction  Examples    Overview        Specs
#+end_src


* Requirements of Columnize

1. Columnize() of CLS.
1. A list of file names r[] is obtained from the operating system.

1. This list is given to =columnize()= as the first argument r[].  In
   this "list", the names are separated by the =nul= (ascii =\0=)
   char; the end of the list is indicated by two =\0\0=.

1. All the names in r[] appear in the output rows and columns.

1. Sorted output.
1. No new names in the output.
1. See the performance expectations written above.
   1. Must not be slower/ longer than 10% of GNULS.
   1. Assumption: Obtaining the list of file names from the operating
      system takes the same amount of time in Java/ Kotlin/ Scala.

** Requirements Analysis

1. Is r[] sorted?
1. How many names in the r[]?  Approaching virtual memory limits?  The
   =columnize()= routine must work for arbitrarily long r[] inputs,
   subject only to the available amount of memory.
1. How long is the longest name? cf. windowwidth.  Chop it off at
   windowwidth - 1?
1. What are the details of the columns? Sorted by column, and
   left-to-right?
1. Are all columns equal in width?
1. Are all columns equal in height?
1. Minimal number of lines?


* Specifications of Columnize

** Structure of Any Spec

1. Syntax spec of Input.
1. Syntax spec of Output.
1. Relationship between Input and Output

** Specifications of Columnize

1. Syntax spec of Input.
   1. let input-bag-of-names = bag(parse(r[], nul))
   2. Note: bag, not a set or sequence.
2. Syntax spec of Output.
   1. Output is a sequence of lines, q[].  Each line ends with \n.
   2. let output-bag-of-names = bag(parse(q[], whitespace-or-nl)).
   3. sorted-layout(q[]) shown below.
3. Relationship between Input and Output
   1. output-bag-of-names = input-bag-of-names.

4. m = map-to-matrix(q[]);
5. sorted(q) is defined as sorted (catenate-all-columns(m))
6. properly-layout(q)
   1. let w = width of any column
   2. trim(m[i, j]) is in output-bag-of-names U {emptyName}, (for all i, j)

TBD incomplete

* Design of Columnize



* Implementation of Columnize

* Source Code Listing of Columnize



* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
