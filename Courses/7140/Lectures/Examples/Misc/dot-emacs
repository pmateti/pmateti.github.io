;
; prabhaker mateti's emacs startup file .emacs
;


(add-to-list 'load-path "~/.emacs.d")
(add-to-list 'load-path "/usr/share/emacs/o-blog")
(require 'o-blog)
(require 'font-lock)
(require 'cc-mode)
(require 'uniquify)
(require 'eldoc)

;; (require 'ido) (ido-mode t) 
;; (setq
;;  ido-enable-flex-matching t ;; enable fuzzy matchin(custom-set-variables
;;  ido-enable-last-directory-history nil
;;  ido-record-commands nil
;;  ido-max-work-directory-list 0
;;  ido-max-work-file-list 0
;;  ido-max-prospects 4
;; )

;;(require 'zenburn)
;; alias emacs='GDK_NATIVE_WINDOWS=1 emacs'  ;; scroll-bar bug fix

(custom-set-faces '(default ((t (:inherit nil :stipple
 nil :background "#ffffff" :foreground "#141312" :inverse-video
 nil :box nil :strike-through nil :overline nil :underline
 nil :slant normal :weight normal :height 99 :width
 normal :foundry "unknown" :family "DejaVu Sans Mono"))))
)

(setq-default
 debug-on-error nil

 inhibit-startup-message t
 user-mail-address "pmateti@wright.edu"
 add-log-full-name "pmateti"

 make-backup-files nil
 auto-save-default nil
 next-line-add-newlines nil
 require-final-newline t
 standard-indent 4
 sentence-end-double-space t
 find-file-use-truenames nil
 find-file-compare-truenames t

 minibuffer-max-depth nil
 enable-recursive-minibuffers t
 minibuffer-confirm-incomplete t

 mouse-yank-at-point t
 mouse-autoselect-window t
 cursor-in-non-selected-windows t
 mouse-wheel-mode 1

 bell-volume 0
 visible-bell nil

 fill-column 70
 scroll-step 1
 scroll-conservatively 9999
 next-screen-context-lines 0
 mark-even-if-inactive t
 search-highlight t
 query-replace-highlight t
 case-fold-search t
 compare-ignore-whitespace "[ \t\n]+"

 global-font-lock-mode t               ;colorize all buffers
 font-lock-maximum-size nil
 font-lock-use-default-fonts t
 font-lock-use-default-colors t
 font-menu-ignore-scaled-fonts nil
 font-lock-multiline t
 font-lock-maximum-decoration t
 font-lock-face-attributes '()
 
 line-number-display-limit-width 99999
 frame-title-format '(buffer-file-name "emacs: %f;%p" "emacs: %f %b")
 adaptive-fill-regexp "[ 	]*\\([-!|#%;>*]+[ 	]*\\|(?[0-9]+[.)][ 	]+\\)*"
 uniquify-buffer-name-style 'forward
 ispell-program-name "aspell"
 magic-mode-alist nil

 undo-outer-limit 1048576
 undo-strong-limit (/ undo-outer-limit 10)

 working-temp-message-delay 0
 add-log-full-name "pm"

 large-file-warning-threshold 26214400
 history-length 100
 inhibit-startup-buffer-menu t
 echo-keystrokes 0.2
 column-number-mode 1
 auto-image-file-mode 1
 tooltip-mode 1
 temp-buffer-resize-mode 1
 minibuffer-electric-default-mode 1
 transient-mark-mode 1
 partial-completion-mode 1
 )

(setq-default
 mode-line-format
 (
  list "-"
;;       'mode-line-mule-info
       'mode-line-modified
       'mode-line-frame-identification
        '(line-number-mode " %l ")
;        "%b--"
	"%f "
;        '(column-number-mode " x%c")
        '(-3 "%p")
        "   "
;;        'global-mode-string
        "   %[("
        '(:eval (mode-line-mode-name))
        'mode-line-process
        'minor-mode-alist
        "%n"
        ")%]--"
        '(which-func-mode ("" which-func-format "--"))
        "-%-"
	)
 )

(fset 'yes-or-no-p 'y-or-n-p)

(add-to-list 'load-path "~/.emacs.d")

;(autoload 'scheme-mode "scheme-pmateti" "Major mode for Scheme." t)
:(autoload 'run-scheme "scheme-pmateti" "Switch to interactive Scheme buffer." t)


;;; Default Modes

(show-paren-mode t)

;; Enabling
(put 'eval-expression 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-region 'disabled nil)



;;; Interface-dependant settings

(setq-default
 default-frame-alist
 '(
;;   (scroll-bar-background . "dark cyan")
;;   (scroll-bar-foreground . "blue")
;;   (mouse-color . "DarkRed")
   (cursor-type . bar)
   (cursor-color . "DarkRed")
   ;; (background-color . "black")
   ;; (foreground-color . "gray64")
   (vertical-scroll-bars . nil)		; right
;   (tool-bar-lines   . 0)
   (left . 0)   (top . 0)    (width . 80)    (height . 60)
   ;; (menu-bar-lines   . 1)
   )
 ;; initial-frame-alist default-frame-alist
 )

;;; Keybindings
; HTML by pmateti
(fset 'html-href  "<a href=\"\"> </a>")
(fset 'html-href-twolines  "<a href=\"\"></a><br>")
(fset 'html-br  "<br>")
(fset 'html-para  "<p>")
(fset 'html-tt [escape ?b ?< ?t ?t ?> escape ?f ?< ?/ ?t ?t ?>])
(fset 'math-id   "b$f$")

(global-set-key "h"   'html-href)
(global-set-key "H"   'html-href-twolines)
(global-set-key "2"   'html-href-twolines)
(global-set-key "p"   'html-para)
(global-set-key "t"   'html-tt)
(global-set-key "4"   'math-id)

(fset 'thm
   [?\C-a ?\C-o ?\\ ?b ?e ?g ?i ?n ?\{ ?t ?h ?e ?o ?r ?e ?m ?\} escape ?\} ?\\ ?e ?n ?d ?\{ ?t ?h ?e ?o ?r ?e ?m ?\} ?\C-o ?\C-f])
(fset 'prf
   (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([1 15 92 98 101 103 105 110 123 125 left 112 114 111 111 102 14 escape 125 92 101 110 100 123 125 left 112 114 111 111 102 5] 0 "%d")) arg)))
(global-set-key "T"   'thm)
(global-set-key "P"   'prf)





(global-set-key [(control x) (control b)] 'electric-buffer-list)
;(global-set-key [(control v)] 'yank); scroll-up

;;; buffer switching
(setq
 ;swbuff-clear-delay 0.5
 swbuff-exclude-buffer-regexps
 '("^ " "^\\*Messages\\*$" "^TAGS"
   "\\*Buffer List\\*"
   "^\\*Completions\\*"
   "^\\*WoMan-Log\\*$"))

(global-set-key [(control tab)] 'swbuff-switch-to-next-buffer)
(global-set-key [(control shift tab)] 'swbuff-switch-to-previous-buffer)
(global-set-key [(control shift iso-lefttab)]
		'swbuff-switch-to-previous-buffer)


(global-set-key [(control tab)] 'yic-prev-buffer)
(global-set-key [(control shift tab)] 'yic-next-buffer)
(global-set-key [(control shift iso-lefttab)] 'yic-next-buffer)

(cond ((fboundp 'bs-show)
       (setq bs-default-configuration "files-and-scratch")
       (global-set-key [(control x) (control b)] 'bs-show))

      ((fboundp 'electric-buffer-list)
       (global-set-key [(control x) (control b)] 'electric-buffer-list)))

; (global-set-key [(meta k)] 'kill-this-buffer)
(global-set-key [(meta K)] 'clean-buffer-list)

(global-set-key [(meta \[)] 'backward-paragraph)
(global-set-key [(meta \])] 'forward-paragraph)



;(eval-after-load "color-theme" '(color-theme-robin-hood))
(eval-after-load "color-theme" '(color-theme-zenburn))

;; Local Variables:
;; mode: emacs-lisp
;; time-stamp-format: "%:y-%02m-%02d %02H:%02M"
;; time-stamp-start: "Updated: "
;; time-stamp-end: "$"
;; End:

;; -eof-
