
#+TITLE: On Software Bugs
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:t
#+LINK_HOME: ../../
#+LINK_UP: ../../Lectures
#+DESCRIPTION: CS7140 Software Engineering Lecture
#+STYLE: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-export-html-preamble-format (("en" "<a href=\"../../Top/\">CS 7140 Advanced Software Engineering</a>"))
#+BIND: org-export-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2013  <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>; %d"))

* Bugs Over The Years

1. [[http://www.devtopics.com/20-famous-software-disasters/][20 Famous Software Disasters]] in four parts.

2. [[http://www.wired.com/software/coolapps/news/2005/11/69355?currentPage=all][History's Worst Software Bugs]] by Simson Garfinkel 2005

3. [[http://www.cs.tau.ac.il/~nachumd/horror.html][Software Horror Stories]] collected by Nachum Dershowitz


* On Bugs

1. Bugs or Errors? 
1. Kim Herzig, Sascha Just, and Andreas Zeller, "Its Not a Bug, Its a
   Feature: How Misclassification Impacts Bug Prediction", 
   35th International Conference on Software Engineering (ICSE 2013). Reference.

1. Implicit Specs (No matter what the input is ...)
   1. No Crashes: Illegal ops, such as div by 0, out of range array index, ...
   1. No Crashes: pointer values outside the address space
   1. No Hangs: Infinite Loop/Recursion
   1. No Hangs: Waiting for an Event That Won't Happen

1. Classification?
   1. uininitialized vars; v := 0, p := nil
   1. off by 1
   1. array bounds exceeded
   1. ptr == nil
   1. memory leaks (not freed malloc-d areas)
   1. Knuth on TeX gives fifteen classes of errors
   1. See Errors in Linux

1. How Many Bugs per KLOC? Anecdotal data: 0.1 to 50 bugs per KLOC

1. What is the largest program you can write that has no bugs with
   "normal" effort?

   1. Right after the first compilation?

   1. After one month, one year, ...?

1. Why do programs have errors? 

1. Definition: A bug is a deviation from functional spec.

1. What does a "debugger" do?
   1. A compiler /compiles/ your source code.
   1. An assembler ...
   1. A linker ...
   1. A word processor ...
   1. A "debugger" (lets us ...) examines process state

* Knuth's TeX Errors

1. Donald E. Knuth, "The Errors of TeX". Software: Practice and
   Experience, vol 19, no. 7, pp. 607 - 685.  Find it on Wiley on-line
   archives via WSU Library proxy.  Also,
   http://tug.ctan.org/systems/knuth/dist/errata/, Knuth on TeX errors
   Highly Recommended Reading.

* Bugs (Errors) in Linux Kernel

1. Dawson Engler, Stanford U and his students,  Errors in Linux

   1. Linux kernel, 2004, 5.7 MLOC, about 1000 bugs from http://lwn.net/Articles/115530/ 
      1. Crash causing defects 569
      1. Incorrect program behavior ??
      1. Performance degradation 33
      2. Improper use of APIs ??
      3. Security flaws 100
      4. Buffer overflows 25
   1. "Linux Kernel Developer Responses to Static Analysis Bug Reports" http://static.usenix.org/events/usenix09/tech/full_papers/guo/guo.pdf, 2009. Recommended Reading.
   1. http://www.stanford.edu/~engler/engler-vmcai04-extended.pdf 2004 Reference
   1. http://www.coverity.com/library/pdf/linux_report.pdf 2004. *Required Reading.*

1. Cindy Rubio-Gonzalez, Ben Liblit, Defective Error/Pointer
   Interactions in the Linux Kernel
   http://pages.cs.wisc.edu/~liblit/issta-2011/issta-2011.pdf 2011. Reference

* Practical Debugging

1. [[./findbugs-etc.pptx]] FindBugs, etc. Eclipse and IDEA Plugins.  These
   are pmateti's slides, TBD to be merged into these notes.

1. Prevention of bugs

1. Discovery of bugs
   1. Watch Points
   1. Break Points

1. Norman Matloff and Peter Jay Salzman, "Art of Debugging with GDB,
   DDD, and Eclipse," No Starch Press, September 2008, 280 pp.  ISBN:
   978-1-59327-174-9.   Recommended.
   1. DDD is a GUI front end for GDB

1. http://findbugs.sourceforge.net/ David Hovemeyer and William Pugh,
   "Finding Bugs is Easy", ACM SIGPLAN Notices, Volume 39 Issue 12,
   December 2004, pp 92 - 106, search for its PDF, *Required Reading*

1. http://checkstyle.sourceforge.net/ Checkstyle verifies that your
   Java code adheres to a coding standard.

1. http://pmd.sourceforge.net/ PMD finds unused variables, empty catch
   blocks, unnecessary object creation, and so forth.  Plugin for
   Eclipse and IDEA

* References

1. Andreas Zeller, "Why Programs Fail: A Guide to Systematic Debugging",
   Morgan Kaufmann, 424pp, 2009, ISBN: 978-0-12-374515-6.  Reference.

1. https://www.udacity.com/ Online Course on Debugging by Andreas
   Zeller.  Free.  Recommended.

1. Brittany Johnson, Yoonki Song, Emerson Murphy-Hill, and Robert
   Bowdidge "Why Don't Software Developers Use Static Analysis Tools
   to Find Bugs? ", http://2013.icse-conferences.org/ 35th
   International Conference on Software Engineering (ICSE 2013). Reference.

