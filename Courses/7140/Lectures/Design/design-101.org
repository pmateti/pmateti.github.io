# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+TITLE: Software Design 101
#+AUTHOR: Prabhaker Mateti
#+DATE: 2016-06-01

#+DESCRIPTION: Software Engineering Lecture
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | <a href=\"./design-101-slides.html\">Slides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2016 &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+HTML_LINK_UP: ./index.html
#+HTML_LINK_HOME: ../../
#+HTML_HEAD: <style> P,li {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STARTUP:showeverything
#+OPTIONS: toc:1

This is a "graduate level 101" of software design.

* Design D satisfies Spec S, S |= D

1. Def: D "satisfies" S, notationally S |= D.  Every property of specs
   S can be observed in D.  Not necessarily vice versa.
1. S is written in a spec language, SL
1. D is written in a design language, DL
1. SL and DL: Plenty in research literature, but not in wide use
1. We will use: Discrete math and Logic.


** Satisfies v Models

1. We used this symobol $\models$ before and called it "models".
1. We can read the above as: S models D.
1. Models suggests abstraction.
1. Satisfies suggests adding concrete details.

* Correct By Design

1. Correct By Design; i.e., "Correct By Intention/Effort"
1. How do we judge if a design is "correct"?
   1. in the absence of specs?
   1. a judge/jury system?
1. A design D satifies/meets a spec S
   1. This can be precisely stated
1. A spec S is consistent with a requirements document R
   1. This will remain in the judge/jury system.

* Design Hierarchy

1. Design D satisfies Spec S, S |= D
2. D2 /refines/ D1 versus D2 is an /alternate/ design cf. D1
   1. refines:  provides more detail.
   2. refines:  gets closer to the implementation language.
   3. alternate: explores a different design idea.
   4. alternate: better in some spec axes, worse in others.
3. Design Levels  
   1. In general, this is a tree with many leaves.
   2. Siblings are alternates.
   3. One path from the root to an implementation: S |= D1 |= D2 |
      ... |= Dn |= I
4. Implementation, I: source code in a PL
5. Can/Should we have levels in Specs?  Yes;  S |= S1 |= S2 ... |= Sk

* Domain Specific Languages

1. http://martinfowler.com/books/dsl.html "DSLs are small languages,
   focused on a particular aspect of a software system. You can't
   build a whole program with a DSL, but you often use multiple DSLs
   in a system mainly written in a general purpose language."

* Documenting a Design

1. [[./design-doc.org]]

* Reference

1. http://en.wikipedia.org/wiki/Design_rationale.  Required Reading.
1. http://www.literateprogramming.com/ "Design Documentation"
   Recommended Visits.

1. http://www.literateprogramming.com/knuthweb.pdf Computer Journal,
   198x. Required Reading

# Local variables:
# after-save-hook: org-html-export-to-html
# end:
