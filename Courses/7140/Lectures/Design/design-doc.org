# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+STARTUP:showeverything
#+Date: 2015-06-10
#+TITLE:Design Documentation
#+AUTHOR: Prabhaker Mateti

#+DESCRIPTION: Software Engineering Lecture
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\">../../</a> %d"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))

#+STARTUP:showeverything
#+OPTIONS: toc:t

* Description of a Design

1. Recall that: A spec is a relationship between IO, expressed using
   discrete math, logic, and grammars.  We prefer it to be
   declarative.  But, occasionally we do use an older version of a
   program to be a spec for a new version to be built, with additional
   spec details added.

1. A design is a how-to expressed in a high-level notation, far higher
   than typical programming languages such as C++ and Java.

** Req v Spec v Design Docs

1. A Spec Doc overlaps with Req Doc
1. Spec Doc should cite the Req Doc
   1. But Spec Doc should be self-contained.
   1. Motivational paragraphs are relevent in Req Docs.
   1. Not in Spec Docs.
   1. Remember the cliche: The "what" is the spec, the "how" is the design.
1. Design Doc should cite the Req and Spec Docs

** Current Practice

1. Prose descriptions in English
1. Figures: UML, data flow, block diagrams
1. All global data structures/ classes
1. Collections of methods and their code

* VHLL: Very High Level Languages   

 1. Consider a design to be a VHLL program, i.e., executable.
 1. Psuedo Code http://en.wikipedia.org/wiki/Pseudocode
 1. All programs, in particular "First Time" Programs, should be
    prototyped in VHLL.
 1. Python and other languages at that "level" are acceptable, but
    make up an appropriate VHLL, at a higher level.

** VHLL components

1. High-Level Data Structures: Sets, Sequences, Tables, Maps, ...
1. High-Level Operations: Matrix ops, Bag Intersect, ...
1. High-Level Control Structures: Map/Reduce, Higher Order Funcs,
   Concurrency, ...
1. Ex: Book "Domain Specific Languages", by Martin Fowler, 2010.  See below

* Design rationale

"A design rationale is the explicit listing of decisions made during a
design process, and the reasons why those decisions were made. Its
primary goal is to support designers by providing a means to record
and communicate the argumentation and reasoning behind the design
process.  It should therefore include:

+ the reasons behind a design decision,
+ the justification for it,
+ the other alternatives considered,
+ the trade offs evaluated, and
+ the argumentation that led to the decision."
+ [from Wikipedia]

* Document Format

1. By now you have read a number of peer-reviewed academic
   papers. Follow their style; e.g., follow JML fmdoc.pdf. Technical
   Reports are more generous with page layouts, and such.
1. Cover Page
1. Abstract
1. All pages, except cover page, are numbered Table of Contents (TOC)
   Sections: Sections must be numbered also; Typical: Three levels;
   too many: > 5 First Section == "Introduction" 1. Last Section ==
   "Conclusion" Unnumbered "References" Section; Cite them. See
   Chicago Manual of Style. 7 Misc


* References

1. http://en.wikipedia.org/wiki/Design_rationale.  Required Reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
