# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+DATE: 2020-09-17
#+TITLE: Overview of Design
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: Software Engineering Lecture
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\">../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2017 &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil

* Overview

1. Remember this cliche /What : How :: Spec : Design/
3. Designing (verb): Discovering a "how" procedure for the "what does
   it do" given in the spec.
1. A spec is an IO relation.  More [[../Specs]]

2. Waterfall implies that, when working on a spec, we do not yet have
   a design or implementation.
3. For complex products, we have hierarchies of abstractions, designs,
   and design spaces.
4. The section headings below are clickable links.


* [[./famous-spec-design.org][Examples of Spec/ Design]]

1. Several example specs and design are shown.
1. Ex: [[../Examples/Knuth-CWP/][Knuth's Common Words]] Problem: Requ, Specs, Design and
   Impl. Published. [There will be lectures on this.]
1. Ex: Req, Spec, Design and Proof of a [[../Examples/Pretty-Printer/][Pretty Printer for PLs]]
   Published.  [There will be lectures on this.]

* [[./correct-by-design.org][Correct by Design]]

1. Correct By Design; i.e., "Correct By Intention/Effort"
1. How do we judge if a design is "correct"?
1. Precise def of "A design D satifies/meets a spec S"
1. A spec S is consistent with a requirements document R.  How do we
   check this? Judge/jury system.

* [[../OODesign/design-by-contract.org][Design By Contract (DbC)]]


* [[./design-doc.org][Design Documentation]]

1. Recall that: A spec is a relationship between IO, expressed using discrete math, logic, and grammars. We prefer it to be declarative. But, occasionally we do use an older version of a program to be a spec for a new version to be built, with additional spec details added.
1. A design is a how-to expressed in a high-level notation, far higher than typical programming languages such as C++ and Java.

** [[./vhll.org][Very High Level Languages for Spec/Design]] VHLL

** Design Rationale and Knowledge

1. "A design rationale is the explicit listing of decisions made
   during a design process, and the reasons why those decisions were
   made."

1. Design knowledge is the collection of techniques and past designs.
   Usually narrowed down by the topic.  E.g., design knowledge of
   compilers, clients-servers.

** Structure of the Document

** Req Doc vs Spec Doc vs Design Doc vs Impl Doc

1. See our [Projects] page.

** Literate Programming [[./literate.org]]


* [[../OODesign/ood-principles.org][Object Oriented Design]]

The above sections did not assume OOP/OOD.  This does.

** [[../OODesign/liskov-subst-principle.org][The Liskov Substitution Principle]]

1. Liskov Substitution Principle (LSP) is the L in SOLID Principles of
   OOD. It clarifies the meaning of inheritance beyond mere
   syntax. The principle applies to best practices in all OOP
   languages; certainly to: C++, Java, Scala, and Python. The
   clarification is crystal clear in the presence of pre- post
   conditions and class invariant.

** [[../OODesign/ood-principles.html#sec-2][SOLID Principles]]

1. Principles of Class Design (aka SOLID)
1. (SRP) The Single Responsibility Principle
1. (OCP) The Open Closed Principle: Classes and methods should be open
   for extension (of functionality) and closed for modification.
1. (LSP) The Liskov Substitution Principle: Subtypes must be
   substitutable for super type.  A sub class must enhance
   functionality, but not reduce.
1. (ISP) The Interface Segregation Principle
1. (DIP) The Dependency Inversion Principle. [In our course, I prefer
   the DbC.]

** [[../OODesign/designPatterns.org][OODesign Patterns]]

1. A design pattern is a solution template for problems of a certain pattern.
1. A pattern codifies expert knowledge. 

** [[../OODesign/design-smells.org][Design Smells]]

1. "Design smells indicate violation of fundamental design principles
   and negatively impact design quality"
1. Code smells has extensive literature.  Design smells not so much.

** [[../Maintenance/refactoring.org][Refactoring]]

1. Refactoring is the modification of software source code to improve
   software qualities while preserving functionality.
1. Enhancement is not refactoring.
1. Refactoring is part of [[./index.org][maintenance]]

** [[../OODesign/antipatterns.org][AntiPatterns]]

1. "An anti-pattern is a common response to a recurring problem that is usually ineffective and risks being highly counterproductive."

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:

