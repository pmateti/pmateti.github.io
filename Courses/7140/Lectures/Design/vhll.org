# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+STARTUP:showeverything
#+TITLE: Very High Level Languages for Spec/Design
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:2
#+DESCRIPTION: CS7140 Software Engineering Lecture
#+HTML_LINK_HOME: ../
#+HTML_LINK_UP: ./index.html
#+HTML_HEAD: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STARTUP:showeverything
#+BIND: org-html-preamble-format (("en" "<a href=\"../../Top/\">CS 7140</a> %d"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))


* Design
 1. VHLL === Very High Level Languages  
 1. Consider a design to be a VHLL program, i.e., executable
 1. Make up an appropriate VHLL, if nec
 1. http://en.wikipedia.org/wiki/Pseudocode This is a
    decent intro to psuedocode.  In this course, we aim for much
    higher degree of precision and rigor.
 1. "First Time" Programs (prototypes) should be done in VHLL

* Description of a Design Should Include

1. Prose descriptions in English
1. Figures: UML, data flow, block diagram
1. All global data structures/ classes
1. Collections of methods and their VHLL code

* VHLL: Very High Level Languages  

1. High-Level Data Structures: Sets, Sequences, Tables, Maps, ...
1. High-Level Operations: Matrix ops, Bag Intersect, ...
1. High-Level Control Structures: Map/Reduce, Higher Order Funcs, Concurrency, ...
1. Ex: Distributed Data-Parallel Computing Using a High-Level
   Programming Language, SIGMOD, 2009
1. Ex: "hiCUDA: A High-level Directive-based Language for GPU"
   Programming Parallel and Distributed Systems conf, 2011

* Domain Specific Languages

1. There are many tutorials, papers and books on DSLs.

1. Ex: Book "Domain Specific Languages", by Martin
   Fowler, 2010. http://martinfowler.com/books/dsl.html "DSLs are
   small languages, focused on a particular aspect of a software
   system. You can't build a whole program with a DSL, but you often
   use multiple DSLs in a system mainly written in a general purpose
   language."

* Literate Programming

** Idea

1. Primary task of the programmer: Explain the design and
   implementation of a program to fellow humans.

1. Secondary task: Produce a ready-to-build collection of source code
   files.  

1. An LP author presents it in an order that suits the explanation of
   the program to fellow software engineers, not necessarily in the
   order that a compiler may expect it.

1. Original idea by Professor Emeritus Donald Knuth, Stanford U,
   "fastest pen in the West", Turing Award Winner 1974, and the
   developer of the [[http://en.wikipedia.org/wiki/TeX][TeX]] typesetting system.

   1. Donald E. Knuth, "Literate Programming", The Computer Journal,
      1984, 27(2): 97-111.

   1. =weave= Generate the .tex file(s) from .web file(s)

   1. =tangle= Generate the source code file(s) from .web file(s)

1. http://www.literateprogramming.com/ "Design Documentation"
   Recommended Reading

1. http://www.literateprogramming.com/knuthweb.pdf Required Reading

** Examples

1. The typesetting program TeX is designed as a literate program by Knuth.
1. cweb by Knuth http://www-cs-faculty.stanford.edu/~uno/cweb.html 
1. http://www.tug.org/TUGboat/tb23-3-4/tb75saha.pdf Rambutan: Literate
   Programming in Java, TUGboat, Volume 23 (2002), No. 3/4
1. Knuth has several example programs at
   http://www-cs-faculty.stanford.edu/~knuth/programs.html to read.
   His "Programming Pearls, Literate Programming: The Common Words
   Problem", 1986, was a Required Reading weeks ago.

** LP Tools

1. cweb by Knuth http://www-cs-faculty.stanford.edu/~uno/cweb.html 
1. noweb by Ramsey http://www.cs.tufts.edu/~nr/noweb/  supports multiple PL
1. http://wiki.eclipse.org/Intent The Mylyn Intent prime objective is
  to make developers consider documentation as something useful and
  easy to maintain, that they can use to formalize their best
  practices and share their knowledge. Based on a new vision of the
  documentation, in which explanations in natural langage are formally
  linked with technical artefacts (java code, models, manifest files,
  bugzilla issues, git repositories, etc.), Intent allows you to
  efficiently update documentation when a change occurs in your
  software, turning it into a true Agile documentation.
1. http://lep.sourceforge.net/tutorials.htm Literate Eclipse
  Programming assists developers in writing structured, well
  documented source code. LEP integrates automated extraction of
  source code and documentation into a familiar eclipse
  environment. Compiling and debugging are fully supported.

1. More LP tools: [[http://www.cs.tufts.edu/~nr/noweb/][noweb]], [[http://nuweb.sourceforge.net/][nuweb]], [[https://code.google.com/p/nano-lp/][nano-lp]], ...; some of these are ready
   to =apt-get install= packages in Debian/Ubuntu distros.  Visit
   http://www.literateprogramming.com/ for further details.

* References

1. Embedded in the above.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
