# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+STARTUP:showeverything
#+TITLE: Refactoring
#+AUTHOR: Prabhaker Mateti
#+DATE: 2016-06-01
#+HTML_LINK_HOME: ../Top/index.html
#+HTML_LINK_UP: ./index.html
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | Slides"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2016 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:1

Refactoring is the modification of software source code to improve
software qualities.  ... while preserving functionality.  Enhancement
is not refactoring.  Refactoring is part of [[./index.org][maintenance]]

* Code Refactoring

   1. [[../Overview/software-qualities.org][Software Quality]]
   1. Remove "bad smells"
   1. Functional equivalence: before v after
   1. Performance?
   1. Other quality issues

1. Refactoring is exclusive of bug fixes.

1. http://tedfelix.com/software/refactoring.html is a list extracted
   from Martin Fowlers writings.

1. http://autorefactor.org/  Site looks old-fashined, but content is
   good.  Collection of [[http://autorefactor.org/html/samples.html][Examples]] auto- refactored.


* Bad Code Smells

1. Falling short of some goals.
1. Comments poorly done
1. Nesting depth too deep
1. Duplicated code
1. Long method
1. Large class. "God object"?

** Bad Code Smells #2

1. Refused Bequest, contract of the base class 
1. Feature Envy: A class that uses methods of another class excessively.
1. Inappropriate Intimacy: dependencies on implementation details of another.
1. Data Clumps: "... consider deleting one of the data values: if you
   did this, the others do not make sense, ..."
1. Too many parameters, Lazy class / Freeloader, Excessively long
   identifiers, Excessively short identifiers, Excessive use of literals

** Bad Code Smells #3

1. Divergent Change "occurs when one class is commonly changed in
   different ways for different reasons."

1. Primitive Obsession: "People new to objects usually are reluctant to
   use small objects for small tasks, ..."

1. Shotgun Surgery: "You whiff this when every time you make a kind of
   change, you have to make a lot of little changes to a lot of
   different classes."

** Holzmann's "Ten Rules" to Have Good Smells

1.  Restrict to simple control flow constructs.
1.  Give all loops a fixed upper-bound.
1.  Do not use dynamic memory allocation after initialization.
1.  Limit functions to no more than 60 lines of text.
1.  Use minimally two assertions per function on average.
1.  Declare data objects at the smallest possible level of scope.
1.  Check the return value of non-void functions, and check the
    validity of function parameters.
1.  Limit the use of the preprocessor to file inclusion and simple
    macros.
1.  Limit the use of pointers. Use no more than two levels of
    dereferencing per expression.
1.  Compile with all warnings enabled, and use one or more source code
    analyzers.

* OO Design Patterns

1. [[../OODesignPatterns]]

* Big Refactorings

1. Tease Apart Inheritance tries to tame a messy inheritance hierarchy.

1. Convert Procedural Design to Objects

1. Separate Domain from Presentation moves domain logic out of
   the UI classes.

1. Extract Hierarchy introduces polymorphism to replace complex
   conditional code.

1. Rearchitect: Client/ Server
1. Rearchitect: Engine + GUI

* Anti-Patterns

1. [[./antipatterns.org][Anti-Patterns]]


* References

1. Sir Charles Anthony Richard Hoare on Software Quality,
   http://onlinelibrary.wiley.com/doi/10.1002/spe.4380020202/epdf,
   Software -- Practice and Experience, 103-105, 1972.  Turing Award
   Winner.  Required Reading.

1. http://en.wikipedia.org/wiki/Refactoring Required
   Visit/Reading the individual refactoring techniques also.

1. Kent Beck and Martin Fowler, http://martinfowler.com/ and
   http://refactoring.com/catalog/ A catalog of several patterns.
   Describes many of the smells discussed.  https://sourcemaking.com/
   also has most of the materials presented well.  [Martin Fowler
   claims that much of their content is his.]; Martin Fowler,
   Refactoring: Improving the Design of Existing Code, book,
   Addison-Wesley, 2000.  [Well .., not design improvement, but code
   improvement.]  http://tedfelix.com/software/refactoring.html is a
   list extracted from Martin Fowlers writings.  All sites: Required
   Visits.

1. Gerard J. Holzmann, The Power of Ten -- Rules for Developing Safety
   Critical Code,'' IEEE Computer, June 2006, pp. 93-95.
   http://spinroot.com/gerard/pdf/P10.pdf Required Reading.

1. Mantyla, M. V. and Lassenius, C, "Subjective Evaluation of Software
   Evolvability Using Code Smells: An Empirical Study", Journal of
   Empirical Software Engineering, vol. 11, no. 3, 2006, pp. 395-431.
   http://www.soberit.hut.fi/~mmantyla/ESE_2006.pdf Skim Reading.

1. [[https://docs.google.com/file/d/0B591C2qBD4o9Y0hCbmF6cjRDems][Refactoring]] PDF Slides by Prof Kim [[./refactoring-ut-austin-2013.pdf]]
   Required Reading.


# Local variables:
# after-save-hook: org-html-export-to-html
# end:
