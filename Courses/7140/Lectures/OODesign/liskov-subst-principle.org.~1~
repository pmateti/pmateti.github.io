# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-

#+TITLE: Liskov Substitution Principle (LSP)
#+AUTHOR: Prabhaker Mateti
#+date: 2017-04-05

#+DESCRIPTION: Mateti: OO Programming and Design 
#+HTML_LINK_HOME: ../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\"> ../../</a>")) 
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:1

* Abstract

Liskov Substitution Principle (LSP) is the L in [[./ood-principles.org][SOLID Principles of
OOD]].  It clarifies the meaning of inheritance beyond mere syntax.  The
principle applies to best practices in all OOP languages; certainly
to: C++, Java, Scala, and Python.  The clarification is crystal clear
in the presence of pre- post conditions and class invariant.

[TBD Note to myslef: double check use of S (now D) versus T (now B)]

#+caption: A Relevant Example for The Liskov Substitution Principle
[[./Figures/LSP-shape-example.png]]

* Semantics of Inheritance

1. If D is a derived type of B, Notation: D <: B, what are the
   *must-have* relationships between their methods?

1. Regardless of whether our compilers *can* check these constraints.

** Scenario #1

1. A client class C1 is using D.  Suppose we replace all occurrences
   of objects of D with those of B.  No other changes are made in C1.

1. What behavioral changes can we observe in C1?

** Scenario #2

1. (Reverse the roles of D and B.)

1. A client class C2 is using B.  Suppose we replace all occurrences
   of objects of B with those of D.  No other changes are made in C2.

1. What behavioral changes can we observe in C2?

** Observations

1. You should construct some examples, run, and observe.
1. Think about squares and rectangles.
1. Think about circles and ellipses.


** Statements of Expectations

1. "Derived types must be substitutable for base types."  All OOP
   languages permit this.  Even when d.m(x, y, z) has radically
   different behavior from b.m(x, y, z).

1. "... derived class objects must be substitutable for the base class
   objects. That means objects of the derived class must behave in a
   manner consistent with the promises made in the base class'
   contract." [from C++ FAQ]

1. "Functions that use pointers or references to base classes must
   be able to use objects of derived classes without knowing it."

** Define "Behavior"

1. "People are very confused below about what "behavior" means." -- http://wiki.c2.com/?LiskovSubstitutionPrinciple
1. Observable state: 
   1. before entering the method (state as described by pre-condition),
   1. versus leaving the method (post condition)
1. Public methods only
1. Recall that pre- and post-conditions include the class invariant.

** Origin of Expectations

1. The expectations stated above are "best practices" to support
   software development life cycle, especially maintenance.

1. Violating these expectations is bound to cause functional damage to
   the software.

1. E.g., unit tests for the base class would never succeed for the
   subclass.


* Proper Inheritance

1. Background: [[../Assertions]]

1. Consider a public method m(x, y, z) of B and D.

1. Preconditions must not be strengthened in a subtype.
   1. It should be the case that B.m.pre => D.m.pre

1. Postconditions must not be weakened in a subtype.
   1. It should be the case that D.m.post => B.m.post

1. Class Invariant B.cinv of the supertype B must be preserved in a
   subtype D.
   1.  It should be the case that D.cinv => B.cinv

** More

1. OOD Open-Close Principle: Open for extension but Closed for modifications.
1. If the above rules are not being held, re-design your inheritance details.

* Dilemmas?

1. Interface substitutability versus Behavior Equivalence

** Circle a subtype of Ellipse?

1. Let Ellipse1 have three public observer functions: major, minor,
   area.  Circle1 has the same operations, but minor and major always
   return the radius.

1. Let Ellipse2 have two more public setter functions, major(x),
   minor(x).  Circle2 has only major(x).

** Ellipse a subtype of Circle?

1. Reverse of the above.


** Colored Circle

1. =Circle c; ColoredCircle cc; c :== =cc;=  Problem?

** Specialization and Constratints

1. We expect a subtype to be a specialization of a base type.  The
   subtype also obeys some extra constraints that the base did not
   have.

1. This works generally -- but not always.

** Answers

1. Read the answers in Alistair Cockburn (in refs).

* Liskov's Originals

1. "If for each object s of type S there is an object t of type T such
   that for all programs P defined in terms of T, the behavior of P is
   unchanged when s is substituted for t then S is a subtype of T."
   [from Barbara Liskov, Data Abstraction and Hierarchy, SIGPLAN
   Notices, 23, 5, May 1988.  Liskov won the [[http://amturing.acm.org/award_winners/liskov_1108679.cfm][Turing Award in 2008]].]

1. pmateti: The "behavior of P is unchanged" is too strong.  Here is a
   restatement in a later paper:

1. Let /q(t)/ be a property (provable) about objects t of type T.
   Then /q(s)/ should (provably) hold for objects s of type S where S
   is a subtype of T.
1. pmateti: Provability is not the issue.

1. pmateti: In the context of our OOPL, treat "type" as a synonym for
   "class".

* References

1. Liskov, Barbara H., and Jeannette M. Wing. "A behavioral notion of
   subtyping." ACM Transactions on Programming Languages and Systems
   (TOPLAS) 16.6 (1994): 1811-1841.
   http://www.cse.ohio-state.edu/~neelam/courses/788/lwb.pdf.  Liskov
   won the [[http://amturing.acm.org/award_winners/liskov_1108679.cfm][Turing Award in 2008]].  Highly recommended Reading for
   CEG4180. Required Reading for CEG 7140.

1. http://www.oodesign.com  Recommended Visit.

1. http://www.parashift.com/c++-faq/   Recommended Visit.

1. Alistair Cockburn,
   http://alistair.cockburn.us/Constructive+deconstruction+of+subtyping
   A rigorous math logic based discussion of what subtypes are. 1999. 
   Highly Recommended Reading.

1. http://www.labri.fr/perso/clement/enseignements/ao/LSP.pdf pp 11.
   Do not get confused: LSP is not the same thing as Meyer's
   Design-by-Contract.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
