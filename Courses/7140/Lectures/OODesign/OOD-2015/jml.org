#+TITLE: JML Overview
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:t
#+LINK_HOME: ../../
#+LINK_UP: ../../Lectures
#+DESCRIPTION: CS7140 Software Engineering Lecture

* Design by Contract View point
1. Class invariant
1. Pre- Post-conditions for public methods
1. Assigning blame across interfaces
1. Details of method responsibilities
1. Avoiding constantly checking arguments
1. The caller guarantees precondition holds
1. The caller is guaranteed  postcondition
1. The called assumes precondition hold
1. The called is guaranteed postcondition

** Information Hiding by Contracts
1. A contract can be satisfied in many ways
  1. a method can have many implementation satisfying the contract;
  1. Different performances (time, space, etc);
1. A contract hides the implementation details
  1. We can change implementations.
  1. Caller's code Will work for any implementation that satisfies the
   contract

* Java Modeling Language (JML) Overview
1. JML is a "behavioral" (functional) interface specification language
1. Annotation language captures programmer design decisions
1. JML is contained in /annotations/
  1. =//@ JML annotation=
  1. =/*@ JML annotation @*/=
  1. =javac= will ignore these
1. JML annotation is a Java boolean expression ...
  1. without any side effects
  1. extended with =\old=, =\result=
  1. extended with =\forall=, =\exists=
  1. JML keywords: =requires, ensures, invariant=
  1. JML keywords: =pure, nonnull, assignable, signals=
1. JML annotation includes =model= fields

** No Side Effects
1. No use of ~=, ++, --~, ...
1. Can only call pure methods.

** Java extended syntax
1. a ==> b stands for a implies b
1. a <==> b stands for a iff b
1. a <=!=> b stands for  !(a <==> b)
1. ~\old(E)~ stands for the value of E in pre-state
1. ~\result~ stands for the result of method

** Quantifiers
1. Universal \forall JML =\forall= and existential \exists JML =\exists=
1. General quantifiers (=\sum, \product, \min, \max=)
1. Numeric quantifier (=\num_of=)
1. Ex: ~(\forall Student s; juniors.contains(s); s.getAdvisor() != null)~

** Java example source code files with JML annotations

1. [[./jml-one-page-ex-1.pdf]]
1. [[./jml-one-page-ex-2.pdf]]


** Non-Null
1. To state that some references must not be =null= ...
1. =private /*@ non null @*/ File[] files;=
1. =void createSubdir(/*@ non null @*/ String name) { ... }=

** assert
1. =//@ assert i > 0 && 0 < j && j < 5;=
1. ~//@ assert (\forall int i; 0 <= i && i < n; a[i] != null);~
1. keyword assert also in Java (since Java 1.4)
1. assert in JML is more powerful

*** Java assert
1. =assert Expression1 ;= where Expression1 is a boolean
   expression. When the system runs the assertion, it evaluates
   Expression1 and if it is false throws an AssertionError with no
   detail message.
1. =assert Expression1 : Expression2 ;= where Expression1 is a boolean
   expression.  Expression2 is an expression that has a value. The
   AssertionError constructor uses the string value of Expression2 to
   generate a detailed message.

** assignable
1. Frame properties limit possible side-effects of methods.
1. ~//@ requires amount >= 0;~
1. ~//@ assignable balance;~
1. ~//@ ensures balance == \old(balance) - amount;~
1. ~public int debit(int amount) { ... }~
1. =debit= can only assign to the ﬁeld balance.\\
   NB this does not follow from the post-condition.
1. ~//@ assignable \everything~
1. ~//@ assignable \nothing~

** pure
1. A method without side-effects is said to be =pure=
1. ~public /*@ pure @*/ int getBalance() { ... }~
1. Pure methods have implicitly ~assignable \nothing~
1. Pure methods, and only pure methods, can be used in
   speciﬁcations:
1. ~//@ invariant 0 <= getBalance() && getBalance() <= MAX_BALANCE~


* Model Variables
1. variables to be used only in specifications
1. Given value only by =represents= clauses


* Tools for JML
1. JML compiler (jmlc/jmlrac):
  1. perform JML checks at runtime;
  1. low overhead;
1. Extended static checker (ESC/Java2):
  1. prove JML assertions at compile time;
  1. more effort by the developer
  1. so far only possible for small programs or small subsystems;

** ESC/Java2
1. Improve the current software engineering process
1. Input: a Java program annotated with JML assertions
1. Powered by program semantics and automatic theorem proving
1. Automatically check if the assertions are always true;
1. Statically without any user interaction
1. Reason about non-trivial properties (not just type-correctness)
1. Its warnings are intended to be interpreted by the author of the
   program;
1. It does not find all the errors, but reduce the process cost
   finding some of them early;

** JACK: Java Applet Correctness Kit
1. http://www-sop.inria.fr/everest/soft/Jack/jack.html

* JML Readings
1. Gary T. Leavens and Yoonsik Cheon, "Design by Contract with JML",
   http://www.jmlspecs.org/jmldbc.pdf, 2006. Compare with Meyers
   paper. Recommended Reading
1. Patrice Chalin, et al., "Beyond Assertions",
   http://www.eecs.ucf.edu/~leavens/JML/fmco.pdf (Overview of JML
   tools) 2004. Required Reading.
