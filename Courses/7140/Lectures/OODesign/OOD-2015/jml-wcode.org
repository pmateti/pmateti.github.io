# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+STARTUP:showeverything
#+TITLE: Design by Contract with JML
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:nil
#+LINK_HOME: ../../
#+LINK_UP: ../../Lectures
#+DESCRIPTION: CS7140 Software Engineering Lecture
#+STYLE: <style> @media screen {BODY {margin: 10%} }</style>
#+BIND: org-export-html-preamble-format (("en" "<a href=\"http://cecs.wright.edu/~pmateti/Courses/7140/\">CS 7140 Advanced Software Engineering</a>"))
#+BIND: org-export-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2013 %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+OPTIONS: toc:t

* Design by Contract, refresher
1. Class invariant
1. Pre- Post-conditions for public methods
1. View point:
     1. Assigning blame across interfaces
     1. Details of method responsibilities
     1. Avoiding constantly checking arguments

1. A contract can be satisfied in many ways
  1. a method can have many implementation satisfying the contract
  1. Different performances (time, space, etc)

1. A contract hides the implementation details
  1. We can change implementations.
  1. Caller's code Will work for any implementation that satisfies the
   contract

1. Caller code 
  1. will work for every implementation that satisfies the contract
  1. Can thus only use the contract (not the code)
  1. Must establish precondition. The caller guarantees precondition holds
  1. Can assume the postcondition. The caller is guaranteed  postcondition

1. Called code
   1. Must satisfy contract
   1. Can assume precondition
   1. Must establish postcondition -- but can do anything permitted by it.


** Class Invariant

1. Class invariant is an extended Boolean exp that is always true of
   an object’s state (when control is not inside the object’s
   methods).

Invariants document design decisions.  Making them explicit helps in
understanding the code. E.g.,

#+BEGIN_SRC java
public class Directory f;
private File[] files;
/*@ invariant
      files != null
      &&
      (forall int i; 0 <= i && i < files.length;
        files[i] != null && files[i].getParent() == this)
      ;
@*/
#+END_SRC

Note the =forall= syntax.  Universal \forall JML =\forall= and
existential \exists JML =\exists=

** Loop Invariant

#+BEGIN_SRC java
//@ loop invariant 0 <= i && i<= n;
//@ decreasing n-i;
for(int i = 0; i < 0; i++) {
  ...
}
#+END_SRC

We are asserting that the value of expression =n - i= will be
decreasing from one iteration to the next.


* Java Modeling Language (JML) Overview
1. JML is a "behavioral" (functional) interface specification language
1. JML is contained in /annotations/
  1. =//@ JML annotation=
  1. =/*@ JML annotation @*/=
  1. =javac= will ignore these
  1. =jmlc= processes these. Using jmlc is similar to using javac.
1. JML annotation is a Java boolean expression ...
  1. without any side effects
  1. extended with =\old=, =\result=
  1. extended with =\forall=, =\exists=
  1. JML keywords: =requires, ensures, invariant=
  1. JML keywords: =pure, nonnull, assignable, signals=
1. JML annotation includes =model= fields

** No Side Effects
1. No use of assignment =\== , =++, --=, ...
1. Can only call pure methods.

** Java extended syntax
1. a ==> b stands for a implies b
1. a <==> b stands for a iff b
1. a <=!=> b stands for  !(a <==> b)
1. ~\old(E)~ stands for the value of E in pre-state
1. ~\result~ stands for the result of method

** Quantifiers
1. Universal \forall JML =\forall= and existential \exists JML =\exists=
1. General quantifiers (=\sum, \product, \min, \max=)
1. Numeric quantifier (=\num_of=)
1. Ex: ~(\forall Student s; juniors.contains(s); s.getAdvisor() != null)~

** Java example source code files with JML annotations

1. [[./jml-one-page-ex-1.pdf]]
1. [[./jml-one-page-ex-2.pdf]]


** Non-Null
1. Some references must not be =null=.
1. =private /*@ non null @*/ File[] files;=
1. =void createSubdir(/*@ non null @*/ String name) {=

** assert
1. =//@ assert i > 0 && 0 < j && j < 5;=
1. ~//@ assert (\forall int i; 0 <= i && i < n; a[i] != null);~
1. JML keyword assert also in Java (since Java 1.4).
   assert in JML is more powerful

** assignable
1. Frame properties limit possible side-effects of methods.
1. ~//@ requires amount >= 0;~
1. ~//@ assignable balance;~
1. ~//@ ensures balance == \old(balance) - amount;~
1. ~public int debit(int amount) { ... }~
1. =debit= can only assign to the ﬁeld balance.\\
   NB this does not follow from the post-condition.
1. ~//@ assignable \everything~
1. ~//@ assignable \nothing~

** pure
1. A method without side-effects is said to be =pure=
1. ~public /*@ pure @*/ int getBalance() { ... }~
1. Pure methods have implicitly ~assignable \nothing~
1. Pure methods, and only pure methods, can be used in
   speciﬁcations:
1. ~//@ invariant 0 <= getBalance() && getBalance() <= MAX_BALANCE~

* Model Variables
1. variables to be used only in specifications
1. Given value only by =represents= clauses
1. Data abstraction
1. Code below is Java-like only -- not actual Java

#+BEGIN_SRC java
class Counter {
  model n: int;
  private a: int;
  private b: int;
  representation n is a – b;

  method Increment()
    modifies only n;
    ensures old(n) + 1 == n;
   { a := a + 1 }

  method Decrement()
    modifies only n;
    ensures old(n) == n + 1;
    { b := b + 1 }
}
#+END_SRC

* Tools for JML
1. JMLC/JMLRAC
   1. jmlc -- copiler for JML assertions
   1. jmlrac -- run time JML assertion checker; low-overhead;
   1. http://jmleclipse.projects.cis.ksu.edu/
   1. http://www.pm.inf.ethz.ch/research/universes/tools/eclipse/
   1. http://sourceforge.net/apps/trac/jmlspecs/wiki/JmlEclipse
   1. http://www.cse.chalmers.se/edu/year/2012/course/TDA566/

1. Extended static checker (ESC/Java2): 
    1. http://kindsoftware.com/products/opensource/ESCJava2/
    1. prove JML assertions at compile time;
    1. high cost;
    1. possible only for small programs
    1. Improve the current software engineering process
    1. Input: Java + annotation subset of JML;

1. JACK: Java Applet Correctness Kit
   1. http://www-sop.inria.fr/everest/soft/Jack/jack.html
   1. Please check it out.  Bonus Points!


* JML References
1. Gary T. Leavens and Yoonsik Cheon, "Design by Contract with JML",
   http://www.jmlspecs.org/jmldbc.pdf, 2006. Compare with Meyers
   paper. Required Reading.

1. http://www.eecs.ucf.edu/~leavens/JML/fmco.pdf Overview of JML tools
   2004.Recommended Reading.
