# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+Date: 2015-10-15
#+TITLE: Object Oriented Design Principles: SOLID, ...
#+AUTHOR: Prabhaker Mateti

#+DESCRIPTION: Mateti: OO Programming and Design 
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\"> ../../</a> | <a href=\"liskov-subst-principle-slides.html\"> </a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:1

* Data Encapsulation v Abstraction v OOD

** Encapsulation

1. A "data structure" is declared.
1. Certain operations are declared to be "public".
1. The "data structure" is accessed/manipulated *only* via the above.

** Abstraction

1. A "data type" is declared  
1. Certain operations are available  
1. The "data type" is an abstraction  
1. Concrete representation to Abstraction mapping  
1. E.g., an array of items ==>  set of items  
1. Information Hiding Principle
1. Abstract Data Types v Classes
1. Data Encapsulation v Data Abstraction
1. See [[../Abstraction]]

** Class Invariants

1. Class invariants are assertions.
1. Must be true before and after every public methods.
1. Must be true after every constructor.
1. See [[../Assertions]]

** C++/Java/... Classes
1. Provide data encapsulation
1. Do not do Data Abstraction
1. Language Design
1. public v protected v private
1. interface v class

* SOLID Principles of Class Design

1. (SRP) The Single Responsibility Principle

1. (OCP) The Open Closed Principle: Classes and methods should be open
   for extension (of functionality) and closed for modification.

1. (LSP) The [[./liskov-subst-principle.org][Liskov Substitution Principle]].  Loosely stated: Subtypes
   must be substitutable for super type.  A sub class must enhance
   functionality, but not reduce.

1. (ISP) The Interface Segregation Principle

1. (DIP) The Dependency Inversion Principle

1. Note that some argue that LSP is not an OOD principle.

1. In this course: We replace the above with [[./design-by-contract.org][Design by Contract]] This
   is often confused with LSP.
1. All the above in greater detail at [[./SOLID-principles.html]]

* Principles of Package Cohesion
1. (REP) The Reuse Release Equivalence Principle
1. (CCP) The Common Closure Principle
1. (CRP) The Common Reuse Principle

* Principles of Package Coupling

1. (ADP) The Acyclic Dependencies Principle
1. (SDP) The Stable Dependencies Principle
1. (SAP) The Stable Abstractions Principle

* Design By Contract (DoC)

[[./design-by-contract.org]]

* Liskov Substitution Principle (LSP)

[[./liskov-subst-principle.org]]

* AntiPatterns


1. "An anti-pattern is a common response to a recurring problem that
   is *usually ineffective* and risks being highly counterproductive."

1. [[./antipatterns.html]]


** Examples from non-CS

1. Bicycle shed: Giving disproportionate weight to trivial issues

2. Escalation of commitment: Failing to revoke a decision when it proves wrong

3. Peter Principle: Continually promoting otherwise well-performing
   employees up to their level of incompetence, where they remain
   indefinitely

4. Stovepipe or Silos: An organizational structure of isolated or
   semi-isolated teams, in which too many communications take place up
   and down the hierarchy, rather than directly with other teams
   across the organization

5. Ninety-ninety rule: Tendency to underestimate the amount of time to
   complete a project when it is "nearly done"

** Examples from Software engineering

3. Abstraction inversion: Not exposing implemented functionality
   required by callers of a function/method/constructor, so that the
   calling code awkwardly re-implements the same functionality in
   terms of those calls

4. Big ball of mud: A system with no recognizable structure.

5. Input kludge: Failing to specify and implement the handling of
   possibly invalid input

6. Call super: Requiring subclasses to call a superclass's overridden
   method

7. God object: Concentrating too many functions in a single part of
   the design (class)

8. Sequential coupling: A class that requires its methods to be called
   in a particular order. (?)

9. Poltergeists: Objects whose sole purpose is to pass information to
   another object

10. Boat anchor: Retaining a part of a system that no longer has any
    use

11. Error hiding: Catching an error message before it can be shown to
    the user and either showing nothing or showing a meaningless
    message. Also can refer to erasing the Stack trace during
    exception handling, which can hamper debugging.

12. Lasagna code: Programs whose structure consists of too many layers.

* References

1. Web site, http://www.oodesign.com Includes pretty good descriptions
   of the principles mentioned on this page.  Recommended Visit

1. https://en.wikipedia.org/wiki/Anti-pattern A few selected items are
   given above.  Software Engineering section: Required Reading.

1. https://sourcemaking.com/ has most of the above materials presented well.

1. http://antipatterns.com/ Recommended Visit.

1. Robert Bruce Findler, Mario Latendresse, and Matthias Felleisen.
   Behavioral Contracts and Behavioral Subtyping.  In Proceedings of
   ESEC/FSE-9, 229-236.
   http://www.ccs.neu.edu/scheme/pubs/fse01-flf.pdf 2001 Recommended
   Reading.

1. Bertrand Meyer. Applying "Design by Contract".  IEEE Computer,
   25(10):40â€“51, October 1992.
   http://se.ethz.ch/~meyer/publications/computer/contract.pdf Also in
   his book "Object-Oriented Software Construction".  Bertrand Meyer's
   [[../OOD/meyer-design-by-contract-1992-markedUp.pdf][article marked-up]] by pmateti Required Reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
