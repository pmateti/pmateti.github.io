
mvn archetype:generate -DarchetypeGroupId=com.zenjava -DarchetypeArtifactId=javafx-basic-archetype -DarchetypeVersion=1.1

Good video tutorial series on Maven:
https://www.youtube.com/watch?v=al7bRZzz4oU&list=PL92E89440B7BFD0F6&index=1
 
Another series on Maven:
https://www.youtube.com/watch?v=BBB5UvpObQ4&list=PLmcxdcWPhFqMYSNlpBfxVsCqZ53jcXRvz


//Among the best benefit of using maven is that your project is now portable to any IDE and any developer. No need to pass library jars around in your project. Maven is: dependency managment & build tool & reporting tool. Extremely portable. 



Build lifecycle Phases

validate: validates that the pom file is correctly formatted
compile: compiles your project
test: tests any unit or instrumentation tests
package: creates an artifact, usually a jar or war file. 
install: installs your archetype to the local m2 repository
deploy: deploys your archetype to the remote m2 repository 




//phases are cumulative, so that any command will do all the preceding ones first.  

validate
------------------
compile
test
package
------------------
install
deploy



issue this command:

mvn archetype:generate 

414 is the number for quickstart (as for now) 

if you need to see the list, you and redirect the stream to a file
mvn archetype:generate > archs.txt  
open with wordpad



From netbeans, you can do this from Archetype as well
search for:
maven-archetype-quickstart


groupId: edu.uchicago.gerber
package edu.uchicago.gerber
artifactId: yourProjectAndArtifactId
version: snapshop_1


examine the artifacts
Transient dependency managment
convention over configuration


right-click | goals || site:site


inpect the dependencies as well as the plugins


Modify the App.java file so that main has a call to a swing message box. 

javax.swing.JOptionPane.showMessageDialog (null, "Message", "Title", javax.swing.JOptionPane.INFORMATION_MESSAGE);




modify the main method and set the main class in NetBeans and run it. 

>java -cp mavenprac01-1.0-snapshow.jar edu.uchicago.gerber.whatever.App


Try to execute the jar in target by double clicking it. It doesn't work.



Now modify the pom by overriding this plug and configuring it with the main class. 


   <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
	         <mainClass>edu.uchicago.gerber.myquickstart.App</mainClass>
            </manifest>
          </archive>
        </configuration>
      </plugin>
    </plugins>
  </build>




mvn clean package


Try to execute the jar in target by double clicking it. It works. 


Take a look at the AppTest.java file and modify it so it fails. 

Run it from the command-line and look at the failure. Check the surefire reports. 



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;




        //let's add some code that requires a dedpendency
        Logger logger = LoggerFactory.getLogger(App.class);
        logger.info("Hello from maven class log");




google maven central

paste the fully qualified class in the search box and find the dependency. Add it to your pom file. 


The other option is to:


click the light-bulb and search for dependencies on maven. 





This allows the project to resolve the library, dependencies. dependencies are tranistory, so if a dependency had other dependencies, they would be managed for you automatically by maven. 





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


     javax.swing.JOptionPane.showMessageDialog (null, "Message", "Title", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    

		System.out.println("hello there from Maven app.");
		Logger logger = LoggerFactory.getLogger(App.class);
		logger.info("Hello from maven class log");


http://search.maven.org/





<dependency>
    <groupId>org.slf4j</groupId>
    <artifactId>slf4j-api</artifactId>
    <version>1.7.7</version>
</dependency>

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


you can add information about the developer and a licence as well. 

<developers>
<developer>
<id>agerber</id>
<name>Adam Gerber</name>
<email>gerber@cs.uchicago.edu</email>
<organization>University of Chicago</organization>
<organizationUrl>http://www.uchicago.edu/</organizationUrl>
<url>http://java-class.cs.uchicago.edu/adv/</url>
<timezone>-6</timezone>
<roles>
<role>Instructor</role>
</roles>
</developer>
</developers>

<licenses>
<license>
<name>The Apache Software License, Version 2.0</name>
<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
<distribution>repo</distribution>

</license>
</licenses>


mvn site:site 
mvn javadoc:javadoc



default scope is compile. 
<scope>compile</scope>

//from http://docs.codehaus.org/display/MAVENUSER/Dependency+Scopes

compile: This dependency is needed for compilation of the main source

test: This dependency is needed for compiling and running tests. It is not needed for compiling the main source or running the final artifact.

runtime: This dependency is needed for running the final artifact. It is not needed for compiling the main source or compiling or running the tests.

provided: This dependency is needed for compiling and/or running the artifact but is not necessary to include in the package, because it is provided by the runtime environment - for example, jsp-api.jar is provided by your web application container, so you don't include it in your WEB-INF/lib (for the example of a webapp); or a plugin or optional package that is a prerequisite for your application, but is not bundled with your application.

system: This dependency is required in some phase of your project's lifecycle, but is system-specific. Use of this scope is discouraged: This is considered an "advanced" kind of feature and should only be used when you truly understand all the ramifications of its use, which can be extremely hard if not actually impossible to quantify. This scope by definition renders your build non-portable. It may be necessarry in certain edge cases. The system scope includes the <systemPath> element which points to the physical location of this dependency on the local machine. It is thus used to refer to some artifact expected to be present on the given local machine an not in a repository; and whose path may vary machine-to-machine. The systemPath element can refer to environment variables in its path: ${JAVA_HOME} for instance.
tag <optional />



//CI team: how to deploy (publish) an archetype to a private server: 
https://www.youtube.com/watch?v=SlC_JKsfROk
mvn archetype:create-from-project



&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

example showing how to create a quick RESTful webservice using maven and netbeans.  

Create a new maven WebApp



import javax.ws.rs.ApplicationPath;
import javax.ws.rs.core.Application;

@ApplicationPath("app")
public class App extends Application {
  
}

import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("json")
public class JsonTest {
    
    //from http://en.wikipedia.org/wiki/JSON
    @GET
    public String show(){
        return "";
    }
    
}






