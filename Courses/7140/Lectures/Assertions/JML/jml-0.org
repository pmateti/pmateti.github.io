# -*- mode: org -*-
#+DATE: 2018-09-14
#+TITLE: Java Modeling Language JML
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CS7140 Adv Software Engineering
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Design by Contract View point

** Goals

1. Assigning blame across interfaces
1. Details of method responsibilities

** Information Hiding by Contracts

1. A contract can be satisfied in many ways
  1. a method can have many implementation satisfying the contract;
  1. Different performances (time, space, etc);
1. A contract hides the implementation details
  1. We can change implementations.
  1. Caller's code Will work for any implementation that satisfies the
   contract

** Techniques

1. Strongest Class invariant
1. Weakest Pre-conditions  =requires= for public methods
   1. The called method assumes precondition holds
   1. Avoiding constantly checking arguments
   1. The caller guarantees precondition holds

1. Strongest Post-conditions =ensures= for public methods
   1. The called guarantees postcondition
   1. The caller is guaranteed  postcondition

* Java Modeling Language (JML) Overview

1. http://www.eecs.ucf.edu/~leavens/JML/index.shtml
1. JML is a behavioral (functionality) interface specification language
1. Annotation language captures programmer design decisions
1. JML is contained in /annotations/
  1. =//@ JML annotation=
  1. =/*@ JML annotation @*/=
  1. =javac= will ignore these
1. JML annotation is a Java boolean expression ...
  1. without any side effects
  1. extended with =\old=, =\result=
  1. extended with =\forall=, =\exists=
  1. JML keywords: =requires, ensures, invariant=
  1. JML keywords: =pure, nonnull, assignable, signals=
1. JML annotation includes =model= fields

** No Side Effects
1. No use of ~=, ++, --~, ...
1. Can only call pure methods.

** Java extended syntax in JML
1. =a ==> b= stands for a implies b
1. =a <==> b= stands for a iff b
1. a <=!=> b stands for  !(a <==> b)
1. ~\old(E)~ stands for the value of E in pre-state
1. ~\result~ stands for the result of method

** Quantifiers
1. Universal \forall JML =\forall= and existential \exists JML =\exists=
1. General quantifiers (=\sum, \product, \min, \max=)
1. Numeric quantifier (=\num_of=)
1. Ex: ~(\forall Student s; juniors.contains(s); s.getAdvisor() != null)~

** Java example source code files with JML annotations

1. [[./jml-one-page-ex-1.pdf]]
1. [[./jml-one-page-ex-2.pdf]]
1. Patrice Chalin, et al., "Beyond Assertions",
   http://www.eecs.ucf.edu/~leavens/JML/fmco.pdf (Overview of JML
   tools) 2004. Required Reading.


** Non-Null
1. To state that some references must not be =null= ...
1. =private /*@ non null @*/ File[] files;=
1. =void createSubdir(/*@ non null @*/ String name) { ... }=

** Java assert
1. =assert Expression1 ;= where Expression1 is a boolean
   expression. When the system runs the assertion, it evaluates
   Expression1 and if it is false throws an AssertionError with no
   detail message.
1. =assert Expression1 : Expression2 ;= where Expression1 is a boolean
   expression.  Expression2 is an expression that has a value. The
   AssertionError constructor uses the string value of Expression2 to
   generate a detailed message.

** JML assert
1. =//@ assert i > 0 && 0 < j && j < 5;=
1. ~//@ assert (\forall int i; 0 <= i && i < n; a[i] != null);~
1. keyword assert also in Java (since Java 1.4)
1. assert in JML is more powerful


** assignable
1. Frame properties limit possible side-effects of methods.
1. ~//@ requires amount >= 0;~
1. ~//@ assignable balance;~
1. ~//@ ensures balance == \old(balance) - amount;~
1. ~public int debit(int amount) { ... }~
1. =debit= can only assign to the ﬁeld balance.\\
   NB this does not follow from the post-condition.
1. ~//@ assignable \everything~
1. ~//@ assignable \nothing~

** pure
1. A method without side-effects is said to be =pure=
1. ~public /*@ pure @*/ int getBalance() { ... }~
1. Pure methods have implicitly ~assignable \nothing~
1. Pure methods, and only pure methods, can be used in
   speciﬁcations:
1. ~//@ invariant 0 <= getBalance() && getBalance() <= MAX_BALANCE~


* Model Variables
1. variables to be used only in specifications
1. Given value only by =represents= clauses


* Tools for JML

** JML compiler
  1. perform JML checks at runtime;
  1. low overhead;
  1. jmlrac http://www.eecs.ucf.edu/~leavens/JML2/docs/man/jmlrac.html
  1. jmlc http://www.eecs.ucf.edu/~leavens/JML2/docs/man/jmlc.html

** ESC/Java2

1. http://kindsoftware.com/products/opensource/ESCJava2/
  1. Improve the current software engineering process
  1. Can prove JML assertions at compile time.
  1. Effort must be made by the developer
  1. So far, only possible for small programs

1. Input: a Java program annotated with JML assertions
1. Powered by program semantics and automatic theorem proving
1. Automatically check if the assertions are always true;
1. Statically without any user interaction
1. Reason about non-trivial properties (not just type-correctness)
1. Its warnings are intended to be interpreted by the author of the
   program
1. It does not find all the errors, but reduces the cost of
   finding some of them early

** JACK: Java Applet Correctness Kit

1. http://www-sop.inria.fr/everest/soft/Jack/jack.html

* JML Readings
1. Gary T. Leavens and Yoonsik Cheon, "Design by Contract with JML",
   http://www.jmlspecs.org/jmldbc.pdf, 2006. Compare with Meyers
   paper. Recommended Reading
1. Patrice Chalin, et al., "Beyond Assertions",
   http://www.eecs.ucf.edu/~leavens/JML/fmco.pdf (Overview of JML
   tools) 2004. Required Reading.

1. There are several JML plugins that you can discover through a web
   search.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
