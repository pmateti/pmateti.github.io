# -*- mode: org -*-
#+DATE: 2017-06-10
#+TITLE: Exercises On Assertions
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../
#+DESCRIPTION: On Assertions in Software Engineering
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2017 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Summation of an Array of Int

1. We will do this first without frama-c then with it.

1. Write the function sumUp that adds up all the elements of an array of
   int.

: int sumUp( int a[], int n) { ... }

1. Write the entry and exit assertions.

1. Write the loop invariant.  We expect the function to have just one
   loop.

* Sorting Exercises

1. Almost all introductory programming books have code for sorting and
   searching. It is likely that these are without assertions. Provide
   assertions and verify that the code is correct. Focus on: Sorting
   {bubble sort, quicksort, merge sort}; Searching {linear search,
   binary search}.

1. Introduce a primitive: exchange(i, j) whose pseudo-code is shown
   below:  [Don't focus on the syntax.]

   #+begin_src cpp
typedef ordered but opaque is item;
typedef 0 .. n-1 is index;
global array a[index] of item;

exchange(index i, index j) {
  item temp := a[i];
  a[i] := a[j];
  a[j] := temp
}
#+end_src

1. Specify exchange(). [cf with std::swap]
1. Rewrite the code of quick sort using this primitive and with the
   additional constraint of using no variables of type item other than the a[]. 
1. Verify the correctness of this revised version of quick sort.

* Termination

1. Proving correctness is almost always hard. Proving termination is
   almost always easy. In rare cases it can be *very* difficult.

   #+begin_src cpp
/*@ x is the given input integer, x > 0 */
while (x > 1) {
    if (x % 2 == 0)
        x /= 2;
    else
        x = 3*x + 1;
}
#+end_src

1. Does this terminate for arbitrary integers x > 0? Ignore arithmetic
   overflow issues.

1. Read http://en.wikipedia.org/wiki/Collatz_conjecture.


* Bubble Sort

1. There are many variations in the implementation.

  #+begin_src cpp
template < typename T>
void bubbleSort(std::vector < T> & v) {
  const int size = v.size();
  for(int i = 0; i < size; i++) {
    for(int j = 0; j < size - i; j++) {
      if (v[j] > v[j+1])
        std::swap(v[j], v[j+1]);
    }
  }
}
#+end_src

1. Variation #2: Better suited to the name of the algorithm. [Spot any
   errors?]

  #+begin_src cpp
template < typename T>
void bubbleSort(std::vector < T> & v) {
  const int size = v.size();
  for(int i = 0; i < size; i++) {
    for(int j = size - 1; j >= i ; j--) {
      if (v[j] > v[j+1])
        std::swap(v[j], v[j+1]);
    }
  }
}
#+end_src

1. If you prefer, simplify the above without template.  Just assume
   the vector is an array of int.
1. Write down the two loop invariants. Their location is immediately
   after the first semicolon of the for loop.

1. [[../Examples/QuickSort/bubbleSort-vector.cpp]] Complete file.

* QuickSort

1. [[../Examples/QuickSort/]]

2. Give entry/exit assertions for QuickSort? Also, the loop invariant.


* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
