# -*- mode: org -*-
#+DATE: 2020-09-15
#+TITLE: CS7140 Adv Software Engineering 2020-09-15
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../Top/
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 <a href=\"https://cecs.wright.edu/~pmateti\"> cecs.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil

* Announcements/ Reminders

1. Choice of the Project: DITAA it is! Read [Projects] linked on the
   Course Home Page.  Re-read: Minor updates.
1. Action Item: Each of you (individually): (i) Start a journal. (ii)
   Download DITAA source code and build.  (iii) Engage in a team
   meeting (using one of the team meeting tools mentioned in the
   lecture of 2020-09-01). (iv) Get a GitHub Team free account.  Due:
   Within the next 7 days.  Nothing to be turned in.
1. The link [Videos 2020] on the Course Home Page takes you to my
   lecture videos without a Pilot login.
1. Adv Software Eng: HW1 Fall 2020 upDated: 2020-09-15.  Due:
   2020-09-28

* Previously

1. Weeks #1 #2 #3: We are on schedule.

* Agenda

1. This week #4: Assertions, OpenJML, Small Set of Int.
1. Using Small Set of Int as a running example.

** Homework #1 Wiggly Worms in C++

1. [[../Examples/Wiggly-Worms/]]
1. Make =worms-one-file=, the worms executable. =file= output: ELF
   64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically
   linked, interpreter /lib64/ld-linux-x86-64.so.2,
   BuildID[sha1]=24a6b9a8ef33b8446e093d8c5d389123aff29c39, for
   GNU/Linux 3.2.0, not stripped
1. A movie clip of a demo of the worms "successfully" running.
2. Main task: Write entry- and exit-assertions for all the methods,
   and class invariants.  You may ignore assertions relating to
   =ncurses=.
1. Plus, two more tasks.  DbC, fluency in C++
1. Quick Intro of =ncurses=

** Assertions

1. Entry/ Exit Assertions (aka pre- and post-conditions)
1. Strong Loop Invariants
1. Class Invariants

** OpenJML

1. JML == Java Modeling Language http://www.openjml.org/

** Correct By Design

2. Design D satisfies Spec S, S ‚ä® D
2.1. Satisfies v Models
3. Design Space Hierarchy
1. All the above in [[../Design/correct-by-design.org]]

** Small Set of Int

1. Abstract
2. SmallSet Requirements
3. SmallSet Specs
4. SmallSet Design
5. SmallSet Implementation
6. Exercises
1. [[../Examples/Small-Set/GEN]] Doxygen-erated listing
7. All the above in [[../Examples/Small-Set/]]

** Design by Contract

* References

1. [[../Tools/IntelliJ-IDEA-HadiHariri.html][IntelliJ IDEA Minimal Survival Guide]] Highly recommended reading.
1. http://www.doxygen.org 
1. [[../../PDF/design-by-contract-meyer-1992-markedUp.pdf]]
1. https://cecs.wright.edu/~pmateti/Courses/7140/Lectures/Design/

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:

