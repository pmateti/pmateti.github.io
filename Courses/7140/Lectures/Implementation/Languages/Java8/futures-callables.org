# -*- mode: org -*-
#+date: 2015-10-05
#+TITLE: Java Futures and Callables
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: Mateti: OO Programming and Design 
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\"> ../../</a> "))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil

* Futures

** Unwaited Computations

1. Recall that when you define a method, occupying certain number of
   lines in a file, it is not executed until it is invoked.  Invoking
   is also tied down to using the b.m() notation.  

1. A future computation is a delineated segment of code in some
   method, that you intend to get results from some time in the
   future, and the code should have access to variables in the current
   scope, but with the values the variables will have at the time of
   invocation.

1. Futures are also called /promises/.  Many languages, e.g., Scala,
   have had futures. Also called, /asynchronous computation/.

** Java8 Futures

1. =java.util.concurrent.Future<V>= [[https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Future.html][interface]]
1. =Future<String> startWork(F) {S}= F is a list of formals, S is a
   segment of code that will return a String.  This defines the
   future-method that you named =startWork=.
1. Off you go do other computations.
1. =Future<String> fto = startWork(A);= Actual args A.  This requests
   the JVM to start executing the code body of =startWork=; JVM may
   look for an oppurtune moment to begin executing.  You now have the
   handle saved in =fto=.
1. Your code does not block/wait. Off you go do computations below
   this line.
1. When you must have the result, of this future work you created, do
   =String rs = fto.get();=
1. Control will not go past the above line until startWork delivers a
   result, that we obtain via the =get()= method.

1. A future task class implements =Runnable=, and so executable by an
   =Executor=.

* Callables

1. =java.util.concurrent.Callable<V>= [[http://docs.oracle.com/javase/8/docs/api/java/util/concurrent/Callable.html][interface]]
1. Similar to Runnable, but returns a result of type V.
1. Example: [[../Java8/src/CallableEx.java]] Executor with Future [[../Java8/src/CallableEx.java.html]]

