# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+STARTUP:showeverything
#+DATE: 2017-01-09
#+TITLE: Spring 2017 Project Work
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:nil

#+HTML_LINK_HOME: ./index.html
#+HTML_LINK_UP: ./
#+HTML_HEAD: <style> P, li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../Top/\">CS 7140</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2017 &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:1

* Summer 2016

1. This semester our project is on PDF editors.

2. https://en.wikipedia.org/wiki/Portable_Document_Format#Technical_overview
   Required Reading.

3. FOSS PDF Tools/ Libraries: ICEpdf, iText, jPod, PDFBox, PDFClown,
   pdfedit, PDFSharp, Poppler. Written in C++, C# or Java.  Web search for
   links.  (Please help to make this list exhaustive.)

4. No solid comparison is available.  Web-search for "anecdotal"
   comments.

5. I am *leaning toward* (i) iText, (ii) jPod, (iii) PDFbox, in that
   order.  
   1. =sloccount= s have not been a serious factor.  But, relevant.
   2. Quality of API docs mattered.
   3. Popularity mattered.  Written in Java mattered.  Recent activity
      mattered.
   4. If you *know better*, post your opinion on Piazza.

** Expectations of our PDF-project

1. Start with (or build afresh) a pdf-viewer-editor that can
   1. Read "real world PDF documents" (that may slightly deviate from
      the PDF-spec).
   1. Split a PDF file into several, e.g., by page.
   1. Extract text (Accuracy is important).
   1. Edit Annotations.
   1. Search for words and position a cursor.

1. Write the software engineering documents as outlined in [[../../Projects/7140-project.html][Project
   Work]].

1. Focus on the chosen library (one of iText, jPod, ...), and develop
   assertions.  Revise the code applying good smells, and refactoring,
   discussed in the course.


** Non-Expectations

1. Not expected: Edit a pdf file as if editing a MSWord document.
   E.g., not expected to be available: replace one word with another,
   insert/ delete a word

1. Not expected: Accept input from a stylus/pen.  Handwriting.
   Freehand drawing.

1. Rendering -- leave it alone.

** A Target

1. http://www.tracker-software.com/product/pdf-xchange-editor Try this
   freeware.  Can we duplicate the functionality of this? Even if we
   cannot compete with its speed.


** Alternate Project Possibilities

1. http://sourceforge.net/projects/freemind/.  Written in Java.
   Here is wiki describing https://en.wikipedia.org/wiki/Mind_map
   programs, in general.

1. https://sourceforge.net/projects/pdfedit/ Written in C++.  PDF
   manipulation.  "Free editor for PDF documents. Complete editing of
   PDF documents is possible with PDFedit. You can change raw pdf
   objects (for advanced users) or use many gui functions.
   Functionality can be easily extended using a scripting language
   (ECMAScript)."

* Spring 2016

A dir-sync program tries to make two directories become equal by
copying/deleting files from one dir to another.

http://sourceforge.net/projects/directorysync/
=sloccount src_dirsyncpro java=22445, nbproject xml=1310;=



# Local variables:
# after-save-hook: org-html-export-to-html
# end:
