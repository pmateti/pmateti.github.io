# -*- mode: org -*-
#+DATE: 2018-06-18 12:09 PM
#+TITLE: CS7140 Project: DITAA Specs
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CS7140 Adv Software Engineering
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../../Top/index.html
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

This article is a collection of hints to do a decent specs of DITAA
tool.

1. The functional specs should be done in discrete math, logic and grammar.

1. The functional specs of most non-interactive programs can be done
   in three parts.  This works for DITAA.
   1. The specification of input text.  Divide it into a seq of DITAA
      ASCII diagrams and ordinary text.
   1. The specification of output text.  Also, divide it into a seq of
      DITAA EPS diagrams and ordinary text.
   1. Spec the relationship between an ASCII diagram A and its EPS E.
      Is this relation a function?
1. Pages/paragraphs of Specs Doc should reference Pages/paragraphs of
   Requirements Doc.
1. [* These hints are written without studying the design/code of DITAA.
   As you know, there were no specs or requirements written by the
   author(s) of DITAA.  There are several examples.  But, I did take a
   quick look at the submitted Spec Docs.  Not thoroughly checked for
   correctness. *]
1. For now, the hints below are addressing only the grammar
   specification.

* DITAA Terminals (Lexemes)

1. The examples we considered so far (Telegram Problem, Condense Num
   Ranges, Tabulate Equations, Common Words Problem, and others) were
   based on linear text.

1. DITAA input is based on 2-D text.  We should use graph grammars
   (see refs).  But, we have not covered this topic.  So, we apply the
   linear-text grammars, with a few /adjustments/.

1. In a linear-text, tokens are separated by delimiters (spaces or
   special characters).  The order of their occurrence matters, but
   actual x-axis positions do not.

1. In DITAA, every terminal element has an anchor and its position is
   given by the line number (y-coordinate), and char position
   (x-coordinate).  For each terminal, we define where its anchor is.
   We follow the CS cursor position tradition and write it as (y, x).
   Our coordinate numbers are natural numbers (non-neg integers).

1. As defined above, the lexical analyzer code will be quite different
   from that of a typical PL.

* Box

1. Box (upper case B) is a non-terminal.  Production rules are given below.

1. tbox is a terminal.  The box made of hyphens, vertical bars, +/,
   the tags inside is this terminal.  The contained text, if any, does
   not become part of this terminal.

** Box/tbox Attributes

1. Recall that in PLs, (i) "identifier" is a token name, it has the
   spelling attribute, (ii) "integer" is a token name, it has the
   numerical value attribute.
1. A tbox terminal, similarly Box non-terminal, has several
   attributes.  In the following, we group them to save space in this
   article.
1. anchor: yx-coord; width, height: nat; corners lt, rt, lb,
   rb: {r, s}; fill-color: color;

1. shape modifier tags: doc, storage, io
1. Dashed lines:  {true, false} (true => Colon or = present )
1. Point markers: seq of yx-coord
1. Splits: Think of them as juxtapositions horizontally, that is
   l-to-r, notationally +,  or
   vertically, that is above-below, /.

** Box Production Rule

1. Box ::= tbox | Box + Box | Box / Box
1. In linear-text grammars, the toekns of one non-terminal are
   required to be separated from the others.
1. In the above Rule not so.  There is no white space separation.


* Arrow/Line

1. Arrow (upper case A) is a non-terminal.  Production rules are given
   below.  Line is the same as an arrow but does not have an arrow head.

1. tail, head: yx-coord. The tail is also its anchor.
1. Dashed lines:   {true, false}   (true => Colon or = present )
1. Turning points: marked with + or /
1. Point markers: marked with *

* Text

1. Text is the non-terminal. text is the terminal.
1. For you to work it out.

* DITAA Non-Terminals

1. DITAA non-terminals are: Box, Arrow, Line, and Text.
1. A few examples of the productions are given below in the example.


* DITAA Input Element DI

1. The input will be parsed from the given text file into derivations
   with non-terminals and tokens.

1. [*  Because our "linear text" orientation, we can continue to think of
   the tokens as l-to-r and above-and-below sequences.  *]

1. [* But all the tokens have anchor points.  So, we can even think of
   the parsed result as a set, instead of a seq, of tokens. *]

1. The tokens and the derivations are ASCII diagrams.
1. Anchor positions are integers.
1. DD ::= Box | Arrow | Line | Text | DD + DD | DD / DD

* DITAA Output Element DO

1. The tokens and the derivations are EPS entities.
1. Anchor positions are the same integers, but scaled.
1. Each input element is correctly drawn as an EPS entity.  [* You can
   fill in the details. *]
1. The EPS produced parses exactly the same as the input did.


* Appendix: Example 1


This example is taken from DITAA web page.

:  +--------+   +-------+    +-------+
:  |        | --+ ditaa +--> |       |
:  |  Text  |   +-------+    |diagram|
:  |Document|   |!magic!|    |       |
:  |     {d}|   |       |    |       |
:  +---+----+   +-------+    +-------+
:      :                         ^
:      |       Lots of work      |
:      +-------------------------+

** Terminals

Here are the terminals (the trailing numbers are subscripts).
Question marks indicate that I did not count the char/line positions.
Anchor coordinates are not shown, but exist.  Counting lines starting
from top == 1, and increases downwards.

1. tbox1, tbox2, tbox3, tbox4.  The attributes are easily determined.
   E.g., tbox1 has the {d} tag, anchored at (1, 1).
1. tarrow1: {tail (y1?, x1?), head (y2?, x2?), dashed:f};
1. tarrow2: { tail (6, 5), head (6, x?), dashed:t, turning points:
   (y1?, x1?), (y2?, x2?), (y3?, x3?) }; [* This needs more work. *]
1. text11, text12, text2, text3, text4, text5 are the text terminals.
   text11 is "Text", text 12 is "Document", text2 is "ditaa", text3 is
   "!magic!", text4 is "diagram", text5 is "Lots of work".  [* The
   word "is" should be "has the text attribute of". *]

** Derivations

Here are the derivations using non-terminals and terminals.
Subscripts added.

1. Text1 --> text11 / text12; Text2 --> text2; Text3 --> text3; Text4
   --> text4; [* We could omit Text2, Text3 and Text4 derivations *]
1. Box1 --> tbox1 / text1; 
1. Box2 --> tbox2 / text2;
1. Box3 --> tbox3 / text3;
1. Box4 --> tbox4 / text4;
1. DD2 -> tarrow1 / Box 2; [* The / causes a portion of the tarrow1 to
   be erased. *]
1. DD3 --> Box1 + DD2 + Box3;
1. DD5 --> text5 / tarrow2; [* This needs more work. *]
1. DD -> DD3 / DD5;
1. [* If you wish, use parentheses to show tighter grouping, instead
   of multiple productions */


* TODO by You

1. Revise the P-Specs Doc you submitted.  Making use of the hints
   given.  Improve whereever possible. Submit by Jun 28.
2. In the revised P-Specs Doc, include an appendix based on your own
   non-trivial example,  similar to my Example-1.
3. A few spots were marked "This needs more work."  Do the needed work.

* References

1. Summer 2018 CS7140 [[../Projects/index.html][Project Work]] DITAA Ascii Diagramming Tool
1. Prabhaker Mateti,
   http://cecs.wright.edu/~pmateti/Courses/7140/Lectures/Languages/Grammars/ast-notes.html,
   Intro to Grammars, Syntax, Semantics, AST. 5pp, 2016.
1. http://www.its.caltech.edu/~matilde/GraphGrammarsLing.pdf Graph
   Grammars.  19 slides. 2015.  Recommended Reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:

