# -*- mode: org -*-
#+date: 2015-11-09
#+TITLE: Streams of Java 8
#+AUTHOR: Prabhaker Mateti

#+DESCRIPTION: Mateti: OO Programming and Design 
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\"> ../../</a> | <a hrefTBD=\"index-slides.html\"> Slides </a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil

* Abstract

Streams of Java8.  Prereq: [[../Java/java8-lambda.org][Java 8 Lambda Expressions]], functional
interfaces and method references.


* Overview

1. The streams discussed here are unrelated to =InputStream= and
   =OutputStream= from Java IO.

1. A stream is a sequence of "items".  Can be infinite.  

1. Never expect to have the "entire" stream to be available "at once".
   Typically, we use items from the head, then wish to access the
   *next* item.  This is computed *lazily* (i.e., on demand).

1. Java8 =stream= s are *monads*.  "In functional programming, a monad
   is a structure that represents computations defined as sequences of
   steps" -- WikiPedia.

1. Any collection can be made into a stream. A =List <Integer> ilst =
   Arrays.asList (1, 2, 3, 5, 7, 11)= can be made into a stream of
   those 6 integers.

** Example: An Int Stream

: IntStream ns = ss.stream().mapToInt(s -> s.length()).filter(i -> i%2 != 0);

1. =ss= was a =List<String>=.  The =stream()= converted it to a stream.
   =mapToInt= mapped each string to its length.  The filter function
   removed all odd numbers from the result.  There were two uses of
   the lambda expressions. (Past tense was used just to explain.)

1. The object named =ns= will-contain/ contains the resulting stream.

1. But, the entire stream value is not constructed "up front".  It is
   computed on a need-to-have basis, known as lazy evaluation.  The
   above is "just" a declaration of an object that you "want."

** Ordered Streams

1. A stream whose source is an array, a List, or a generator function,
   is ordered.
1. A stream whose source is a Set is unordered.

* Map + Reduce

1. We already used the idea of a map: Apply a function to each value
   of a collection and gather the resulting collection of the same
   structure.

1. Reduce is the name given to an operation that takes a collection
   and computes "one-thing" out of it.

1. Example: Sum up all the numbers of a Set.

** Example

Example below is from https://docs.oracle.com/javase/tutorial/collections/streams/reduction.html
: double average = roster
:    .stream()
:    .filter(p -> p.getGender() == Person.Sex.MALE)
:    .mapToInt(Person::getAge)
:    .average()
:    .getAsDouble();

1. =p -> p.getGender()=  = =   =Person.Sex.MALE= a lambda expression as as a
   true/false yielding predicate.

1. =mapToInt= is a function that applies the function given as its
   argument to every item in the stream.  A new stream is constructed
   with these results.

1. =Person::getAge= a lambda expression omitting the bound var of the
   lambda

1. =average= is a reduction.


* Example: Log Analysis

1. [[../Java/src/AuthLogStreamEx.java]] Look for "Invalid" attempts to
   login from the /var/log/auth.log file; 50+ lines long. A complete
   Java program. [[../Java/src/AuthLogStreamEx.java.html][Colorized]] | [[../Java/src/AuthLogStreamEx.java.2.html][Plain]]

1. =% javac AuthLogStreamEx.java=
1. =% java AuthLogStreamEx auth.log.txt invalidUsers.txt=

1. Input data file for the above: [[../Java/src/auth.log.txt][auth.log.txt]] Copy of a
   =/var/log/auth.log=.

1. Output data file for the above: [[../Java/src/invalidUsers.txt][invalidUsers.txt]]

* References

1. http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html
   Reference.

1. Brian Goetz, Lambdas and Streams in Java 8 Libraries, [[http://www.drdobbs.com/jvm/lambdas-and-streams-in-java-8-libraries/240166818][DrDobbs]]
   article, 2014.  Recommended Reading

1. Lectured using these [[https://www.cs.cmu.edu/~charlie/courses/15-214/2014-fall/slides/26-java8.pdf][PDF slides]] by www.cs.cmu.edu/~charlie.
   "Lambdas and Streams in Java8", 2014.  Required Reading.
