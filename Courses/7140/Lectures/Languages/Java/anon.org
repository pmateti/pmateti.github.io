# -*- mode: org -*-
#+date: 2015-10-05
#+TITLE: CEG4180 2015-10-05 TBD
#+AUTHOR: Prabhaker Mateti
#+STARTUP:showeverything
#+OPTIONS: toc:nil
#+DESCRIPTION: Mateti: OO Programming and Design 
#+HTML_LINK_HOME: ../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\"> ../../</a> | <a href=\"index-slides.html\"> Slides </a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))


* Announcements

1. Accounts on =thor.cs.wright.edu=
1. Lab L1: Please do a =turnin=

1. Meyer's Book Chapters: 05 to 16: Reading Assignment
1. Work on the end of chapter Exercises

* Previously: Chapters from Touch-of-Class

1. http://touch.ethz.ch/ Meyers' Touch of Class, Book Website
1. http://se.inf.ethz.ch/old/teaching/2009-H/eprog-0021/slides/

* Today

anonymous inner class
1. Closures, Delegates, 

https://docs.oracle.com/javase/tutorial/java/javaOO/localclasses.html
https://docs.oracle.com/javase/tutorial/java/javaOO/whentouse.html
https://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html
http://tutorials.jenkov.com/java/nested-classes.html

Features of Java 8
Here is a brief summary of the enhancements included with the Java 8 release:
Detect and Remove old Java (Windows)
Starting with Java 8 Update 20, the Java Uninstall Tool is integrated with the installer to provide an option to remove older versions of Java from the system. The change is applicable to 32 bit and 64 bit Windows platforms.
Lambda Expression and Virtual Extension Methods
Highlighting feature of Java SE 8 is the implementation of Lambda expressions and supporting features to the Java programming language and platform.
Date and Time API
This new API will allow developers to handle date and time in a more natural, cleaner and easier to understand way.
Nashhorn JavaScript Engine
A new lightweight, high performance implementation of JavaScript engine is integrated to JDk and is available to Java applications via existing APIs.
Improved Security
Replacing the existing hand-maintained list of caller sensitive methods with a mechanism that accurately identifies such methods and allows their callers to be discovered reliably.

https://en.wikipedia.org/wiki/Closure_(computer_programming)

A closure is a block of code that can be referenced (and passed
around) with access to the variables of the enclosing scope.

Since Java 1.1, anonymous inner class have provided this facility in a
highly verbose manner. They also have a restriction of only being able
to use final (and definitely assigned) local variables. (Note, even
non-final local variables are in scope, but cannot be used.)

Java SE 8 is intended to have a more concise version of this for
single-method interfaces*, called "lambdas". Lambdas have much the
same restrictions as anonymous inner classes, although some details
vary randomly.

Lambdas are being developed under Project Lambda and JSR 335.

*Originally the design was more flexible allowing Single Abstract
Methods (SAM) types. Unfortunately the new design is less flexible,
but does attempt to justify allowing implementation within interfaces.


** Event-driven programming and Agents

1. http://se.inf.ethz.ch/old/teaching/2009-H/eprog-0021/slides/17_agents.pdf
