# -*- mode: org -*-
#+DATE: 2018-06-21 2020-09-09
#+TITLE: Grammars, Syntax, Semantics, and AST
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../../Top/index.html
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+OPTIONS: toc:t
#+STARTUP:showeverything
#+OPTIONS: toc:2

Abstract: A quick intro to grammars, syntax, derivation trees, and
ASTs.  I use these notes in multiple courses.

* Grammars

1. A /language/ is a set of sentences. Syntax rules specify which
   sentences are in the language.  Almost always an infinite set.
1. /Syntax/: the form of expressions, statements, and program units.
   Usually in textual form.  Often in abstract syntax trees (AST).
1. Syntax rules use /terminals/ (aka tokens, lexemes) and /non-terminals/.
1. /Lexemes/: sequences of characters without "delimiters" and obeying
   certain rules.  Examples: operators (+, *, ...), numbers,
   identifier, literals, reserved words.
1. /Semantics/: the meaning of expressions, statements, and program
   units.
1. /Grammar/: A collection of production rules that generate the
   sentences of a language.

** Chomsky Hierarchy

#+CAPTION: [[https://en.wikipedia.org/wiki/Chomsky_hierarchy][Chomsky Hierarchy]]
#+attr_html: :width 50%
[[./Figures/chomsky-hierarchy.png]]

1. Levels of Languages: Regex (L3),  Context-Free (L2),
   Context-Sensitive (L1), Recursively Enumerable (L0).

** Context Free Grammars (CFG)

   1. Defined using Terminals (Tokens aka Lexemes), and Non-Terminals
   2. Start Symbol (a non-terminal)
   4. Non-terminals aka Syntactic Categories.  Non-terminals are
      called that because a sentence production has not ended yet.

   3. There is no "context"
      1. A grammar production rule:  LHS ::= RHS
      2. LHS is a single non-terminal (i.e., without context)
      3. RHS is a seq of terminals and non-terminals

3. Limitations of CFG
   1. Defines syntax upto a "level"
   2. Cannot capture "context"
      1. E.g., "variable should be declared before use"

3. CFGs do not define semantics
   1. minor exceptions exist

1. Every modern PL has a CFG, often several.

* BNF  Notation

1. BNF (Backus-Naur Form) is a specific notation for writing down a
   context-free grammar.  Named after its originators: Backus (Turing
   Award winner) and Naur (Turing Award winner).
1. Examples of BNF rules:

   1. <identList> \rightarrow identifier | identifier, <identList>
   2. <ifStmt> \rightarrow if <logicExpr> then <stmt>

1. LHS \rightarrow RHS
   1. The LHS is a non-terminal
   2. The RHS consists of a seq of terminals and non-terminals
   3. BNF shows non-terminals within < >
   1. The terminals are aka lexemes.

1. There are many BNF variations/ extensions.

** Conventions

1. The production rules generate a sequence of tokens.  If the
   production is starting from the start non-terminal, a sentence in
   the language is generated.

1. A rendering of a sequence of tokens as a string of characters will
   (usually) separate the tokens by non-empty white spaces.

1. Sometimes the lexical structure is specified using CFGs.  Here, the
   terminals are characters, and there is no white space separation.


** Modern Notations

1. Simplify the BNF notation.
1. Drop <> from non-terminals.
2. Show terminals in a different font, or quote them.
3. Use {} or * for repetitions.
1. See the Java Grammar (below).
  
* Grammars of Real PLs

** Best Practice

2. Syntax of most languages is "specified" using context-free
   grammars.
1. Almost always incompletely (because we use context-free grammars).
2. Almost never ambiguously (unique derivation trees, described
   below).  The word ambiguous is not for semantics, but for parsing.

** Java

1. [[https://docs.oracle.com/javase/specs/jls/se7/html/jls-2.html][Chapter2. Grammars]] [from Oracle Java] "This chapter describes the
   context-free grammars used in this specification to define the
   lexical and syntactic structure of a program."

1. [[https://docs.oracle.com/javase/specs/jls/se7/html/jls-18.html][Chapter18. Java]] [from Oracle Java] "This chapter presents a grammar
   for the Java programming language."

1. https://kotlinlang.org/docs/reference/grammar.html Kotlin grammar

** C++/ C

1. http://www.open-std.org/JTC1/SC22/WG14/ C
1. http://www.open-std.org/JTC1/SC22/WG21/ C++

1. Standard for Programming Language C++, Working Draft, 1600+ pp. 2018.

* Semantics of Languages

1. Semantics requires context, and more.

2. Grammars do not "do" semantics

   1. Attribute Grammars do this partially.

3. Semantics of most PLs is "specified" using carefully
   worded English prose.

   1. This is (almost always) incomplete.
   1. This is (almost always) unclear / ambiguous.
   1. This is (sometimes) contradictory.

4. Techniques

   1. [[https://en.wikipedia.org/wiki/Operational_semantics][Operational Semantics]]
   2. [[https://en.wikipedia.org/wiki/Axiomatic_semantics][Axiomatic Semantics]]
   3. Declarative Semantics
   4. [[https://en.wikipedia.org/wiki/Denotational_semantics][Denotational Semantics]]
   5. Unfortunately, no real PL has its semantics defined as above.


* Derivation Trees

1. Syntax analyzer component of a compiler determines whether the
   sequence of characters (in a file) is syntactically a sentence.  It
   does this by first tokenizing (aka lexical analysis), and then
   /parsing/.

1. A parser constructs a derivation tree.
1. The leaves are terminals and internal nodes are non-terminals.

** Derivation Tree Example #1

1. A Grammar and an Example Derivation Tree.  The grammar has just one
   production rule.  [[./Figures/der-s.png]]

** Derivation Tree Example #2

: <assign> -> <id> := <expr>
: <id> -> A | B | C
: <expr> -> <expr> + <expr>
:   | <expr> * <expr>
:   | ( <expr> )
:   | <id>

#+CAPTION: One Derivation Tree of A := B + C * A (Others are possible)
#+attr_html: :width 50%
[[./Figures/ast-assign-stmt.png]]

** Derivation Tree Example #3

   1. Derivation tree of x + 3 * y
   2. From https://www.student.cs.uwaterloo.ca/~cs241/cfg/cfg.html ;; [[./Figures/derivation-tree.png]]
   3. In the above CFG,
      1. ::= and <> are omitted
      2. id, +, *, # are lexemes

* Abstract Syntax Tree (AST)

1. A parser constructs a derivation tree.  An unnamed component of the
   compiler then transforms/ constructs ASTs.  Semantic analyses, code
   generation, etc. traverse the ASTs.

1. None of the nodes are non-terminals.  They are either terminals of
   the grammar, or specially introduced, but not non-terminal, nodes.

1. Unfortunately, ASTs have not been "standardized".

1. [[http://www.eclipse.org/jdt/][Eclipse Java development tools (JDT)]] Uses ASTs. Popular.
1. JetBrains has https://www.jetbrains.com/idea/ Java/Kotlin IDE.  Uses ASTs. Popular.
1. JetBrains has https://www.jetbrains.com/mps/ Meta Programming System.  For the development of
   DSLs. Uses ASTs. Popular.
1. Given an AST, its textual standardized version can be
   algorithmically produced by traversing the AST.  Intellij Idea,
   Eclipse, ... do this.


** Example AST of an Arith Exp

1. An AST example of =x + 3 * y=

      #+BEGIN_EXAMPLE
                     +
                    / \
                   x   *
                      / \
                     3   y
#+END_EXAMPLE

** Example AST of an Arith Exp #2

[[./Figures/ast-exp.png]]

** Example AST From JTransformer FOSS

#+CAPTION: From JTransformer (Spot any error?)
[[./Figures/ast-jtransformer.jpg]]


** Example AST:  Euclid's Algorithm for GCD

#+CAPTION: Euclid's Algorithm for GCD
[[./Figures/ast-euclid.png]]

1. Examples of AST drawings often do not show symbol-tables, but they are
   included.

1. In the above AST: a, b were positive integers initialized by the caller.

1. Exercise: Deduce the source code from the above AST

* References

1. Oracle,
   https://docs.oracle.com/javase/specs/jls/se8/html/jls-2.html,
   Chapter 2. Grammars.  [[https://docs.oracle.com/javase/specs/jls/se7/html/jls-18.html][Chapter18. Java]]  Reference.

1. https://kotlinlang.org/docs/reference/grammar.html Kotlin grammar.  Reference.

1. Alessio Marchetti, http://www.nongnu.org/hcb/ Hyperlinked C++ BNF
   Grammar. 2018.  Reference.

1. http://www.open-std.org/JTC1/SC22/WG14/ C;
   http://www.open-std.org/JTC1/SC22/WG21/ C++. Reference.


* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
