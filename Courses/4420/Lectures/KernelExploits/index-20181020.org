# -*- mode: org -*-
#+date: 2018-09-10
#+TITLE: Linux Kernel Exploits
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ./
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | <a href=./index-slides.html>NoSlides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Overview

1. All OS kernels, Linux, MacOS, Windows, are buggy.  OS kernels have
   not yet reached a state of being bug free.  A security issue in a
   bug makes it vulnerable.  An exploit presents an actual use of this
   vulnerability in demonstrating the security issue.

1. This page has brief technical descriptions of a few kernel
   vulnerabilities.  Discovered in 2017 and 2018.  Network related
   items are skipped.  Not exhaustive.

1. For a few we have separate sections.

1. Objective: Provide technical descriptions accessible to students of
   cyber security.

1. Objective: Become familiar with CVE, and the description structure
   of a CVE.

1. Objective: Have a decent technical understanding of the
   vulnerability and the exploit.

1. Objective: Be able to apply a patch and rebuild and deploy the new
   kernel.  A patch to mitigate/ fix the vulnerability is provided by
   experts.



* Expectations of the OS Kernel

** Provide "Standard" Abstractions

1. A computer system can be divided into three pieces:

   1. [Hardware] Motherboard (CPU, RAM, and other chips), various daughter cards (e.g., a graphics card, a wireless network card), keyboard, mouse, screen, hard disks, other IO devices, and power supply.
   2. [Software] Operating system, and applications.
   3. [Firmware] A basic input/output subsystem (UEFI/BIOS) preloaded
      into a ROM

1. OS Kernel Definition by Components: OSK == VirtualMem + FileM +
   ProcessM + Net + IO + UserM + (Boot) + [SysPrg] ;; M stands for
   Management.

1. http://cecs.wright.edu/~pmateti/Courses/2350/Labs/OS-on-USB/OSonUSBLab.html
   Recommended Reading.

** Prevent Security Exploits

1. In this course, we are focused on the security aspects of the kernel.
1. Preventing Security Exploits is an expectation of all OS kernels,
   and system software.  There is no consensus on the definition of
   what "exploits" are, and what we mean by "prevention".

1. A few specific classes of security exploits are describe below.
1. Underneath all these exploits is the technique known as privilege
   escalation.

* BackDoors

1 [[./BackDoors/]]
1. Backdoors is frequently an application issue.  But, there have been
   kernel backdoors.
1. https://freedom-to-tinker.com/2013/10/09/the-linux-backdoor-attempt-of-2003/
1. https://www.theregister.co.uk/2016/05/09/allwinners_allloser_custom_kernel_has_a_nasty_root_backdoor/ ARM
1. https://www.reddit.com/r/linux/comments/54in5s/the_nsa_has_tried_to_backdoor_linux_three_times/ 2016
1. https://www.wired.com/2016/01/hack-brief-years-old-linux-bug/ 2016
1. https://www.infoworld.com/article/2606776/hacking/155947-Biggest-baddest-boldest-software-backdoors-of-all-time.html 2014

* RootKits

1. [[./RootKits/index.org]]

* RaceConditions

"Temporary file race vulnerabilities occur when privileged programs
attempt to create temporary files in an unsafe manner. Unsafe means
non-atomic with respect to an attacker's activities.  There is no
portable standard for safely (atomically) creating temporary files,
and many operating systems have no safe temporary file creation at
all. As a result, many programs continue to use unsafe means to create
temporary files, resulting in widespread vulnerabilities. This paper
presents Race-Guard: a kernel enhancement that detects attempts to
exploit temporary file race vulnerabilities, and does so with
sufficient speed and precision that the attack can be halted before it
takes effect. RaceGuard has been imple-mented, tested, and
measured. We show that RaceGuard is effective at stopping temporary
file race attacks, pre-serves compatibility (no legitimate software is
broken), and preserves performance (overhead is minimal)."

* SymLinkAttack

1. [[./SymLinkAttack/index.org]]

* Stack Clash

1. StackClash/

1. A vulnerability in the memory management of OS was discovered in
   2017, and named Stack Clash.  It can be exploited to execute
   arbitrary code. Qualys [ref] provided a technically detailed
   description.

1. CVE-2017-1000364

* Spectre

https://spectreattack.com/spectre.pdf

* Meltdown

Meltdown and Spectre exploit critical vulnerabilities in modern
processors.  Meltdown and Spectre work on personal computers, mobile
devices, and in the cloud. Depending on the cloud provider's
infrastructure, it might be possible to steal data from other
customers.

https://meltdownattack.com/meltdown.pdf


* Other Vulnerabilities

1. https://securingtomorrow.mcafee.com/mcafee-labs/linux-kernel-vulnerability-can-lead-to-privilege-escalation-analyzing-cve-2017-1000112/

* CVE-2017-18202 Local DoS Vulnerability

mm/oom_kill.c file
Vulnerability score: Critical — 9.8
Versions: before 4.14.4

1. Linux kernel kills a process when memory runs "low".  This
   vulnerability lies in the mm/oom_kill.c.

1. https://www.securityfocus.com/bid/103161  Ref



* CVE-2017-15126

fs/userfaultfd.c
Vulnerability score: High — 8.1
Versions: before 4.13.6.
The security issue in this kernel vulnerability is local memory corruption. More specifically, this is a use-after-free vulnerability, a specific type of memory corruption bug that can be exploited to execute arbitrary code or even enable full remote code execution.

In this case, the flaw was discovered in fs/userfaultfd.c in Linux kernel versions preceding 4.13.6, and is related to the handling of fork failure when dealing with event messages. This issue could be exploited by hackers to execute arbitrary code in context of the kernel. Failed exploit attempts can result in a DoS

The vulnerability and its fix have been published on a number of security advisories and bug trackers, and as usual, we’re here to let you know where you can find them. For more information about remediation you can check here, here and here.

* CVE-2017-1000253

 - load_elf_binary does not allocate sufficient space

Provided that an application is built as Position Independent
Executable (PIE), the loader can allow part of that application's data
segment to map over the memory area reserved for its stack resulting
in corruption of the stack, with possible privilege escalation. The
vulnerability has been assigned CVE-2017-1000253. This issue was
publicly disclosed on Tuesday September 26th, 2017 and is rated as
Important.

https://access.redhat.com/security/vulnerabilities/3189592




* Viruses


* Privilege Escalation

1. [[./privilege-escalation.org]]
1. Linux PIE/stack corruption (CVE-2017-1000253) A Local Privilege
   Escalation.
   https://www.qualys.com/2017/09/26/linux-pie-cve-2017-1000253/cve-2017-1000253.txt
   "An unprivileged local user with access to SUID (or otherwise
   privileged) PIE binary could use this flaw to escalate their
   privileges on the system."

* Hardening a Kernel

1. [[./kernel-2004.html][Hardening a Linux Kernel]]
1. Hardening/BuildKernel/

* References

1. https://www.cvedetails.com/product/47/Linux-Linux-Kernel.html Linux
   Kernel Vulnerability Statistics 1999 - 2018.  Required Visit.

1. https://blog.qualys.com/securitylabs/2017/06/19/the-stack-clash;
   https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt
   Qualys Security Advisory: The Stack Clash
1. https://www.cvedetails.com/cve/CVE-2017-1000364/ Stack Clash

1. https://forum.xda-developers.com/android/software-hacking/development-stack-clash-eop-exploit-t3631001

1. https://people.csail.mit.edu/vlk/spectre11.pdf
1. https://meltdownattack.com/


* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:


