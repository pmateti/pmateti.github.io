# -*- mode: org -*-
#+DATE: 2019-08-10
#+TITLE: Refreshers on OS: API and ABI
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:nil
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+DESCRIPTION: OS Refreshers
#+HTML_HEAD: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d <a href=\"../../\"> ../../</a> "))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 0000 - 2019 &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STYLE: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STARTUP:showeverything


Everything you see here is required background for our discussion of
(Host) Computer Security and Android Internals and Security.

* API Application Program Interface

1. An API defines the interfaces by which one piece of software
   communicates with another at the source level.
1. Source code level.  This is the set of public
   types/variables/functions that you expose from your
   application/library.

1.  In C/C++: the header files; Java imports

* ABI Application Binary Interface

1. Whereas an API defines a source interface, an ABI defines the
   low-level binary interface between two or more pieces of software
   on a particular architecture. It defines how an application
   interacts with itself, how an application interacts with the
   kernel, and how an application interacts with libraries.

1. This is how the compiler builds an application.  It defines things such as

   1. How parameters are passed to functions (registers/stack).
   1. Who cleans parameters from the stack (caller/callee).
   1. Where the return value is placed for return.
   1. How exceptions propagate.

* References

1. http://cecs.wright.edu/~pmateti/Courses/2350/ CEG 2350: OS Concepts
   and Usage.  This course presents most of our prerequiste materials
   at a beginners level.  Lecture and lab notes are fully on-line.

1. http://cecs.wright.edu/~pmateti/Courses/4350/ CEG 4350: OS
   Internals and Design.  This is a senior/ first-year-grad level
   course.  Main topics are Programs, Processes, System Calls and File
   Systems.  Lecture and lab notes are fully on-line.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
