# -*- mode: org -*-
#+DATE: 2015-08-10
#+TITLE: Refresher on Programs, Processes, and IPC
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:2
#+LINK_HOME: ../../
#+LINK_UP: ../../Lectures
#+DESCRIPTION: WSU CEG 4900/6900 Android Internals and Security
#+HTML_HEAD: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d <a href=\"../../Top/\"> Top</a> | <a href=\"index-slides.html\">Slides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2014 %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> %d"))
#+STYLE: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STARTUP:showeverything
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.4)

* Operating Systems

1. Everything you see here is required background for our discussion
   of Android Internals and Security.


** What is a program?

1. Do NOT use "program" and "process" interchangeably.

1. Precise def will be based on OS.

1. A program is a file
   1. Executable permissions
   1. Structure of content rigidly defined by an executable format
      1. Linux: ELF, a.out, coff
      1. Windows: com, exe
      1. Java: .class files
      1. Android: .dex

1. Program v Object code files
   1. generated by a linker
   1. On Linux, /usr/bin/ld  (historically misnamed)

1. The compiler/IDE tool chain invokes the linker

1. Android APK file includes 
   1. the .dex file 
   1. many (20+?) other files describing resources.
   1. "App" is an alternate term for a program


** What is a process?

1. Process is a run-time volatile entity created by the OS system call
   =exec=

1. Processes have a virtual memory foot print.

   1. Code (machine instructions; historically misnamed as "text")

   1. Run time stack content

   1. Run time heap content

   1. Run time global variables

   1. Subject to paging and swapping

1. Android details are more complex cf. Linux


** Properties of a Process

1. A program "does not run" -- it justs sits somewhere on the disk.

2. A process has a life cycle: is born, lives/runs for a while, dies.

3. Every process has one parent.

   1. Obvious Exception: the very first process. Named: =init=
   2. Parent is expected to out-live the child.

3. Every process has a unique process-ID (pid) assigned to it by the
   OS.  Typically, 1 + pid of the last process born

1. Every process is owned by a user.  Typically the user who invoked
   the correspnding program.  But, see =suid=.

** Processes v Threads

1. Processes are disjoint from each other. Their address speaces are
   disjoint.  They are unaware of each other.  OS schedules their
   execution.

1. A thread is part of a process.  Typically, several threads share a
   process.  Address space is overlapping.  The language (eg., Java)
   runtime schedules the execution.

** Inter Process Communication (IPC)

1. All the following is via Operating System Calls (syscalls)
1. Read: http://man7.org/conf/lca2013/IPC_Overview-LCA-2013-printable.pdf
1. Read: http://www.tldp.org/LDP/tlk/ipc/ipc.html from The Linux
   Documentation Project

** IPC: Message Passing

2. P:: send(Q, e), value of expression e is sent to process Q
1. Q:: receive(P, v), from P receive a msg, and store it in v
1. asynchronous -- non-blocking, sender sends and is off to his own work
2. synchronous -- blocking, sender waits for "got-it" ACK from
   receiver
1. =#include <sys/ipc.h>=
1. =#include <sys/msg.h>=
1. http://man7.org/linux/man-pages/man2/recv.2.html is for sockets,
   not IPC

** IPC: Shared Memory

1. An area of memory A of process P is shared with Q
1. Their addresses in P and Q may or may not be equal.
1. Any writes of P are seen (read) by Q; and vice-versa
1. Need to be careful: When does Q read? Before or after P has made changes?
1. http://man7.org/linux/man-pages/man7/shm_overview.7.html

** IPC: Synchronization

1. All the following "loosely" (not rigorously) stated.
1. Linux Semaphores (versus text book versions)
1. Locks
1. iNotify (tell me when a file or dir has changed)

** IPC: Mutual Exclusion

1. A sequence S1 of code lines of P1 shoud not be in execution while
   S2 of P2 is, and vice versa

1. Progress in computation: 4 requirements

1. [[http://stackoverflow.com/questions/10100923/difference-between-mutual-exclusion-and-synchronization][Difference between mutual-exclusion and synchronization]]

** Silbershatz and Galvin book Linux Slides

1. [[./LinuxOS-SGOSbookCh20.ppt]] Linux chapter from Silbershatz and
   Galvin book.

