
# -*- mode: org -*-
#+date: 2019-11-01
#+TITLE: Intricacies of C Semantics
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | <a href=./>NoSlides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:0

* General

1. Learn =gcc -ansi -pedantic -Wall flags=.
1. Some of the intricacies are due to how its compilers (=gcc= and now
   =llvm=) work.

* Standard Library

1. Become familiar with =libc=, and in particular with =strlen strcpy
   strcat=

* Pointers to Functions/ Strings

1. What are "strings"? Array of characters (sizeof(char) equals 1), terminating
   in ='\0'=.
1. =char *p = "hello";= versus =char q[]= == "hello";= .

   1. =char *p = "hello";= declares p and allocates read-only storage for "hello", the address of which is assigned to p.
   1. =char q[]= == "hello";= .  Figure out the semantics.

1. What is a Table of Pointers to Functions?  Table == Array.

1. If =T f(...) { ...}= is a C function, then f, without parentheses,
   is the address (pointer) of function f.

1. Any address can be cast to =void *=.


* Word alignment/ Address Relationships

2. Consider this line of code: =int x; int y;= Relate &x with that of
   &y.  Discover by writing code and printf-in the addresses.

3. =char c[3]; int z;=  &z == c +- what?

* Embedded Assembly Language

1. =exploit[34].c= of AlephOne use asm-coding of =get_sp()=.  Can we
   replace it with plain C code?

1. =asmlinkage=


* Proper C Usage

1. The C language =static= is like =private= of C++; static symbols
   are not exported.

1. The type =int= is compiler specific.  =sizeof(int)= is typically 4
   or 8 bytes.  On very old systems, and even modern embedded systems,
   it can be 2 bytes.  The width of a ptr is architecture specific.  A
   ptr value on a 64-bit system is 8 bytes wide. The GNU C compiler
   was indeed warning about =(int) dirp= shown below.

1. C ptr arithmetic. The resulting value of =p + x= is computed as the
   equivalent =long long int= value of ptr =p=, plus (ordinary arith)
   =x * sizeof(p)=

1. Kernel coding style: https://www.kernel.org/doc/html/v4.19/process/coding-style.html

** Bad C Usage

1. Bad C usage.  Reckless int-long-ptr synonyms.  The following bad C
   usage was found in a blog.
   #+begin_src
struct linux_dirent64 *cur = dirp;
...
int reclen = cur->d_reclen;
char *next_rec = (char *)cur + reclen;
int len = (int)dirp + rtn - (int)next_rec;
#+end_src

1. =asmlinkage int (*ogetdents64) (unsigned int fd, struct
   linux_dirent64 *dirp, unsigned int count);= should not have
   =asmlinkage= And, this is declaring a ptr variable named
   =ogetdents64=.  It also declares that (i) the ptr it holds is the
   address of a function, (ii) this function takes three arguments as
   declared.

1. I was expecting the GNU C compiler to produce a warning/error on
   =ogetdents64(...)= versus =(*ogetdents64)(...)= But, it did not!
   Further investigation is warranted.


* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
