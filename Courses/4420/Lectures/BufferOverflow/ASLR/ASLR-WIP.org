
# -*- mode: org -*-
#+date: 2018-09-29
#+TITLE: ASLR WIP TBD
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:0


1. "Address space layout randomization (ASLR) is a memory-protection
   process for operating systems (OSes) that guards against
   buffer-overflow attacks by randomizing the location where system
   executables are loaded into memory."

1. stack top as seen from main() is randomized.

1. Several mainstream, general-purpose operating systems implement
   ASLR.  Android, BSDs, Linux, iOS, Windows.

1. "A side-channel attack utilizing branch target buffer was
   demonstrated to bypass ASLR protection.  In 2017, an attack named
   "ASLR ⊕ Cache" was demonstrated which could defeat ASLR in a web
   browser using JavaScript.

1. Understand /boot/abi-4.18.0-8-generic TBD

* Slides

1. http://security.cs.rpi.edu/courses/binexp-spring2015/lectures/15/09_lecture.pdf
   65+ slides.  Modern Binary Exploitation CSCI 4968 RPI.edu Spring
   2015 Patrick Biernat

1. http://www.cs.ucr.edu/~csong/seclab/17/l/lab06-aslr/slides.pdf
   Chengyu Song; 20 Slides based on CS6265 taught by Prof. Taesoo Kim

* Labs

1. https://ocw.cs.pub.ro/courses/cns/labs/lab-10 Lab 10 - Return Oriented Programming

1. https://ocw.cs.pub.ro/courses/cns/labs/start Labs for the Computer and Network Security class.
Lab 01 - Introduction. Basic Exploration Tools
Lab 02 - Assembly Language
Lab 03 - Executables. Static Analysis
Lab 04 - Processes. Dynamic Analysis
Lab 05 - The Stack. Buffer Management
Lab 06 - Exploiting. Shellcodes
Lab 07 - Exploiting. Shellcodes (Part 2)
Lab 08 - Exploit Protection Mechanisms
Lab 09 - Strings
Lab 10 - Return Oriented Programming
Lab 11 - Return Oriented Programming (Part 2)
Lab 12 - Integers
Lab 13 - Advanced Binary Analysis

1. http://www.cs.ucr.edu/~nael/pubs/micro16.pdf
Jump Over ASLR:
Attacking Branch Predictors to Bypass ASLR
Dmitry Evtyushkin
Department of Computer Science
State University of New York
at Binghamton
devtyushkin@cs.binghamton.edu
Dmitry Ponomarev
Department of Computer Science
State University of New York
at Binghamton
dima@cs.binghamton.edu
Nael Abu-Ghazaleh
Computer Science and
Engineering Department
University of California, Riverside
naelag@ucr.edu

* References

1. https://en.wikipedia.org/wiki/Address_space_layout_randomization
   Required Reading

1. Brad Spengler (October 2003). "PaX: The Guaranteed End of Arbitrary
   Code Execution". grsecurity.net. Slides 22 through 35.

1. Daniel Gruss Clémentine Maurice Anders Fogh Moritz Lipp Stefan
   Mangard Prefetch Side-Channel Attacks: Bypassing SMAP and Kernel
   ASLR, CCS’16,  2016, Vienna, Austria.

1. Hector Marco-Gisbert, and Ismael Ripoll-Ripoll, return-to-csu: A
   New Method to Bypass 64-bit Linux ASLR, [[https://www.blackhat.com/docs/asia-18/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf][blackhat.com asia-18 PDF]]

1. https://cs.unc.edu/~fabian/papers/oakland2013.pdf Just-In-Time Code Reuse:
On the Effectiveness of Fine-Grained Address Space Layout Randomization
Kevin Z. Snow, Fabian Monrose
Department of Computer Science
University of North Carolina at Chapel Hill, USA
Email: {kzsnow,fabian}@cs.unc.edu
Lucas Davi, Alexandra Dmitrienko,
Christopher Liebchen, Ahmad-Reza Sadeghi
CASED/Technische Universitat Darmstadt, Germany
2013 IEEE Symposium on Security and Privacy

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
