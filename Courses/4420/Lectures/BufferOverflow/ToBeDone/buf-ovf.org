
# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+TITLE: Buffer Overflow Attacks
#+AUTHOR: Prabhaker Mateti
#+STARTUP:showeverything
#+OPTIONS: toc:t
#+LINK_HOME: ../Top/index.html
#+DESCRIPTION: CEG4420/6420 Computer Security,  Buffer Overflow Attacks
#+STYLE: <style> P {text-align: justify} li { text-align: justify; } code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-export-html-preamble-format (("en" "%d<br><a href=\"http://cecs.wright.edu/~pmateti/Courses/4420/\">OnLine CEG 6420: Computer Security</a>"))
#+BIND: org-export-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2013 &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a> &bull; %d"))

* Notes to Self

These are notes to [[http://www.wright.edu/~pmateti][myself]] and [[chris.roberts@wright.edu][Chris Roberts]] as we prepare to produce
the lecture videos.

Thiis is Buffer Overflow Attacks chapter.  Expected video length of
this chapter is 120 minutes.  Each line item (of the form #-dot-space)
below is worth between 30 sec to 3 minutes in the voice over.

There is a lab, and required reading, but no homework.

** Notes to Self #1: ToBeDone
But for 
1. [TBD insert videos]
1. [TBD insert quiz]  (I am interpreting "quiz" also as some activity.)
   Every 10 min or so
1. I would like to split this chapter into two.  (Soon.)
1. voice over on the slides, 
this Buffer Overflow Attacks (BOA) chapter is "done".  I think
I will wait until I see this outline updated with video clip url's
before I do the voice over.

** Notes to Self #2: Slides

I am producing semi-automatically the [[./buf-ovf-slides.html][slides]] from [[./buf-ovf.html][this html]] file
generated by the [[http://orgmode.org/][org mode for emacs]] from this [[./buf-ovf.org][buf-ovf.org]] dot-org
file.  I am using [[http://lab.hakim.se/reveal-js/][reveal.js]] tool for the slides now, using theme named
"serif" that gives brownish colors, and "default" transitions.  I
would like to move to doing these slides in [[http://sozi.baierouge.fr/wiki/en:welcome][Sozi]].

Obviously, these self notes, items marked with TBD, and such should be
removed from the versions students get.

[TBD fix: some slides have too much, etc.]

** Notes to Self #3: Sidebars

There are several "sidebar" items mentioned in this outline.  Most of
them occur in "Background Knowedge #n" slides.

As the student watches the video or just the slides, I would like to
see a relevant list of background topics float and disappear after a
couple of secs.  Do we know how to do that?

** Notes to Self #4: Student should get ...
1. Link to "How to use WSU OnLine Computing System" [TBD]
1. ISO image of =auditor-*.iso= (no longer easy to find on the web but
   I have a copy)
1. Get the latest via web search: Knoppix*.iso, Kali*.iso
1. All C src files of the dir [[./2013/]]  [TBD? Change 2013 to =src=?]
1. Link to the BOA article [[../BufferOverflow/index.html]]
1. Link to the [[../BufferOverflow/BufferOverflowLabGS.html]]
1. Link to [[../BufferOverflow/buf-ovf-slides.html]]

** Notes to Self #4: Recordings #1
1. An edited draft, with captions:
   http://mmsi.wright.edu/mateti-caption.html; mostly about "side
   bars" for Buf Ovf exploit.  off-campus: via vpn
1. http://mmsi.wright.edu/caption.html  off-campus: via vpn

** Notes to Self #4: Recordings #2
1. TBD [[www.asana.com]] I am yet to list what I have where.
1. My hand-written notes  [[./buf-ovf-vid-notes-20131104.pdf]]
1. The following mp4s are at http://mmsi.wright.edu/mateti-drafts/ \\
  00:08:06 ,  Mateti-Oct-14-Vid-1.mp4 ,  buf-ovf, \\
  00:15:00 ,  Mateti-Oct-14-Vid-2.mp4 ,  buf-ovf, \\
  00:04:26 ,  Mateti-Oct-14-Vid-3.mp4 ,  buf-ovf, \\
  00:04:51 ,  Mateti-Oct-14-Vid-5.mp4 ,  buf-ovf, \\
  00:06:51 ,  Mateti-Oct-14-Vid-6.mp4 ,  buf-ovf, \\
  00:09:37 ,  Mateti-Oct-14-Vid-7.mp4 ,  buf-ovf, \\
  00:10:19 ,  Mateti-Oct-9-Clip-1.mp4 ,  buf-ovf, \\
  00:09:11 ,  Mateti-Oct-9-Clip-2.mp4 ,  buf-ovf, \\

** Notes to Self #5: Recordings #3
  recorded on Sep 27, 2013\\
  00:03:45 ,  Mateti-Course1-1.mp4 ,  buf-ovf,  modret,  first-rec, \\
  00:04:02 ,  Mateti-Course1-2.mp4 ,  buf-ovf,  modret, \\
  00:05:53 ,  Mateti-Course1-3.mp4 ,  buf-ovf,  modret, \\
  00:04:07 ,  Mateti-Course1-4.mp4 ,  buf-ovf,  modret, \\
  00:03:45 ,  Mateti-Course1-5.mp4 ,  buf-ovf,  modret, \\
  00:01:29 ,  Mateti-Course1-6.mp4 ,  buf-ovf,  modret, \\


* BO Attacks: Abstract

A large number of exploits have been due to sloppy software
development.  Exceeding array bounds is referred to in security
circles as "buffer overflow."  The exploit escalates the privileges of
the intruder, who comes in as an ordinary user, to those of the
super-user.  These exploits are by far the most common security
incidents of the decade.  A current euphemism is "allowing an attacker
to execute arbitrary code".  This lecture explains the stack-smashing
(called so because the array is located on the stack) technique, and
presents a few techniques that help in preventing the exploit.

* Educational Objectives

1. Recognize the end result of buffer overflow attack
1. Describe the stack smashing technique
1. Describe several techniques of overflow exploit avoidance.

* Buffer Overflow Attack Overview

1. End result: a super-user owned shell process is born

1. Arguably: The still prevalent exploit
   1. Ranks 3 in Most Dangerous Software Errors 2011
   1. http://cwe.mitre.org/top25/ 
   1. Arguably: The first security exploit (1988)
   1. Arguably: The most common exploit

1. Alt names: buffer overrun, stack smashing, code injection

1. Related exploits: heap overflow, format string exploit, 

1. This is a long chapter!

* Famous Buffer Overflow Attacks

1. [TBD add a description of damage caused; add images]
1. Historically Important BO Attacks
1. Famous Programs BO-Attacked Over The Years

** Famous BO Attacks #1
1. 1988 Morris worm (no CVE #)
      1. Overflow in =fingerd=
      1. 6,000 machines infected (10% of then Internet)
      1. 1990 Robert Tappan Morris was convicted
      1. 2008 Received tenure at MIT

1. 2001 CodeRed CVE-2001-1134
   1. Overflow in Microsoft IIS web server
   1. 300,000 machines infected in 14 hours
   1. Author?

** Famous BO Attacks #2

1. 2002 SQL Slammer CVE-2002-0649
   1. Overflow in Microsoft SQL server on XP and Win 2000
   1. 75,000 machines infected in 10 minutes
   1. 55 million meaningless SQL queries
   1. Estimated loss: $1.2 billion
   1. Blocking UDP port 1434 and installing Windows updates timely could have stopped
   1. Author still unknown
   1. http://malware.wikia.com/wiki/Slammer
   1. images from http://www.wired.com/ wired/ archive/ 11.07/ slammer.html

1. 2003 W32.Sasser.Worm CVE-2003-0533
   1. Overflow in Windows LSASS on XP and 2000
   1. 500,000 machines infected
   1. Sven Jaschan, Germany
   1. Estimated loss: $18.1 billion

** Famous BO Attacks #3
1. 2008 Worm:Win32 Conficker CVE-2008-4250
   1. Overflow in Windows Server
   1. 10 million machines infected
   1. MS offered $250,000 in 2009
   1. Author(s) of Conficker not found yet
   1. Conficker botnet /not/ dormant
   1. 2011 Conficker fraudsters arrested in Ukrania for draining
      millions from US banks
   1. Estimated loss: $9.1 billion
1. 201x - 2013 CVE-2013-????
   1. Many BO security patches issued for Linux and Windows
1. [TBD insert quiz] Visit [[http://cve.mitre.org][cve.mitre.org]].  How many BOAs in the last
   12 months?

** Famous Programs BO-Attacked Over The Years

1. Windows Internet Explorer 6 to 10
1. Unix/Linux Bind 8.2 2002
1. Unix/Linux sendmail 2003
1. Solaris Bash 2012

* The Enabling Weaknesses

1. Programming Practices: Sloppy
1. CPU: Machine instructions fetched from stack (a data address space)
1. CPU Architecture: Even the i386 could prevent the above
1. OS Design: Did not take advantage of virtual memory segmentation of
   i386

* BO Attack Howto

1. Intricately depends on: PL, Compiler, OS, CPU
1. Assembly Language Refresher
1. Intel x86 Instructions

** BO Attack Plan

1. An attacker (somehow) logs in as an ordinary user
2. Computes a sequence of bytes known as EGG

3. Invokes a chosen suid root program: =suprg $EGG=
   1. Inject the =$EGG= into the =suprg= process
   2. Owner of the  =suprg= process: attacker, but as an ordinary user
   3. The =$EGG= is injected into the  =suprg= process
   4. As the main method of =suprg= returns ...

4. A =root= owned =/bin/sh= process begins to run
5. We will go into the technical details of the above

** Background Knowledge #1
1. Virtual Machine setup: VirtualBox and VMware; 2005 Linux distro Auditor*.iso
1. command line shells
   1. the shell environment: =PATH PWD EUID HOME HOSTNAME=
   1. bash =PS1, PS2= prompts
   1. KDE =konsole= + =bash=
1. =suid= (set-user-id) root
1. [TBD insert quiz] We describe the prompt wanted; student should do
   the PS1. Can we change HOME to whatever? What about EUID?

** Background Knowledge #2
1. =#include <string.h> strcpy, strcat=
1. Array bounds
1. Structure of compiled code of C: \\
   =size, file, nm, ldd, strings, gdb=
1. Stack frame
1. [TBD insert quiz] Run the above commands on three programs: e.g., =/bin/ls=,
   =/bin/mount=, =/usr/bin/passwd=


** Background Knowledge #3
1. Gnu Asm: =movl $0x1,0xfffffffc(%ebp)=
1. Effective address calculation
1. System call: =execv=
1. System call: =exit=
1. =int    $0x80=
1. [TBD insert quiz] Compile, run, and examine via =gdb= the =./2013/exit.c=

** Unusual Effects
1. Modifying the Return Address in the Stack
   1. [TBD insert video; several clips; deliberately blurr =modret= arg numbers]
   2. =modret.c= code review
2. return address modded to point to machine code bytes
   1. [TBD insert video]
   1. =testsc.c= code review
3. modifying the shell environment
   1. [TBD insert video]
   1. change =PS1=
   2. invoke child =bash=
   3. Note the prompt change
   4. show =ps=, and =whoami=

** Shellcode
1. Designing the shellcode to be injected
1. Constructing the shellcode from disassembly
1. Fine tuning the shellcode as a proper string
1. Padding with NOPs so that jump target address is less critical
1. Inputting the shellcode as an argument

** Compute the =shellcode=
1. =NOP= "sled"
1. The =shellcode= bytes are \\
   =\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b=\\
   =\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd=\\
   =\x80\xe8\xdc\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68\x00=
1. [TBD insert quiz] Spot the "/bin/sh".

** The =shellcode= on the Stack
1. [TBD fix the problems with the SVG image]
1. [[./fig-shellcode.svg]] SVG
1. [[./fig-shellcode.jpg]] JPG
1. [TBD animation would help]

** Compute the =shellcode=
1. [TBD insert video]
1. =execsh.c=  code review
1. =exit.c= code review
1. [TBD insert quiz] Why do we have the machine code for =exit= in the
   shellcode?

** Compute the EGG
1. [TBD insert video]
1. =exploit3.c= of alephOne
1. Show =ps=, and =whoami=
1. =% ./exploit3.prg 612 2048= etc
1. Note the prompt change
1. show the EGG =echo $EGG | od -x -Ax= 
1. Show =ps=, and =whoami= ordinary user
1. [TBD insert quiz] Run =% ./exploit3.prg 612 2048= once more.  How
   many =bash= processes have we got?

** Preparing Our Own Vulnerable Program
1. [TBD insert video]
1. As root =# chown ./vulnerable.prg=
1. As root =# chmod +s ./vulnerable.prg=
1. Supplying the EGG, as ordinary user  =% ./vulnerable.prg $EGG=

** Code Injection
1. Reminder: The program is unmodified.
1. Reminder: The running process is modified.
1. [TBD insert video]
1. Show =ps=, and =whoami= ordinary user
1. Injects =$EGG= into the Process =% ./vulnerable.prg $EGG=
1. Modifying the return address [possible animation]
1. root owned shell materializes: =whoami= root!
1. [TBD insert quiz]

** Choosing a "qualified" Program already on the System
1. Qualification: suid-root\\
   =% find / -user root -perm -4000=
1. Qualification: Stack allocated local array
1. Qualification: Unchecked array index usage
1. Qualification: Copying a given argument into a local array
1. [TBD insert quiz] How will you know that a program found as above
   in Qual #1 has the rest of the qualifications?

** Compute the EGG and RET
1. =exploit4.c= of alephOne
1. =xterm= [TBD did I record this?]
1. root shell materializes: =whoami= root!
1. [TBD insert quiz]

* BO Related Attacks
1. Heap overflows v Stack overflows
1. Format String
1. Return to =libc=

* Detection of BOA

1. Checking the caller of =execv=
1. Canaries on the stack
1. Tools: Valgrind, ProPolice, ...
1. [TBD insert quiz]

* Prevention of BO Attacks

1. Virtual Memory Features of the CPU
1. Randomization of Addresses
1. Runtime Checks of Processes
1. Compile Time Checks of Source Code
1. Improved Programming Practices
1. Security Fortification

** Prevention of BOA #1: CPU + MMU

1. Separate address spaces for Data and  Machine Instructions
1. Non-executable user stack area =noexec-user-stack=
1. Never eXecute (NX) bit
1. Intel: XD bit, eXecute Disable
1. AMD: Enhanced Virus Protection
1. ARM: XN for eXecute Never
1. [TBD insert quiz]

** Prevention of BOA #2: PL Runtime

1. Stack top  randomization [TBD insert video]
1. Address space layout randomization
1. Runtime Check for Input Taintedness
1. Runtime Check for Array Bounds
1. [TBD insert quiz]

** Prevention of BOA #3: Programming Practices
1. Current (2013) GCC/Linux Solutions
1. Safe String Libraries
1. Static Analysis of Source Code
1. Modern Programming Languages
1. Separate Lectures on Sec Software Dev
1. [TBD insert quiz]

** Prevention of BOA #4: Fortification
1. Reduce the number of =suid= Programs
1. Harden each of the remaining suid programs
1. [TBD insert quiz]

* Experiencing the Exploit in the Lab

1. Objective: Be able to describe with precision a specific stack
   smashing buffer exploit /thoroughly/.

1. We will be using several C src code files.  Many are from AlephOne
   and a couple of our own.  These are avalable at [[./2013/]]

1. The lab experiment will be using Auditor Live Linux distro.

1. [[./BufferOverflowLabGS.html][Link to Grading Sheet]]

** Background Work for the Lab
1. Virtual Machines
   1. VirtualBox
   1. VMware
1. Linux Distro: (BackTrack) Audtor.ISO 
   1. An old Linux kernel + gcc  + bash
   1. It did not incorporate the BO prevention mechanisms
      described in [[../BufferOverflow/index.html][this lecture]].
   1. Uses IDE drives; so not bootable on modern PCs with SATA only HDD
   1. Follow the instructions of [[../BufferOverflow/vm-setup.html][vm-setup]] to
      run =auditor-*.iso= in a virtual machine set up.
   1. The [[http://cecs.wright.edu/~pmateti/OSIS/Top/][OSIS Lab]] server 192.168.17.111 exports the =/var/ISO/=
      directory that has this file: =auditor-250405-01.iso= size
      666423296 bytes TBD

** Steps of the Lab #1

1. Run =auditor-*.iso= in a virtual machine setup.  Compile and run
   =modrte.c=.  Instructions to compile and examine the assembly code
   are embedded as comments in the code. A
   relevant code segment from this file is reproduced below:
   #+begin_src C
  x  = 0x11;
  modret(y, z, 0x234); /* 0x234 an easy to recognize number */
  x += 0x22;
  x += 0x33;
  printf("7: x %x\n",  x);
   #+end_src
   Your goal is to make the =modret= process print (i) =7: x 66=, (ii)
   =7: x 44=, and (iii) =7: x 11= by invoking =% modret y z= three times
   with chosen integers y and z.  Record your process of discovering
   these numbers.

1. Boot into Knoppix or Kali.  Do the above step for =modret.c=.  Are
   you able to find the m and n?  Explain.


** Steps of the Lab #2

1. Improve the code of =exploit3.c= and =exploit4.c= so that there are
   no warning messages whatsoever from =gcc= even after using the
   flags as in =gcc -ansi -pedantic -Wall=

1. Reduce the size of their compiled binaries by at least 5% as seen
   by the =size= command under the text column. Make sure no
   functionality is lost.  Removing printf's amounts to changing
   functionality.  Optimized rewriting of portions of source code is
   permitted.  You must use the same gcc (optimization or other)
   flags.

1. Boot into Knoppix or Kali.  Login as a non-root user. Verify that
   the exploit still works on the =vulnerable.prg= program. (It may not!)

** Steps of the Lab #3
1. Run =auditor-*.iso= in a virtual machine setup.  Find an suid root
   program to exploit using =exploit[34].c.=

1. Search the web and report (summarize with technical descriptions)
   on at least two recent (within last two years) buffer overflow
   attacks.

** Steps of the Lab #4
1. Bonus Points: Do the above step for =modret.c= successfully in a
   distro other than Auditor.  Points awarded are calculated
   using this formula: ((Year the distro is released) - 2007) * 10.
   Do not share your info with others until the bonus points are
   awarded.

* Reading List

1. Readings are grouped into Required and Recommended.
1. Required Readings are a must read.  These are sources of exam
   questions.
1. Recommended Readings bring more insight into the topic.  But exam
   questions will not be derived from these.
1. Some of our "readings" are actually web site visits.

** Required Reading  (20 hrs)

1. Aleph One, "Smashing The Stack For Fun And Profit," [[http://www.phrack.com][Phrack]], Vol 7,
   Issue 49, File 14 of 16.  A classic article.  A local copy of the
   original Phrack article is [[./phrack-article-p49-14.txt]].  An
   html-zied version of this paper with some corrections by me is
   [[./alephOne.html]]. 1996.

1. Prabhaker Mateti, [[./index.html][Buffer Overflow Attacks]]. Article
   associated with this lecture. 2013.

1. http://en.wikipedia.org, Buffer-overflow, Heap-overflow,
   Uncontrolled-format-string, Return-to-libc-attack,
   Return-oriented-programming. 2013. All Required Reading.

1. Yves Younan, Wouter Joosen and Frank Piessens, "Runtime
   countermeasures for code injection attacks against C and C++
   programs ", ACM Computing Surveys , 44(3), 2012.

** Recommended Reading

1. David A. Wheeler, "Secure Programming for Linux and Unix HOWTO,"
   2003, http://tldp.org/HOWTO/Secure-Programs-HOWTO/ Highly
   recommended reading.

1. Matt Conover, and WSD, "w00w00 on Heap Overflows", January 1999,
   Originally at http://www.w00w00.org/ files/ articles/ heaptut.txt
   Web search for a copy. Highly recommended reading.

1. skape, Understanding Windows Shellcode, http://nologin.org/
   Downloads/ Papers/ win32-shellcode.pdf, 2003.

1. Parvez Anwar, "Buffer Overflows in the Microsoft Windows
   Environment", 2009, https://www.ma.rhul.ac.uk/ static/ techrep/
   2009/ RHUL-MA-2009-06.pdf
