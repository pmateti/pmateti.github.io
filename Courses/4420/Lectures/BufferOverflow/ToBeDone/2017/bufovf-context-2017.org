
# -*- mode: org -*-
#+date: 2017-10-06
#+TITLE: Buffer Overflow In Context
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2017 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti &bull; %d</a>"))
#+STARTUP:showeverything
#+OPTIONS: toc:2


Abstract: A large number of exploits have been due to sloppy software
development. Exceeding array bounds is referred to in security circles
as "buffer overflow." These are by far the most common security
problems in software. This lecture explains the stack-smashing
technique, and presents a few techniques that help in avoiding the
exploit.
    
1. [[./Auditor/vm-setup.html][Virtual machine set up]] to run =auditor-*.iso=.  The lab
   experiment will be using Auditor below.  This is an early Linux
   distribution.  It did not incorporate the buffer overlow protection
   mechanisms described in this article.

    
1. [[./modret/modReturnAddress-acer602-20080507.html][modReturnAddress-acer602-20080507.html]] These are the results of
   trying out the code examples from the AlephOne article. These notes
   were recorded with Auditor LiveCD on my old Acer laptop with
   Pentium III (Coppermine) running Debian GNU/Linux 3.1, gcc version
   3.3.5 (Debian 1:3.3.5-2).
    
1. [[./AlephOne/]] Extracted Code from AlephOne/

* Educational Objectives

  
A large number of exploits have been due to sloppy software
  development. A surprisingly large percentage of these are
  attributable to exceeding array bounds, that is referred to in
  security circles as "buffer overflow."
    
1. Recognize several real life examples of buffer overflow.
    
1. Describe the stack smashing technique
    
1. Describe several techniques of overflow exploit
    avoidance.

* Buffer Overflow

  
Buffer overflow is a common programming error. There is not a
  single OS that is free from this error. Buffer overflows have
  been causing serious security problems for decades. In the most
  famous example, the Internet worm of 1988 used a buffer overflow
  in =fingerd=. What is surprising is that a number of
  security oriented software such as SSH and Kerberos also have
  these errors.

* The Buffer Overflow Error

  
The essence of this problem can be explained by the following.
  The line =strcpy(p, q)= is a common piece of code in most
  systems programs. It copies the null-terminated string pointed by
  q to the destination area pointed by p. An example of this is:
  =char env[ 32]; strcpy(env, getenv("TERM"));= The
  =strcpy(p, q)= is proper only when
    
1. p is pointing to a char array of size m,
    
1. q is pointing to a char array of size n,
    
1. =m > = n=,
    
1. q[i] = = '\0' for some i where =0 < i < = n - 1=

  
Unfortunately, only a few programs verify that all the above hold
  prior to invoking =strcpy(p, q)=. A buffer overflow occurs when an
  object of size =m + d= is placed into a container of size =m=. This
  can happen in many situations when the programmer does not take
  proper care to bounds check what their functions do and what they
  are placing into variables inside their programs. If =n > m= in the
  =strcpy(p, q)= of above an area of memory beyond =&p[m]= gets
  overwritten.
  
Other examples of such buffer overflows:
    
1. =char input [ 20]; gets(input);=
    
1. =memcpy(p, q);=


* Buffer Overflow Exploits

  
An attacker exploits the above programming mistake. He injects
  cleverly constructed data / executable-code into the area beyond
  the declared sizes. If the "buffer" is a local C variable, the
  overflow can be used to force the function to run code of an
  attackers' choosing. This specific variation is often called a
  ``stack smashing'' attack. A buffer in the heap isn't much
  better. Attackers have been able to use such overflows to control
  other variables in the program.

* Stack Smashing

  
Stack-smashing attacks target a specific programming fault:
  careless use of variables allocated on the program's run-time
  stack such as local variables and function arguments. The idea is
  straightforward: Insert attack code (for example, code that
  invokes a shell) somewhere and overwrite the stack in such a way
  that control gets passed to the attack code. If the program being
  exploited runs with root privilege, the attacker gets that
  privilege in the interactive session.
  
The paper by Aleph One, "Smashing The Stack For Fun And Profit,"
  describes the technique in great detail, and is required
  reading. But it has a few inaccuracies. A version of this paper with
  a few of my corrections in place is [[./AlephOne/alephOne.html]] here. A
  few additional comments are included below.
  
Buffer overflow code intimately depends on (i) the CPU, (ii)
  the OS and (iii) the compiler of the language that the code is
  in. Aleph One's is paper is written in 1990s, and the examples
  are based on a Linux version running on an x86 32-bit machine. If
  you are trying his code, on a machine today, you need to adjust
  it. Most Linux installations now use libraries that can detect
  stack smashing.

* Heap overflows versus stack overflows

  
Heap is a programming language run-time data structure where from
  malloc/new operations dynamically allocate memory space.  A heap
  overflow is another code injection exploit based on the heap.  The
  concept of the exploit is similar to stack smashing, but the details
  differ.

  
"Heap overflows are generally much harder to exploit than
  stack overflows (although successful heap overflow attacks do
  exist). For this reason, some programmers never statically
  allocate buffers. Instead, they malloc() or new everything, and
  believe this will protect them from overflow problems. Often they
  are right, because there aren't many people who have the
  expertise required to exploit heap overflows. But dynamic buffer
  allocation is not intrinsically less dangerous than other
  approaches. Don't rely on dynamic allocation for everything and
  forget about the buffer overflow problem. Dynamic allocation is
  not a cure-all."
  
For more details on heap overflows, read the article "w00w00
  on Heap Overflows" cited in the references.

* Format String

  
Many programming language libraries include formatted string
  input exemplified by the =scanf("%s", &var)=.  Like the
  strcpy() functions, scanf cannot verify that the var given is large
  enough for the string input given at run time by the user.  This
  provides yet another oppurtunity for code injection by cleverly
  constructing the string input given.

* Return to libc

  
A return-to-libc attack starts with a buffer overflow in which
    the return address is replaced by the address of a function
    that the program already has, and additional portions of the stack
    is overwritten to provide arguments to this function. This allows
    attackers to call preexisting functions without the need to inject
    malicious/shell code into a program.

* Techniques of Avoiding Buffer Overflow

  
There are many preventive techniques.  Note that detection
  techniques will make a process crash.

* Non-executable user stack area

    The typical process should never execute code fetched from the
    stack segment.  Most CPUs can trap this occurrence (see
    http://en.wikipedia.org/wiki/NX_bit, and also
    http://en.wikipedia.org/wiki/Executable_space_protection#Linux).  The
    Intel x86 CPU architecture had support to prevent fetching and
    executing instructures from data-, stack-segments.  But Both Linix
    and Windows did not utilize until recently these virtual memory
    segment based solutins because they were only using paging related
    constructs.


  
It is possible to modify the Linux kernel so that the stack
  segment is not executable (see grsecurity). However, this was not
  built into the standard Linux 2.4 kernels. In Linux 2.6.x
  kernels, you must chose grsecurity configuration options. Part of
  the rationale is that this is less protection than it appears:
  attackers can simply force the system to call other
  ``interesting'' locations already in the program (e.g., in its
  library, the heap, or static data segments). Also, sometimes
  Linux does require executable code in the stack, e.g., to
  implement signals and to implement GCC ``trampolines''.
  
Even in the presence of non-executable stack, Linux Torvalds
  explains that &ldquo;It's _really_ easy. You do something like
  this: 1) overflow the buffer on the stack, so that the return
  value is overwritten by a pointer to the =system()=
  library function. 2) the next four bytes are crap (a "return
  pointer" for the system call, which you don't care about) 3) the
  next four bytes are a pointer to some random place in the shared
  library again that contains the string =/bin/sh= (and yes,
  just do a =strings= on the thing and you'll find it).
  Voila. You didn't have to write any code, the _only_ thing you
  needed to know was where the library is loaded by default. And
  yes, it's library-specific, but hey, you just select one specific
  commonly used version to crash. Suddenly you have a root shell on
  the system. So it's not only doable, it's fairly trivial to do.
  In short, anybody who thinks that the non-executable stack gives
  them any real security is very very much living in a dream world.
  It may catch a few attacks for old binaries that have security
  problems, but the basic problem is that the binaries allow you to
  overwrite their stacks. And if they allow that, then they allow
  the above exploit. It probably takes all of five lines of changes
  to some existing exploit, and some random program to find out
  where in the address space the shared libraries tend to be
  loaded.&rdquo;
  
In short, it's better to work first on developing a correct
  program that defends itself against buffer overflows. Then, after
  you've done this, by all means use techniques and tools like
  StackGuard as an additional safety net. If you've worked hard to
  eliminate buffer overflows in the code itself, then StackGuard is
  likely to be more effective because there will be fewer ``chinks
  in the armor'' that StackGuard will be called on to protect.

* No set-user-id Programs

  
An attacker targets set user id programs so that after the
  exploit he is the root, and can do arbitrary things. So, some
  &ldquo;people believe that if their program is not running suid
  root, they don't have to worry about security problems in their
  code, since the program can't be leveraged to achieve greater
  access levels. That idea has some merit, but is still a risky
  proposition. For one thing, you never know who is going to take
  your program and set the suid bit on the binary. When people
  can't get something to work properly, they get desperate. We've
  seen this sort of situation lead to entire directories of
  programs needlessly set setuid root.&rdquo;
  
&ldquo;There can also be users of your software with no
  privileges at all. That means any successful buffer overflow
  attack will give them more privileges than they previously had.
  Usually, such attacks involve the network. For example, a buffer
  overflow in a network server program that can be tickled by
  outside users may provide an attacker with a login on the
  machine. The resulting session has the privileges of the process
  running the compromised network service. This type of attack
  happens all the time. Often, such services run as root (and
  generally for no good reason other than to make use of a
  privileged low port). Even when such services don't run as root,
  as soon as a cracker gets an interactive shell on a machine, it
  is usually only a matter of time before the machine is "owned" --
  that is, the attacker gains complete control over the machine,
  such as root access on a UNIX box or administrator access on a
  Windows NT box. Such control is typically garnered by running a
  different exploit through the interactive shell to escalate
  privileges.&rdquo; [Quoted from
  http://www.ibm.com/developerworks/library/s-buffer-defend.html ]

* Modern Programming Languages

  
Most modern programming languages are essentially immune to
  this problem, either because they automatically resize arrays
  (e.g., Perl, and Java), or because they normally detect and
  prevent buffer overflows (e.g., Ada95 and Java). However, the C
  language provides no protection against such problems, and C++
  can be easily used in ways to cause this problem too.

* Static and Dynamically Allocated Buffers

  
The fact that a buffer is a fixed length may be exploitable.
  The basic idea is that the attacker sets up a really long string
  so that, when the string is truncated, the final result will be
  what the attacker wanted (instead of what the developer
  intended). Perhaps the string is catenated from several smaller
  pieces; the attacker might make the first piece as long as the
  entire buffer, so all later attempts to concatenate strings do
  nothing. Here are some specific examples:
    
1. Imagine code that calls
      =gethostbyname(3)= and, if successful, immediately
      copies =hostent-&gt;h_name= to a fixed-size buffer
      using strncpy or snprintf. Using strncpy or snprintf protects
      against an overflow of an excessively long fully-qualified
      domain name (FQDN), so you might think you're done. However,
      this could result in chopping off the end of the FQDN. This
      may be very undesirable, depending on what happens next.
    
    
1. Imagine code that uses =strncpy,
      strncat, snprintf,= etc., to copy the full path of a
      filesystem object to some buffer. Further imagine that the
      original value was provided by an untrusted user, and that
      the copying is part of a process to pass a resulting
      computation to a function. Now imagine that an attacker pads
      a path with a large number of '/'s at the beginning. This
      could result in future operations being performed on the file
      ``/''. If the program appends values in the belief that the
      result will be safe, the program may be exploitable. Or, the
      attacker could devise a long filename near the buffer length,
      so that attempts to append to the filename would silently
      fail.
    

An alternative is to dynamically reallocate all strings
  instead of using fixed-size buffers. This general approach is
  recommended by the GNU programming guidelines, since it permits
  programs to handle arbitrarily-sized inputs (until they run out
  of memory). The memory may even be exhausted at some other point
  in the program than the portion where you're worried about buffer
  overflows; any memory allocation can fail. Also, since dynamic
  reallocation may cause memory to be inefficiently allocated, it
  is entirely possible to run out of memory even though technically
  there is enough virtual memory available to the program to
  continue. In addition, before running out of memory the program
  will probably use a great deal of virtual memory; this can easily
  result in ``thrashing'', a situation in which the computer spends
  all its time just shuttling information between the disk and
  memory (instead of doing useful work). This can have the effect
  of a denial of service attack. Some rational limits on input size
  can help here. In general, the program must be designed to be
  fail safe when memory is exhausted.

* Careful Use of C/C++ Library Functions

  
C users must avoid using functions that do not check bounds
  unless they've ensured the bounds will never get exceeded.
  Functions to avoid in most cases include: =strcpy(3),
  strcat(3), sprintf(3), and gets(3)=. These should be replaced
  with functions such as =strncpy(3), strncat(3), snprintf(3),
  and fgets(3)= respectively, but see the discussion below. The
  function =strlen(3)= should be avoided unless you can
  guarantee that there will be a terminating NUL (ascii code zero)
  character to find. Other functions that may permit buffer
  overruns include =fscanf(3), scanf(3), vsprintf(3),
  realpath(3), getopt(3), getpass(3), streadd(3), strecpy(3),=
  and =strtrns(3)=.
  
Beware that calls to =strncpy(3)= and
  =strncat(3)= have somewhat surprising semantics and are
  hard to use correctly. E.g., the function strncpy(3) does not
  NUL-terminate the destination string if the source string length
  is at least equal to the destination's, so be sure to set the
  last character of the destination string to NUL after calling
  =strncpy(3)=. If you're going to reuse the same buffer
  many times, an efficient approach is to tell =strncpy()=
  that the buffer is one character shorter than it actually is and
  set the last character to NUL once before use. Both
  =strncpy(3)= and =strncat(3)= require that you pass
  the amount of space available. Neither provide a simple mechanism
  to determine /if/ an overflow has occurred. Finally,
  =strncpy(3)= has a significant performance penalty
  compared to the =strcpy(3),= because =strncpy(3)=
  NUL-fills the remainder of the destination.


* Newer Libraries
  
Newer libraries for C include the =strlcpy(3)= and
  =strlcat(3)= functions, with prototypes:
  <blockquote>
    <pre>
size_t strlcpy (char*dst, const char*src, size_t size);
size_t strlcat (char*dst, const char*src, size_t size);
</pre>
  </blockquote>
  
Both =strlcpy= and =strlcat= take the full size
  of the destination buffer as a parameter (not the maximum number
  of characters to be copied) and guarantee to NUL-terminate the
  result (as long as size is larger than 0). The =strlcpy=
  function copies up to =size-1= characters from the
  NUL-terminated string =src= to =dst=,
  NUL-terminating the result. The =strlcat= function appends
  the NUL-terminated string =src= to the end of
  =dst=. It will append at most =size - strlen(dst) -
  1= bytes, NUL-terminating the result.
  
One nuisance is that these two functions are not, by default,
  installed in most Unix-like systems.

* Compilation Solutions in C/C++

  
Newer compilers perform bounds-checking.  Such tools provide one
  more layer of defense, but it's not wise to depend on this technique
  as your sole defense. There are at least two reasons for
  this. First, most such tools only provide partial defense against
  buffer overflows (and the ``complete'' defenses are generally 10-30
  times slower); C and C++ were simply not designed to protect against
  buffer overflow. Second, for open source programs you cannot be
  certain what tools will be used to compile the program; using the
  default ``normal'' compiler for a given system might suddenly open
  security flaws.
  
StackGuard [Cowan et al. 1998] is a modification of the
  standard GNU C compiler gcc. StackGuard works by inserting a
  ``guard'' value (called a ``canary'', as in how this bird was
  used in mines) in front of the return address; if a buffer
  overflow overwrites the return address, the canary's value
  (hopefully) changes and the system detects this before using it.
  This is quite valuable, but note that this does not protect
  against buffer overflows overwriting other values (which they may
  still be able to use to attack a system).

* 201x GCC/Linux Solutions

  
When including =&lt;string.h>= strcpy() calls are
      changed to strcpy_chk(buffer, srcstring, sizeof(buffer)).

  
You get =***stack smashing detected***= unless the
    =-fno-stack-protector -D_FORTIFY_SOURCE=0= options are
    used.  A stack cookie is a random value put on the stack above the
    return address.  This "canary" is checked before returning from a
    given function.  This can be disabled with the gcc
    switch =-fno-stack-protector=.
  

  
There is a no-exec stack option turned on by default in the ELF
    file header; =execstack -s ./prg= disables this.  The
    equivalent gcc linker option is =-Wl,-z execstack=
  

  
The =-fmudflap= turns on array bounds checking and invalid
    heap use.  Set the MUDFLAP_OPTIONS environment variable to control the
    details. See
    http://gcc.gnu.org/wiki/Mudflap_Pointer_Debugging
  
    Add the following lines to =/etc/sysctl.conf=
 <pre>
   kernel.exec-shield = 2
   kernel.randomize_va_space = 2
 </pre>
  

    A value of 0 completely disables ExecShield and Address Space
    Layout Randomization; a value of 1 enables them only if the
    application bits for these protections are set to enable; a value
    of 2 enables them by default, except if the application bits are
    set to disable; a value of 3 enables them always, whatever the
    application bits.


From kernel/Documentation/sysctl/kernel.txt in
    the source code tree, 
randomize_va_space:
This option can be used to select the type of process address
space randomization that is used in the system, for architectures
that support this feature.

(0) - Turn the process address space randomization off.  This is the
default for architectures that do not support this feature anyways,
and kernels that are booted with the "norandmaps" parameter.

(1) - Make the addresses of mmap base, stack and VDSO page randomized.
This, among other things, implies that shared libraries will be
loaded to random addresses.  Also for PIE-linked binaries, the
location of code start is randomized.  This is the default if the
CONFIG_COMPAT_BRK option is enabled.

(2) - Additionally enable heap randomization.  This is the default if
CONFIG_COMPAT_BRK is disabled.

There are a few legacy applications out there (such as some ancient
versions of libc.so.5 from 1996) that assume that brk area starts
just after the end of the code+bss.  These applications break when
start of the brk area is randomized.  There are however no known
non-legacy applications that would be broken this way, so for most
systems it is safe to choose full randomization.

Systems with ancient and/or broken binaries should be configured
with CONFIG_COMPAT_BRK enabled, which excludes the heap from process
address space randomization.
  

* Lab Experiment

  <a href="lab-buffer-overflow.html"> Link to the lab
  &nbsp;&nbsp;&bull;&nbsp;&nbsp;
  <a href="BufferOverflowLabGS.html">Link to Grading Sheet 

* Acknowledgements

  
The section on "Techniques of Avoiding Buffer Overflow" is
  based on "Secure Programming for Linux and Unix HOWTO" and the
  "The Unix Secure Programming FAQ."

* References

  <ol>
    
1. Aleph One, "Smashing The Stack For Fun And Profit," Phrack, Vol 7,
   Issue 49, File 14 of 16, "http://www.phrack.com">
   www. phrack.com. A classic article.  The original paper, <a
   href="p49-14.txt">local copy, has a few inaccuracies; <a href=
   "alephOne.html">alephOne.html is the version of this paper with my
   corrections in place. Required Reading.
    
1. Parvez Anwar, "Buffer Overflows in the Microsoft Windows
   Environment", 2009, University of London, <a href=
   "https://www.ma.rhul.ac.uk/static/techrep/2009/RHUL-MA-2009-06.pdf">
   https://www.ma.rhul.ac.uk/static/ techrep/2009/RHUL-MA-2009-06.pdf
   Recommended reading.
    
1. Matt Conover, and WSD, "w00w00 on Heap Overflows", January 1999,
   Originally at "http://www.w00w00.org/files/articles/heaptut.txt";
   Highly recommended reading.
    
1. skape, Understanding Windows Shellcode, 
   http://nologin.org/Downloads/Papers/win32-shellcode.pdf, 2003.
    
1. Tim Werthmann and Horst Gortz, Survey on Buffer Overflow Attacks
   and Countermeasures, Ruhr-University Bochum, Germany, 2006,
   http://nds.hgi.rub.de/lehre/seminar/SS06/Werthmann_BufferOverflow.pdf
   Werthmann_BufferOverflow.pdf Highly recommended reading.
    
1. WikiPedia, <a href="http://en.wikipedia.org/wiki/Buffer_overflow">
   Buffer_overflow,
   <a href="http://en.wikipedia.org/wiki/Heap_overflow"> Heap_overflow,
   <a href="http://en.wikipedia.org/wiki/Uncontrolled_format_string">
   Uncontrolled_format_string, 
   <a href="http://en.wikipedia.org/wiki/Return-to-libc_attack">
   Return-to-libc_attack,
   <a href="http://en.wikipedia.org/wiki/Return-oriented_programming">
   Return-oriented_programming.  March 2012. All Required
   Reading.
    
1. Yves Younan, Wouter Joosen and Frank Piessens, "Runtime
   countermeasures for code injection attacks against C and C++
   programs ", ACM Computing Surveys , 44(3), 2012. Required Reading.

1. David A. Wheeler, "Secure Programming for Linux and Unix HOWTO,"
   2003, http://tldp.org/HOWTO/Secure-Programs-HOWTO/ Highly
   recommended reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
