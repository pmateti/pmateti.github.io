
# -*- mode: org -*-
#+date: 2017-09-22
#+TITLE: Buffer Overflow Exploits
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2017 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:0

[This is the Landing Page for Buffer Overflow.  We often spend 3 to 5
lectures on this topic.  Buffer Overflow is one of several code
injection techniques.  ]


* What Is Buffer Overflow?

2. The Buffer Overflow Error


* [[./bufovf-context.org][Buffer Overflow In Context]]

1. Educational Objectives

3. Buffer Overflow Exploits
4. Stack Smashing
5. Heap overflows versus stack overflows
6. Format String
7. Return to libc
8. Techniques of Avoiding Buffer Overflow
9. Non-executable user stack area
10. No set-user-id Programs
11. Modern Programming Languages
12. Static and Dynamically Allocated Buffers
13. Careful Use of C/C++ Library Functions
14. Newer Libraries
15. Compilation Solutions in C/C++
16. 201x GCC/Linux Solutions
19. References

* Overflow Attacks over the Years

* Heap Overflows

1. [[./heaptut-w00w00.txt]] tutorial by Matt Conover and w00w00 Security
   Team

* Intricacies of C Semantics
  1. What are "strings"? =char *p = "hello";= versus =char q[] =
     "hello";= .
  2. Address relationships =int x; int y;=
  3. Word alignment
  4. Standard Library: =libc strlen strcpy strcat=
  5. Files in [[./modret/]]

* Exploit Explanation by [[./AlephOne][AlephOne]]

** My "Improvements"
   1. [[./AlephOne/00-ReadMe.txt][00-ReadMe.txt]]
   1. [[./AlephOne/alephOne.html][alephOne.html]] the original Phrack article, with my "improvements"
   1. [[./AlephOne/phrack-p49-14.txt][phrack-p49-14.txt]] copy of the original Phrack article.

** Source Code of Examples

   1. [[./AlephOne/example1.c][example1.c]] illustrating stack layout
   1. [[./AlephOne/example2.c][example2.c]]
   1. [[./AlephOne/example3.c][example3.c]]
   1. [[./AlephOne/execsh.c][execsh.c]]
   1. [[./AlephOne/exit.c][exit.c]]
   1. [[./AlephOne/exploit1.c][exploit1.c]] misnamed; there is no exploit here
   1. [[./AlephOne/exploit2.c][exploit2.c]] misnamed; there is no exploit here
   1. [[./AlephOne/exploit3.c][exploit3.c]] misnamed; there is no exploit here
   1. [[./AlephOne/exploit4.c][exploit4.c]] misnamed; there is no exploit here
   1. [[./AlephOne/find-suid.sh][find-suid.sh]]
   1. [[./AlephOne/Makefile][Makefile]]
   1. [[./AlephOne/shellcode.c][shellcode.c]]
   1. [[./AlephOne/testsc.c][testsc.c]]
   1. [[./AlephOne/vulnerable.c][vulnerable.c]]

* Labs on Buffer Overflow

1. [[./Auditor/]] An old distribution from the Kali group.  This distro
   did not have buffer overflow exploit mitigations that are now
   (201x) common in Linux distros.

1. Virtual Machine setup to run Auditor.  VMware or Virtual Box.
1. auditor*.iso
1. [[./bufovf-labs.org][Labs on Buffer Overflow]]

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
