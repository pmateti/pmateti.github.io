<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-10-24 Thu 10:08 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Lab on Buffer Overflow Exploits</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Prabhaker Mateti" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../"> UP </a>
 |
 <a accesskey="H" href="../../../Top/index.html"> HOME </a>
</div><div id="preamble" class="status">
 2019-09-18 | <a href="../../"> ../../</a>
</div>
<div id="content">
<h1 class="title">Lab on Buffer Overflow Exploits</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org53cfb68">1. Background Knowledge</a></li>
<li><a href="#org653f13e">2. Tasks</a>
<ul>
<li><a href="#orgcf9964a">2.1. Task: Src Code Improvement [10 + 10 points]</a></li>
<li><a href="#orgf762d92">2.2. Task: Formal Methods Applied to AlephOne C Source Code (2 * 10 points)</a></li>
<li><a href="#orgc5d0d97">2.3. Task: Trying to Experience the Exploit [10 + 10 points]</a></li>
<li><a href="#org0e7c0b8">2.4. Task: Current Buffer Overflow Exploits [2 * 10 points]</a></li>
</ul>
</li>
<li><a href="#orgccdfacd">3. Tasks: [Bonus][Optional]</a></li>
<li><a href="#org5c22f94">4. Submission</a></li>
<li><a href="#org6d77d3d">5. References</a></li>
<li><a href="#orgaff45c2">6. End</a></li>
</ul>
</div>
</div>

<div id="outline-container-org53cfb68" class="outline-2">
<h2 id="org53cfb68"><span class="section-number-2">1</span> Background Knowledge</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>Bash: What is the "prompt string"?  How do you change it?  What is
the "environment"?  How does one process pass it to the next?  What
does <code>system("/bin/bash")</code> do?  What else can we substitute instead
of "/bin/bash"?  Why do <code>exploit[34].c</code> run <code>system("/bin/bash")</code>
at the end of <code>main()</code>?</li>

<li>Learn <code>gcc -ansi -pedantic -Wall</code> flags.</li>

<li>Your revised src code must be properly indented.  Learn to use
<code>indent -kr</code>.  You may need to do <code>sudo apt install indent</code>.</li>

<li>Understand thoroughly <a href="../C-intricacies.html">../C-intricacies.html</a>.  Look over the latest <a href="https://en.wikipedia.org/wiki/C18_(C_standard_revision)">C
language</a> standard.</li>

<li>Look up what "work journal" writing is.
<a href="https://www.google.com/search?q=writing+a+journal">https://www.google.com/search?q=writing+a+journal</a></li>
</ol>
</div>
</div>

<div id="outline-container-org653f13e" class="outline-2">
<h2 id="org653f13e"><span class="section-number-2">2</span> Tasks</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>Objective: Understand the stack smashing buffer exploit thoroughly.</li>
<li>[Study Guide] Look at past exams.  Several questions are based on
this lab.</li>
<li>Even though the sentences "Interpret the results.", "Report your
findings." and "Document your effort." are explicitly stated a few times below, it is implicit
in all of this lab.</li>
<li>The C src code files from AlephOne's article are collected here:
<a href="../AlephOne/">../AlephOne/</a></li>
</ol>
</div>



<div id="outline-container-orgcf9964a" class="outline-3">
<h3 id="orgcf9964a"><span class="section-number-3">2.1</span> Task: Src Code Improvement [10 + 10 points]</h3>
<div class="outline-text-3" id="text-2-1">
<ol class="org-ol">
<li>Improve the source code of <code>exploit4.c</code> of AlephOne so that there
are no warning messages from <code>gcc</code> even after using the <code>gcc -ansi
   -pedantic -Wall</code> flags.  This implies replacing asm-coding of
<code>get_sp()</code> with plain C code.  Name the revised source code
<code>exploit4revised1.c</code>.  Explain in a <code>exploit4revised1.txt</code> file the
changes you made.</li>

<li>Reduce the size of their <code>exploit4.c</code> compiled and linked binaries
by at least 5% as seen by the <code>size</code> command when exactly the same
flags are used in the compilation.  Make sure no functionality is
lost. E.g., do not just remove <code>printf</code>'s.  [Not easy.  Do your
best.]  Document your effort.  Name the revised source code
<code>exploit4revised2.c</code>.  Explain in a <code>exploit4revised2.txt</code> file the
changes you made.</li>

<li>Thoroughly describe your changes in the above two steps, and how
you verified that there was no loss of functionality.</li>
</ol>
</div>
</div>

<div id="outline-container-orgf762d92" class="outline-3">
<h3 id="orgf762d92"><span class="section-number-3">2.2</span> Task: Formal Methods Applied to AlephOne C Source Code (2 * 10 points)</h3>
<div class="outline-text-3" id="text-2-2">
<ol class="org-ol">
<li>For <code>exploit4.c</code> of Aleph One, give the (an?) (example) strongest
assertion that is valid just above the second for-loop.</li>

<li>Run <code>splint</code> on <code>exploit4.c</code> of Aleph One.  Revise the code of
<code>exploit4.c</code>, and adjust the flags of <code>splint</code> so that all errors
and warnings shown by <code>splint</code> are gone.  Name the revised source
code <code>exploit4revised3.c</code>.  Explain in a <code>exploit4revised3.txt</code>
file the changes you made.</li>

<li>Objective: Real goal of the above tasks is to study the code
thoroughly.</li>
</ol>
</div>
</div>

<div id="outline-container-orgc5d0d97" class="outline-3">
<h3 id="orgc5d0d97"><span class="section-number-3">2.3</span> Task: Trying to Experience the Exploit [10 + 10 points]</h3>
<div class="outline-text-3" id="text-2-3">
<ol class="org-ol">
<li>Background: The term "A modern Linux" used below refers to a Linux
installation from a distribution released in the last 12 months.</li>

<li>Background: There are now (201x) many preventive measures in place
that the AlephOne's <code>exploit[34]</code> no longer works in modern Linux
installations.  But, you can run an older distro, such as Auditor
2008, and experience the exploit.  <a href="../Auditor/vm-setup.html">../Auditor/vm-setup.html</a>
describes a setup using from the same group that develops Kali
Linux.  This is not easy because Auditor uses IDE HDD, not SATA.</li>

<li>Background: <a href="../modret/modReturnAddress-acer602-20080507.html">../modret/modReturnAddress-acer602-20080507.html</a> is a
record of notes taken during 2008, in a pre-Kali distro named
Auditor, running on an Acer TravelMate 602TER laptop.</li>

<li><p>
TBD Background: <a href="../modret/modReturnAddress-20191024.html">../modret/modReturnAddress-20191024.html</a> is a
record of notes taken recently, in a desktop PC running Kubuntu
Focal Fossa (development branch) { uname -a Linux sutherland
5.4.0-050400rc3-generic #201910132031 SMP Mon Oct 14 00:33:41 UTC
2019 x86<sub>64</sub> x86<sub>64</sub> x86<sub>64</sub> GNU/Linux}.
</p>

<p>
Auditor, running on an Acer TravelMate 602TER laptop.
</p></li>

<li>Background: Only the above, as-was, depends on Auditor.  All other
tasks can be done under a modern 64-bit or 32-but distro.</li>
</ol>


<ol class="org-ol">
<li>[10 points] Identify the details of the modern Linux in the
equipment used section of the Lab Report.  Produce a (similar)
record of notes of running modret.c on a modern Linux.
Interpret (the differences in) the results.  Can we "somehow" make
<code>testsc.c</code> work in a modern Linux?  Report your findings.</li>

<li>[2*5 points] See if the <code>exploit4</code> works on two suid-root programs
found within a modern Linux.  [Most likely you will not succeed.
Nevertheless, &#x2026;]  Report your findings.
Interpret the results.  [After ASLR, ROP lectures, we will try to
return to this topic of "experiencing a buffer overflow exploit".]</li>
</ol>
</div>
</div>

<div id="outline-container-org0e7c0b8" class="outline-3">
<h3 id="org0e7c0b8"><span class="section-number-3">2.4</span> Task: Current Buffer Overflow Exploits [2 * 10 points]</h3>
<div class="outline-text-3" id="text-2-4">
<ol class="org-ol">
<li>Background: Look over
<a href="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=Buffer+Overflow">https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=Buffer+Overflow</a>.</li>
</ol>


<ol class="org-ol">
<li>Report on two buffer overflow exploits/ attacks within the last 24
months.  Recall that there are alternate names for this exploit.
The report should be technically deeper than what you may find on
CNN, or <a href="https://www.cnet.com/">https://www.cnet.com/</a>, etc.  Aim for the level at least
that of typical articles of CVE.</li>
</ol>
</div>
</div>
</div>


<div id="outline-container-orgccdfacd" class="outline-2">
<h2 id="orgccdfacd"><span class="section-number-2">3</span> Tasks: [Bonus][Optional]</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>Background: Look over
<a href="https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=Buffer+Overflow">https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=Buffer+Overflow</a>.
Focus on last 24 months.</li>
</ol>


<ol class="org-ol">
<li>[25 points] Take an exploit reported above.  Study its CVE.  Demo
that the exploit works on a modern Linux.</li>

<li>[20 points] Improve <code>exploit4.c</code> to meet the latest <a href="https://en.wikipedia.org/wiki/C18_(C_standard_revision)">C language
standard</a>.</li>
</ol>
</div>
</div>

<div id="outline-container-org5c22f94" class="outline-2">
<h2 id="org5c22f94"><span class="section-number-2">4</span> Submission</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>Lookup the number x on the Course Home Page.  Point assignments are
shown in brackets.  There are bonus points for a "job well done"
even if you skipped the Bonus Tasks.</li>

<li>[10 points] You must follow the Lab Report Template.  There should
be a section on each of the tasks, and subsections on sub-tasks.
Include a couple of lines of an answer to each (implied/ explicit)
question/ discussion item.  Must number it as in this document.</li>

<li>Use good judgement and do not make the report way longer than, say,
20 pages. Submit explanations and code that verifies your answers.</li>

<li>[10 points] Include a journal.  By the hour.</li>

<li>This lab requires revisions of a few given source code files and
explanations. Include these in Lx.tbz.</li>

<li>Submit a PDF file named exactly <code>Report-Lx.pdf</code>, and a tarball
<code>Lx.tbz</code> [use <code>tar cfjvv Lx.tbz source-files*</code> ]. (Scripts are used
to check various things &#x2013; so file names should obey such "rules".)</li>
</ol>
</div>
</div>

<div id="outline-container-org6d77d3d" class="outline-2">
<h2 id="org6d77d3d"><span class="section-number-2">5</span> References</h2>
<div class="outline-text-2" id="text-5">
<ol class="org-ol">
<li>Prabhaker Mateti, Lecture Notes on Buffer Overflow, 2019.</li>
</ol>
</div>
</div>

<div id="outline-container-orgaff45c2" class="outline-2">
<h2 id="orgaff45c2"><span class="section-number-2">6</span> End</h2>
<div class="outline-text-2" id="text-6">
</div>
</div>
</div>
<div id="postamble" class="status">
<hr size=1>Copyright &copy; 2019 <a href="http://www.wright.edu/~pmateti">www.wright.edu/~pmateti</a> &bull; 2019-09-18
</div>
</body>
</html>
