# -*- mode: org -*-
#+date: 2018-10-18
#+TITLE: Lab on Buffer Overflow Exploits
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> %d"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Background Knowledge

1. Bash: What is the "prompt string"?  How do you change it?  What is
   the "environment"?  How does one process pass it to the next?  What
   does =system("/bin/bash")= do?  What else can we substitute instead
   of "/bin/bash"?  Why does =exploit[34].c= run =system("/bin/bash")= at
   the end of =main()=?

1. "A modern Linux" used below refers to a Linux installation from a
   distribution released in the last 12 months.  Identify its details
   in the equipment used section.

1. There are now (201x) many preventive measures in place that the
   AlephOne's =exploit[34]= no longer works in modern Linux
   installations.  But, you can run an older distro, such as Auditor
   2008, and experience the exploit.  [[./Auditor/vm-setup.html]]
   describes a setup using [[./Auditor/auditor-250405-01.iso]], from the
   same group that develops Kali Linux.

1. Even though the sentences "Interpret the results." and "Report your
   findings." are explicitly stated a few times below, it is implicit
   in all of this lab.

1. Answers to the above need not be included in the Lab Report.

1. Only Task 2.3 Subtask 3, as-was, depends on Auditor.  All other
   tasks can be done under a modern 64-bit or 32-but distro.  The new
   version of 2.3.3 asks to use a modern Linux.

* Tasks

Objective: Understand the stack smashing buffer exploit thoroughly.

** Task: GCC Should Not Complain [10 + 15 points]

1. Improve the source code of =exploit3.c= and =exploit4.c= of
   AlephOne so that there are no warning messages from =gcc= even
   after using the =gcc -ansi -pedantic -Wall= flags.  This implies
   replacing asm-coding of =get_sp()= with plain C code.

** Task: Size Reduction [25 points]

1. Reduce the size of their [ =exploit3.c= and =exploit4.c= ] compiled
   and linked binaries by at least 5% as seen by the =size= command
   when exactly the same flags are used in the compilation.  Make sure
   no functionality is lost. E.g., do not just remove =printf='s.  Not
   easy.  Do your best.  Document your effort.

1. Thoroughly describe your changes, and how you verified that there
   was no loss of functionality.  Include properly indented versions
   of your =exploit*.c= files.  Use =indent -kr=.

1. Real goal of this task is to study the code thoroughly.

** Task: Experience the Exploit [5 * 5 points]

1. [[./modret/modReturnAddress-acer602-20080507.html][modReturnAddress-acer602-20080507.html]] is a record of notes taken
   in Auditor running on my old Acer TravelMate 602TER laptop.
   Produce a (similar) record of notes of running modret.c on a modern
   Linux.  Interpret (differences in) the  results.

1. See if the =exploit3= works on the =vulnerable= program in a modern
   Linux.  Login as a non-root user.  Interpret the results.

1. Exploit an suid-root program found within +Auditor+ a modern Linux.
   Use either =exploit3= or =exploit4=.  Exclude =xterm=.  Try at
   least two suid-root programs.  Report your findings.  [After ASLR,
   ROP etc. lectures, we will return to this topic of "experiencing a
   buffer overflow exploit".]

1. Do the above within a modern Linux.  Most likely you will not
   succeed.  Nevertheless, report your findings.

1. Can we "somehow" make =testsc.c= work in a modern Linux?  Report
   your findings.

** Task: Current Buffer Overflow Exploits [25 points]

1. Search the web and report on at least two recent (within last 12
   months) buffer overflow exploits/ attacks.  Recall that there are
   alternate names for this exploit.  The report should be technically
   deeper than what you may find on CNN, https://www.cnet.com/, etc.
   Aim for the level at least that of typical articles of
   https://arstechnica.com/.


* Tasks: [Bonus][Optional]

1. [25 points] Take an exploit reported above.  Study its CVE.  Demo
   that the exploit works on a Linux installation of a recent (say,
   last 24 months) distro.

* Submission

1. Lab L4 Grading Sheet is superseded by this document.  Point
   assignments are shown in brackets.  There are bonus points for a
   "job well done" even if you skipped the bonus tasks.

1. You must follow the Lab Report Template. There should be a section
   on each of the tasks, and subsections on sub-tasks.  Include a
   couple of lines of an answer to each (implied/ explicit) question/
   discussion item.  Must number it as in this document.

1. Use good judgement and do not make the report way longer than, say,
   20 pages. Submit explanations and code that verifies your answers.

1. Include a journal.  By the hour.

1. This lab requires revisions of a few given source code
   files. Include the revised versions in L4.tbz.

1. Submit a PDF file named exactly =Report-L4.pdf=, and a tarball
   =L4.tbz= [use =tar cfjvv L4.tbz source-files*= ]. (Scripts are used
   to check various things -- so file names should obey such "rules".)

* References

1. Prabhaker Mateti, Lecture Notes on Buffer Overflow, 2018.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
