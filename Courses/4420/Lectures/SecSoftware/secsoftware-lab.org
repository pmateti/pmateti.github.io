# -*- mode: org -*-
#+date: 2020-09-30
#+TITLE: Lab: Software without Security Holes
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Overview

** Background

1. ShellShock:: Refresh your hold on =bash= syntax and usage.

1. Coding Guides:: For C and C++: Part of this course.  For Java: Not
   part of this course.  Become familiar with [[https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard][CERT Coding Guide on C]].

1. System Programs: mount, fusermount, sudo, su, passwd, chsh, ...  We
   expect these to be free of security holes.

1. Ordinary/ non-system programs/ utilities: cat, ls, date, make, and
   even login, bash, ash, dash, csh, zsh and other shells.

1. Background: Study FUSE documentation from within the kernel source tree:
   https://www.kernel.org/doc/Documentation/filesystems/fuse.txt, 


** Prerequisites for this Lab

1. =sudo= is a standard command present in all Linux distros already.
   In this lab, we will DIY build it.  Download the source code of the
   latest stable release of =sudo= from http://www.sudo.ws/sudo/.

1. Install =sudo apt install splint= Visit https://splint.org/
1. Install =sudo apt install valgrind= Visit http://valgrind.org/

* Tasks

** Task: Analyze sudo

4. Download the source code of =sudo=  Build it.  Read the included man
   page, not =man sudo=.  Check that it "works."  Submit details of
   how you checked.

5. Run =splint=, with no flags (except for include-related),
   collectively on all the source code files of =sudo=.  No need to
   insert its messages into the lab report.

6. Select /three/ interesting messages regarding source code errors
   generated by splint, and explain the messages and the causes for
   their generation.

** Task: Code Style

1. Holzmann's paper (see the References of [[../SecSoftware]]) presents "Ten Rules for
   Writing Safety Critical Code":
    1.  Restrict to simple control flow constructs.
    1.  Give all loops a fixed upper-bound.
    1.  Do not use dynamic memory allocation after initialization.
    1.  Limit functions to no more than 60 lines of text.
    1.  Use minimally two assertions per function on average.
    1.  Declare data objects at the smallest possible level of scope.
    1.  Check the return value of non-void functions, and check the
        validity of function parameters.
    1.  Limit the use of the preprocessor to file inclusion and simple macros.
    1.  Limit the use of pointers. Use no more than two levels of
        dereferencing per expression.
    1.  Compile with all warnings enabled, and use one or more source
        code analyzers.
1. List all violations of these rules that =sudo= makes.  Do this by
   manual inspection.  Or, write a script.

** Task: Experience Past Exploits: ShellShock

1. Background: Learn about ShellShock 2014 bug in =bash=.  Older
   versions of Bash can be tricked into executing arbitrary commands.
   Study these:
   1. https://en.wikipedia.org/wiki/Shellshock_(software_bug)
   2. https://www.sophos.com/hu-hu/lp/bash-shellshock.aspx

1. Check if bash, as is, in a modern Linux has this vulnerability.
   Include details of the bash version.  Describe in detail how you
   checked.  Develop a detection script.

1. Download a version claimed in the articles above as being
   vulnerable from http://ftp.gnu.org/gnu/bash/, which has older and
   current versions of bash.  Build it.  Rename the current
   =/bin/bash= as =/bin/bash-orig= .  Install the one you built as
   =/bin/bash=.  Verify that this version of bash has the
   vulnerability.  Include details of the bash version you installed.
   Describe in detail how you verified.  Develop a script that
   demonstrates.

** Task: System Program fusermount

1. Download from https://github.com/libfuse/libfuse.  Build it,
   following the [[https://github.com/libfuse/libfuse#installation][Installation]] guide.  Become familiar with its files.
   Understand [[https://github.com/libfuse/libfuse#security-implications][security-implications]].

1. Check that the just built fusermount works.  Describe in detail how
   you verified.  Develop a script that demonstrates.

** Task: CERT Coding Guides

1. Understand the following rules of [[https://wiki.sei.cmu.edu/confluence/display/c/SEI+CERT+C+Coding+Standard][CERT Coding Guide on C]].

   1. [[https://wiki.sei.cmu.edu/confluence/display/c/EXP39-C.+Do+not+access+a+variable+through+a+pointer+of+an+incompatible+type][EXP39-C]]. Do not access a variable through a pointer of an
      incompatible type
   2. [[https://wiki.sei.cmu.edu/confluence/display/c/EXP45-C.+Do+not+perform+assignments+in+selection+statements][EXP45-C]]. Do not perform assignments in selection statements

2. Analyze, manually, the source code of [[https://github.com/libfuse/libfuse/blob/master/util/fusermount.c][fusermount.c]] for any
   violations of the above rules.  Discover and explain at least two
   violations.



* Submission

1. You must follow the [[../Overview/labReports.html][Lab Report Template]].  There should be a section
   on each of the tasks.  A couple of lines of an answer to each
   (implied/ explicit) question/ discussion item.

1. Submit a PDF file named *exactly* =Report-L3.pdf=. (Scripts are
   used to check various things -- so file names should obey such
   "rules".)

* References

1. Prabhaker Mateti, [[../SecSoftware]] 2020. Required Reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
