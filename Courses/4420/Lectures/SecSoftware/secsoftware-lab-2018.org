# -*- mode: org -*-
#+date: 2018-09-18
#+TITLE: Lab: Software without Security Holes
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Overview

1. Objective: Introduce you to formal methods based tools.  Get you to
   think about secure programming some more.

** Prerequisite

1. Install splint: =sudo apt install splint=
1. Download the source code of the latest stable release of =sudo=
   from http://www.sudo.ws/sudo/.

* Tasks

Not all tasks are equal in difficulty.  Devote your time wisely on
what interests you most.  But, do not omit any task.


** Task: Effective Use of Splint

1. Answer the following questions.  Some of them are answered in the
   Splint manual.
1. What is an /assertion/? For =exploit4.c= of Aleph One, give an
   example assertion that you can place just above the second
   for-loop.
1. The C/C++ data type =char= can be used as an =int=.  (i) Is it
   signed or unsigned?  (ii) Are the types of p and q declared as in
   =char *p= and =char q[]= the same? (iii) Of the two signatures of
   typical main method of C programs shown here, which is to be
   preferred and why?
   1. =int main (unsigned int argc, char **argv, char ** envp)=
   2. =int main (unsigned int argc, char *argv[], char ** envp)=

1. Explain the meaning (in your own words, not by a cut-n-paste) of
   the Splint annotations shown in the following line of C code:
   : typedef /*@abstract@*/ /*@immutable@*/ int weekDay;

** Task: Analyze AlephOne C Files

1. The C src code files from AlephOne's article are collected here:
   [[../BufferOverflow/AlephOne/]]

3. Run =splint= on =exploit4.c= of Aleph One.  Revise the code of
   =exploit4.c=, and adjust the flags of =splint= so that all errors
   and warnings shown by =splint= are gone.  Include in the lab report
   the content of =exploit4Revised.c=.

** Task: Analyze sudo

4. Download the source code of the latest stable release of =sudo=
   from http://www.sudo.ws/sudo/.  Build it.  Read the included man
   page, not =man sudo=.  Check that it "works."  Submit details of
   how you checked.

5. Run =splint=, with no flags (except for include-related),
   collectively on all the source code files of =sudo=.  Insert all
   its messages into the lab report as an appendix.

6. Select /three/ interesting messages regarding source code errors
   generated by splint, and explain the messages and the causes for
   their generation.

** Task: RATS, valgrind, and Uno

1. Use the tools named RATS, valgrind, and UNO (Section Source Code
   Analysis of [[../SecSoftware]]) on the source code files and/or the sudo program built
   from the above.
   1. https://security.web.cern.ch/security/recommendations/en/codetools/rats.shtml
   2. http://valgrind.org/docs/manual/quick-start.html
   3. http://open-tube.com/10-free-tools-for-static-code-analysis/;
      [Optional] You ought to read this [[https://www.researchgate.net/publication/2564922_UNO_Static_Source_Code_Checking_for_UserDefined_Properties/download][PDF]] also.

1. Select and discuss five discoveries made by each of the tools.
   Total 15 items.
1. Write a comparative review of the tools.

** Task: Code Style

1. Holzmann's paper (see the References of [[../SecSoftware]]) presents "Ten Rules for
   Writing Safety Critical Code":
    1.  Restrict to simple control flow constructs.
    1.  Give all loops a fixed upper-bound.
    1.  Do not use dynamic memory allocation after initialization.
    1.  Limit functions to no more than 60 lines of text.
    1.  Use minimally two assertions per function on average.
    1.  Declare data objects at the smallest possible level of scope.
    1.  Check the return value of non-void functions, and check the
        validity of function parameters.
    1.  Limit the use of the preprocessor to file inclusion and simple macros.
    1.  Limit the use of pointers. Use no more than two levels of
        dereferencing per expression.
    1.  Compile with all warnings enabled, and use one or more source
        code analyzers.
1. List all violations of these rules that =sudo= makes.

* Tasks: [Bonus][Optional]

** Task: sudo keeps growing!

1. The tar ball sizes of a few sudo versions are shown
   below.  Summarize what has improved.  Explain the increase in size.

   1. =-rw-r--r-- 1 pmateti pmateti 0349785 2003= [[./sudo-1.6.7p5.tar.gz][sudo-1.6.7p5.tar.gz]]
   2. =-rw-r--r-- 1 pmateti pmateti 1608969 2012= [[http://www.sudo.ws/sudo/dist/sudo-1.8.4p4.tar.gz][sudo-1.8.4p4.tar.gz]]
   3. =-rw-rw-r-- 1 pmateti pmateti 2117145 2013= [[http://www.sudo.ws/sudo/dist/sudo-1.8.8.tar.gz][sudo-1.8.8.tar.gz]]
   4. =-rw-rw-r-- 1 pmateti pmateti 2976081 2017= [[https://www.sudo.ws/dist/sudo-1.8.21p2.tar.gz][sudo-1.8.21p2.tar.gz]]
   5. =-rw-rw-r-- 1 pmateti pmateti 3189951 2018= [[https://www.sudo.ws/dist/sudo-1.8.25p1.tar.gz][sudo-1.8.25p1.tar.gz]]

** Task: Improve the man pages of sudo

1. Study the different versions of the man pages of sudo that are in
   these tar balls.  Focus on the "seven sins of the specifier",
   namely, 1. Noise, 2. Silence: 3. Overspecification, 4. Contradiction, 5. Ambiguity, 6. Forward
   Reference, 7. Wishful Thinking (from Bertrand Meyer 1985).  Do you
   find that the man pages became better or worse over the years.
   Write up your findings.

* Submission

1. [[./SecSoftwareLabGS.html][Lab-1 Grading Sheet]]
1. You must follow the [[../Overview/labReports.html][Lab Report Template]].  There should be a section
   on each of the tasks.  A couple of lines of an answer to each
   (implied/ explicit) question/ discussion item.
1. Use good judgement and do not make the report way
      longer than, say, 20 pages.  Submit explanations and code that
      verifies your answers.
1. The Lab Report should include a section that describes the chosen
   LXU briefly, and a detailed section explaining the rationale behind
   the changes (what and why) you suggest.
1. Submit a PDF file named *exactly* =Report-L2.pdf=. (Scripts are
   used to check various things -- so file names should obey such
   "rules".)

* References

1. Prabhaker Mateti, [[../SecSoftware]] 2018. Required Reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
