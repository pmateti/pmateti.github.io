# -*- mode: org -*-
#+DATE: 2018-09-17
#+TITLE: Coding Style/ Format
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CS7140 Adv Software Engineering
#+HTML_LINK_UP: ../
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_HEAD: <style> P {text-align: justify} code, pre {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

1. Holzmann's paper (see the References) presents "Ten Rules for
   Writing Safety Critical Code":
    1.  Restrict to simple control flow constructs.
    1.  Give all loops a fixed upper-bound.
    1.  Do not use dynamic memory allocation after initialization.
    1.  Limit functions to no more than 60 lines of text.
    1.  Use minimally two assertions per function on average.
    1.  Declare data objects at the smallest possible level of scope.
    1.  Check the return value of non-void functions, and check the
        validity of function parameters.
    1.  Limit the use of the preprocessor to file inclusion and simple macros.
    1.  Limit the use of pointers. Use no more than two levels of
        dereferencing per expression.
    1.  Compile with all warnings enabled, and use one or more source
        code analyzers.

1. Gerard J. Holzmann, The Power of Ten -- Rules for Developing Safety
   Critical Code,'' IEEE Computer, June 2006, pp. 93-95
   http://spinroot.com/gerard/pdf/P10.pdf Required Reading.
   
* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
