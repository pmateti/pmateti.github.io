<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<title>Harden a Linux System</title>
<!-- 2018-10-10 Wed 20:19 -->
<meta  http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta  name="generator" content="Org-mode" />
<meta  name="author" content="Prabhaker Mateti" />
<meta  name="description" content="CEG4420/6420 Course"
 />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: 'sh'; }
  pre.src-bash:before  { content: 'sh'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-R:before     { content: 'R'; }
  pre.src-perl:before  { content: 'Perl'; }
  pre.src-java:before  { content: 'Java'; }
  pre.src-sql:before   { content: 'SQL'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]>*/-->
</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="content">
<h1 class="title">Harden a Linux System</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1. Hardening a Linux System: Abstract</a></li>
<li><a href="#sec-2">2. Educational Objectives</a></li>
<li><a href="#sec-3">3. Introduction</a></li>
<li><a href="#sec-4">4. (Linux) Security Updates</a></li>
<li><a href="#sec-5">5. Hardening Ideas</a></li>
<li><a href="#sec-6">6. Security Enhancements in the Linux Kernel</a></li>
<li><a href="#sec-7">7. Building a Linux Kernel</a></li>
<li><a href="#sec-8">8. Case Study: Hardening an FTP + NFS + Web Server</a></li>
<li><a href="#sec-9">9. Lab Experiment on Harden</a></li>
<li><a href="#sec-10">10. Reading List</a></li>
</ul>
</div>
</div>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1"><span class="section-number-2">1</span> Hardening a Linux System: Abstract</h2>
<div class="outline-text-2" id="text-1">
<p>
We distinguish <i>hardening</i> a system from proper <i>configuration</i> and
<i>fortification</i>.  Carefully adjusting various parameters after an
out-of-the-box install is configuration.  Installing or uninstalling
various packages using the OS native tools and mechanisms, such as
apt-get in Debian/ Ubuntu, is fortification.  Hardening refers to
areas of security tightening during the design and construction of
systems rather than after their deployment.  In this lecture, we learn
howto harden an out-of-the-box installation into a more secure Linux
system.
</p>
</div>
</div>

<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2"><span class="section-number-2">2</span> Educational Objectives</h2>
<div class="outline-text-2" id="text-2">
<p>
Students should be able to
</p>

<ol class="org-ol">
<li>Distinguish hardening from proper configuration and fortification
of a system.
</li>

<li>Become familiar with the vast space of hardening a system.
</li>

<li>Apply selected hardening steps that takes an out-of-the-box Linux
system and turns it into a more secure system
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3"><span class="section-number-2">3</span> Introduction</h2>
<div class="outline-text-2" id="text-3">
<p>
We distinguish hardening a system from proper configuration and
fortification.  In this lecture, we describe areas of tightening
security during the design and construction of systems rather than
after their deployment.  This distinction is not common yet.  There
exist several "hardening" scripts, e.g., Bastille, that just help do
proper configuration.
</p>

<p>
There are "secure operating systems" and "trusted operating systems."
Alas, no one can offer technically rigorous definitions for these
terms.  Windows NT, and several of Unix derivatives claimed, over the
years, to be secure and trusted.  For example, we found the following
quote, early 2000s, "Windows NT is a secure operating system but only
if it's configured correctly." Nevertheless, operating systems that
lay claim to either being secure or trusted are better designed and
engineered from their inception with a concern for security.
</p>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4"><span class="section-number-2">4</span> (Linux) Security Updates</h2>
<div class="outline-text-2" id="text-4">
<ol class="org-ol">
<li>CVE-2013-2888, Crashing the system via DoS, Privilege Escalation,
Information leak
</li>
<li><a href="http://www.debian.org/security/">http://www.debian.org/security/</a> Look at the section marked Recent
Advisories.
</li>

<li><a href="http://seclists.org/fulldisclosure/">http://seclists.org/fulldisclosure/</a>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5"><span class="section-number-2">5</span> Hardening Ideas</h2>
<div class="outline-text-2" id="text-5">
<p>
The space of hardening a system is vast.  It includes new ideas yet to
be implemented in widely used OS (e.g., Windows, and Linux).  It
includes re-designing and re-implementing existing ideas such as
"change-roots".  It includes analyzing the source code of an OS
extremely carefully by experts as well as via software tools based on
mathematical proof techniques.  The next few sections introduce these
ideas further.
</p>
</div>

<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1"><span class="section-number-3">5.1</span> Careful Recompilation</h3>
<div class="outline-text-3" id="text-5-1">
<p>
Stack smashing (buffer overflow) attacks are among the most common.  By
and large, these are programming errors that can be caught by
analytical techniques.  Newer compilers are mechanizing these
techniques.  See the Buffer Overflow Attacks and Development of Software
without Secure Holes  articles.
</p>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2"><span class="section-number-3">5.2</span> Least Privilege</h3>
<div class="outline-text-3" id="text-5-2">
<p>
On Linux systems, the user called root or super user, with user-id 0,
can bypass (nearly) all security restrictions.  Windows systems have
the "System" and "Administrator" accounts.  The super user privilege
should be split into many smaller privileges.  E.g., a backup process
should be able to read any file, but it should not be able to shut
down the system, modify files, or send network packets.  Processes, not
users, should be given privileges.  The backup process should be
permitted to read all files, even though the root user who invokes the
program should not be allowed such access.  The backup process should
not be able to pass its privileges down to processes that it
starts.  The use of such finely divided abilities instead of sweeping
powerful mechanisms is called the <i>least privilege</i> principle.
</p>

<p>
The traditional Unix model allows for access control of only
files.  So, a number of resources become "files": processes, hard
disks, network interfaces, etc.  In order to apply the principle of
least privilege, we also need to divide the resources into finer units
(often called objects, but unrelated to OOP).  The users and processes
are called subjects.
</p>
</div>
</div>

<div id="outline-container-sec-5-3" class="outline-3">
<h3 id="sec-5-3"><span class="section-number-3">5.3</span> Capabilities</h3>
<div class="outline-text-3" id="text-5-3">
<p>
Capabilities is a word used with different meanings in the context of
OS design.  In OS research literature, processes hold tokens, called
capabilities, denoting resources to be accessed and what can be done
with them.  Capabilities can be explicitly passed among
processes.  Linux, and Windows are not capability based in this
sense.  This usage of the word is unrelated to "POSIX capabilities"
which are implemented in Linux and described later.
</p>
</div>
</div>

<div id="outline-container-sec-5-4" class="outline-3">
<h3 id="sec-5-4"><span class="section-number-3">5.4</span> Mandatory Access Control</h3>
<div class="outline-text-3" id="text-5-4">
<p>
An OS can control access by attaching <i>sensitivity labels</i> (SLs) to
objects (files, processes, network interfaces, packets, and so on).
E.g., incoming network packets can be assigned SLs, based on the
source IP address or the network interface.  Outgoing packets can have
the label of the process that created them.  A filtering rule can then
be formulated so that packets can be dropped if the SL does not
satisfy some conditions.  When inheritance of privileges is not
assumed, this is known as <i>mandatory access control</i>.
</p>
</div>
</div>

<div id="outline-container-sec-5-5" class="outline-3">
<h3 id="sec-5-5"><span class="section-number-3">5.5</span> Role-Based Access Control</h3>
<div class="outline-text-3" id="text-5-5">
<p>
An OS can divide the privileges based on the function ("role") they
have, such as backup, file system integrity check, filtration of
incoming packets.  Each user is permitted a collection of roles.  RBAC
can implement MAC.  There is a considerable amount of discrete
mathematics developed for RBAC and MAC.
</p>
</div>
</div>

<div id="outline-container-sec-5-6" class="outline-3">
<h3 id="sec-5-6"><span class="section-number-3">5.6</span> Source Code Review</h3>
<div class="outline-text-3" id="text-5-6">
<p>
Source code review, both by human experts and automated software tools
based on mathematical proof techniques, can reveal
vulnerabilities.  See the Secure Coding article.
</p>
</div>
</div>

<div id="outline-container-sec-5-7" class="outline-3">
<h3 id="sec-5-7"><span class="section-number-3">5.7</span> Check Thyself</h3>
<div class="outline-text-3" id="text-5-7">
<p>
We must always assume that there can be (many unknown) ways of
corrupting a kernel, running processes and loaded libraries.  So kernel
should include an integrity checking system which would check the
integrity of kernel, while running, using crypto algorithms.
</p>
</div>
</div>

<div id="outline-container-sec-5-8" class="outline-3">
<h3 id="sec-5-8"><span class="section-number-3">5.8</span> Mutual authentication: init v kernel</h3>
<div class="outline-text-3" id="text-5-8">
<p>
In spite of file system audits, suppose we have a rogue kernel that
was loaded through the OS loader (such as Grub).  How can we detect?
Similarly, suppose the <code>/sbin/init</code> was replaced.  The conceptual
answer is to mutually authenticate using MD5 and SHA1 sums.
</p>
</div>
</div>

<div id="outline-container-sec-5-9" class="outline-3">
<h3 id="sec-5-9"><span class="section-number-3">5.9</span> Scope of ptrace(2)</h3>
<div class="outline-text-3" id="text-5-9">
<p>
Through the <code>ptrace(2)</code> system call one process (the "tracer") may
observe and control the execution of another process (the "tracee"),
and examine and change the tracee's memory and registers.  It is
primarily used to implement breakpoint debugging and system call
tracing.  A single user is able to examine the memory and running
state of any of their own processes.  By compromising one
application process, an attacker can attach to other running processes
(a web browser e.g.) to extract credentials and continue to expand the
scope of their attack without resorting to user-assisted phishing.
Since ptrace is not used by non-developers and non-admins, system
builders should disable this debugging system on "normally" deployed
systems.
</p>

<p>
Some applications (e.g., ssh-agent) use <code>prctl(PR-SET-DUMPABLE, ...)</code> to
specifically disallow such ptrace attachment ), but many
do not. A more general solution is to only allow ptrace directly from a
parent to a child process (i.e. direct "gdb EXE" and "strace EXE" still
work), or with CAP-SYS-PTRACE (i.e. "gdb &#x2013;pid=PID", and "strace -p PID"
still work as root).
</p>
</div>
</div>


<div id="outline-container-sec-5-10" class="outline-3">
<h3 id="sec-5-10"><span class="section-number-3">5.10</span> Trusted OS Loader</h3>
<div class="outline-text-3" id="text-5-10">
<p>
TrustedGRUB <a href="http://projects.sirrix.com/trustedgrub">http://projects.sirrix.com/trustedgrub</a> extends the GRUB
bootloader with TCG support.  This makes it possible to provide a
secure bootstrap architecture.  The whole boot process is measured
and - by support of a Trusted Platform Module (TPM) - the system
integrity is verifyable.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6"><span class="section-number-2">6</span> Security Enhancements in the Linux Kernel</h2>
<div class="outline-text-2" id="text-6">
<p>
Whereas the previous section described hardening ideas in general,
this section is a summary of security enhancements of the Linux kernel
that have occurred over the years.  Most of these are now (2013) part
of the officially released Linux kernel source code tree.
</p>

<p>
Many groups offer open source patches to Linux kernel prevent various
attacks.  Each patch has its own limitations and side effects.
Patches released in binary form should in general be not trusted.
Linux patches are source code.  These replace section(s) of code in
the kernel source code tree.  Often a patch is in response to a newly
discovered security hole.  There are proactive modifications also.
Open Wall Linux (<a href="http://www.openwall.com/Owl/">http://www.openwall.com/Owl/</a>), e.g., is a collection
of patches for non-executable stack, temporary file race condition
prevention, restricted proc file system, special handling of file
descriptors 0, 1, 2, destroy shared memory segments not in use,
enforce RLIMITNPROC on execve, and privileged IP aliases.
</p>
</div>

<div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1"><span class="section-number-3">6.1</span> POSIX capabilities</h3>
<div class="outline-text-3" id="text-6-1">
<p>
POSIX capabilities (Pcaps) can turn a setuid-root file into a file
with minimum privileges, run a daemon with uid=0 but with amost no
superuser privileges, etc.  Privileges are granted to processes
instead of users.    The table
below presents Pcaps for a few typical suid-root binaries.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">ping</td>
<td class="left">CAP-NET-RAW (13)</td>
</tr>

<tr>
<td class="left">traceroute</td>
<td class="left">CAP-NET-RAW (13)</td>
</tr>

<tr>
<td class="left">chsh</td>
<td class="left">CAP-CHOWN (0), CAP-DAC-READ-SEARCH (2), CAP-FSETID (4), CAP-SETUID (7)</td>
</tr>

<tr>
<td class="left">chfn</td>
<td class="left">CAP-CHOWN (0), CAP-DAC-READ-SEARCH (2), CAP-FSETID (4), CAP-SETUID (7)</td>
</tr>

<tr>
<td class="left">chage</td>
<td class="left">CAP-DAC-READ-SEARCH (2)</td>
</tr>

<tr>
<td class="left">passwd</td>
<td class="left">CAP-CHOWN (0), CAP-DAC-OVERRIDE (1), CAP-FOWNER (3)</td>
</tr>

<tr>
<td class="left">mount</td>
<td class="left">CAP-DAC-OVERRIDE (1), CAP-SYS-ADMIN (21)</td>
</tr>

<tr>
<td class="left">umount</td>
<td class="left">CAP-DAC-OVERRIDE (1), CAP-SYS-ADMIN (21)</td>
</tr>
</tbody>
</table>

<p>
Pcaps are implemented in Linux kernels since 2.6.x; <code>capsh, getpcaps,
getcap, setcap</code> are some of the tools.  E.g., to reduce the privileges
of the nomrallu suid-ed chsh, run <code>chmod u-s /usr/bin/chsh; setcap
0,2,4,7=ep /usr/bin/chsh</code>
</p>
</div>
</div>

<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2"><span class="section-number-3">6.2</span> Linux Namespaces</h3>
<div class="outline-text-3" id="text-6-2">
<p>
A namespace of a process is a collection of "names" associated with
processes and pids, files, volumes, mount table, the network stack
(ports, sockets, interfaces), etc.  A single call <code>unshare(2)</code> creates a
new namespace for the current process (see also <code>man unshare</code>).
</p>

<p>
The following namespaces are available.
</p>

<ol class="org-ol">
<li><code>mount namespace</code> mounting and unmounting filesystems will not affect
rest of the system 
</li>

<li><code>UTS namespace</code> setting hostname, domainname will not affect rest of
the system
</li>

<li><code>IPC namespace</code> process will have independent namespace for System
message queues, semaphore sets and shared memory segments
</li>

<li><code>network namespace</code> process will have independent IPv4 and IPv6
stacks, IP routing tables, firewall rules, the /proc/net and
/sys/class/net directory trees, sock‐ ets etc.
</li>
</ol>

<p>
As an example use of namespaces, consider routing.  The set of network
interfaces and routing tables are shared across the entire OS and all
processes.  With network namespaces, different and separate instances
of "the network" can be made.
</p>

<p>
The <code>unshare(1)</code> command 
starts a child process with the mount, UTS, IPC or network namespaces
"unshared" from its parent.   The <code>systemd</code> uses mount namespaces for the
ReadWriteDirectories, ReadOnlyDirectories or InaccessibleDirectories
unit configuration options, and for systemd-nspawn.
</p>
</div>
</div>

<div id="outline-container-sec-6-3" class="outline-3">
<h3 id="sec-6-3"><span class="section-number-3">6.3</span> Hardening the System Calls</h3>
<div class="outline-text-3" id="text-6-3">
<p>
REMUS (REference Monitor for UNIX Systems [Bernaschi et al. 2002]) is
a kernel patch which intercepts system calls without requiring changes
to syntax and semantics of existing system calls.  REMUS presents a
complete classification of the system calls according to the level of
threat.
</p>
</div>
</div>

<div id="outline-container-sec-6-4" class="outline-3">
<h3 id="sec-6-4"><span class="section-number-3">6.4</span> Seccomp (Secure Computing Mode)</h3>
<div class="outline-text-3" id="text-6-4">
<ol class="org-ol">
<li>Sandboxing mechanism in the kernel
</li>
<li>After a process starts, a one-way transition into a state
where no system calls except <code>exit, sigreturn,
    read, write</code> and <code>close</code> are permitted.
</li>
<li>Attempts to other system calls, will <code>SIGKILL</code> the process.
</li>
<li>Process enters <code>seccom</code> via <code>prctl()</code> system call
</li>
<li>Programs using this: OpenSSH, vsftpd, Chrome, &#x2026;
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-6-5" class="outline-3">
<h3 id="sec-6-5"><span class="section-number-3">6.5</span> Control Groups (cgroups)</h3>
<div class="outline-text-3" id="text-6-5">
<p>
A cgroup is a collection of processes that are bound by the same
criteria to limit, police and account the resource usage Compared to
the <code>nice</code> prefix command or <code>/etc/security/limits.conf</code>, cgroups are
more flexible.  The kernel source tree has
Documentation/cgroups/cgroups.txt
</p>
</div>
</div>

<div id="outline-container-sec-6-6" class="outline-3">
<h3 id="sec-6-6"><span class="section-number-3">6.6</span> Linux Security Modules (LSM)</h3>
<div class="outline-text-3" id="text-6-6">
<p>
The Linux Kernel Security Module (LSM) is a kernel framework that
enables many different access control models as loadable kernel
modules.  Currently (2013), the Linux kernel source tree has AppArmor,
SELinux, SMACK, TOMOYO, Yama, and Unix DAC (Discretionary Access
Controls).  LSM may become stackable in future.
</p>

<p>
AppArmor associates assigns a security profile to each program that
restricts the capabilities of that program.  It supplements the
traditional discretionary access control (DAC) model with mandatory
access control (MAC).  Ubuntu uses apparmor by default, and the
profiles are located in <code>/etc/apparmor*</code>
</p>

<p>
SELinux (Security-Enhanced Linux) is a contribution by the National
Security Agency.  It restricts the actions that programs can take.
AppArmor identifies file system objects by path name instead of inode.
This means that, for example, a file that is inaccessible may become
accessible under AppArmor when a hard link is created to it, while
SELinux would deny access through the newly created hard link.  On the
other hand, data that is inaccessible in SELinux may become accessible
when applications update the file by replacing it with a new version, a
frequently used technique, while AppArmor would continue to deny access
to the data.  In both cases, a default policy of "no access" avoids
the problem.
</p>

<p>
Smack consists of three components: a MAC LSM, a startup script that
ensures that device files have the correct Smack attributes and loads
the Smack configuration, and a set of patches to the GNU Core
Utilities package to make it aware of Smack extended file attributes.
Smack was/is used in the mobile OSs named MeeGo and Tizen.
</p>

<p>
TOMOYO is a name-based MAC LSM, as opposed to inode based security.
"Every process is created to achieve a purpose, and like an
immigration officer, TOMOYO Linux allows each process to declare
behaviours and resources needed to achieve their purpose. When
protection is enabled, TOMOYO Linux acts like an operation watchdog,
restricting each process to only the behaviours and resources allowed
by the administrator." [from TOMOYO's web site]
</p>

<p>
Yama extends DAC support with additional system-wide security
settings.  Currently available is ptrace scope restriction.  Further
information can be found in Documentation/security/Yama.txt.
</p>
</div>
</div>

<div id="outline-container-sec-6-7" class="outline-3">
<h3 id="sec-6-7"><span class="section-number-3">6.7</span> Chroot Restrictions</h3>
<div class="outline-text-3" id="text-6-7">
<p>
Every process has a current working directory that it begins with and
a root directory, which is used to resolve the absolute path names of
files.  By default, the root directory of a process is /.  Chroot system
call changes the directory that is considered the root of a
process.  All subsequent absolute path names of a file are resolved
with respect to the new root.  The process cannot access files that are
outside of the tree rooted at the new root directory, even in the
presence of hard or symbolic links.  Such a process is said to be in a
chroot jail.  Server daemons, such as anonymous FTP server, and web
server, where the processes need only access to a limited sub tree,
are run inside a chroot jail for security reasons.  Unfortunately,
weaknesses exist, and a jailed super user process can break out of
it.  Linux chroot restricts only the real (e.g., persistent storage
media) file system access of the processes in the jail.  Using
interprocess communication mechanisms such as domain sockets, shared
memory segments, and signals, a jailed process can damage the rest of
the system.
</p>

<p>
By exploiting <code>chroot, chdir, fchdir</code> system calls, an attacker with
root privileges can break chroot jail.  None of the three system calls
check to make sure that current working directory (cwd) is within the
root directory of the process.  When a process calls chroot, the root
directory of the process is changed but cwd is left unchanged.  If
process has a directory open, which is outside the root directory, it
can call fchdir to that directory and the cwd of the process changes
to that directory.  Once the cwd goes out of the root directory of the
process, the process is successful in breaking the chroot jail.
</p>
</div>
</div>

<div id="outline-container-sec-6-8" class="outline-3">
<h3 id="sec-6-8"><span class="section-number-3">6.8</span> Grsecurity</h3>
<div class="outline-text-3" id="text-6-8">
<p>
Grsecurity [Spender 2003] uses the least privilege principle.  Some of
the features of Grsecurity are Trusted Path Execution, Process-based
Mandatory Access Control, Access control lists, chroot restrictions,
randomizing PIDs, IP IDs, TCP initial sequence numbers, and FIFO
restrictions.
</p>

<p>
Traditionally, a "trusted path" is one where the parent directory is owned
by root and is neither group nor others writable.  A file is said to
be in the trusted path only if the directory of the file is owned by
root and it has neither group nor others writable permissions.  TPE
works based on an internal list of trusted user ids.  If a given user
tries to execute a file not in the Trusted Path, and their user id is
not in the kernels trusted list, they are denied execution privileges.
This is known as Trusted Path Execution.
</p>

<p>
The RBAC Mandatory Access Control system of grsecurity was the
inspiration for SELinux and AppArmor.  Grsecurity is "coupled" with
PaX in how its source code is distributed.
</p>
</div>
</div>

<div id="outline-container-sec-6-9" class="outline-3">
<h3 id="sec-6-9"><span class="section-number-3">6.9</span> PaX Address Space Protection</h3>
<div class="outline-text-3" id="text-6-9">
<p>
PaX invented ASLR.  PaX patches provide: Segmentation-based
implementation of non-executable pages; Mprotect restrictions prevent
new code from entering a task; Randomization of stack and mmap base;
Randomization of heap base; Randomization of executable base;
Randomization of kernel stack; Automatically emulate sigreturn
trampolines; No ELF .text relocations; No kernel modification via
/dev/mem, /dev/kmem, or /dev/port; Option to disable use of raw I/O;
Removal of addresses from <code>/proc/*/maps</code> and <code>/proc/*/stat</code>.
</p>
</div>
</div>


<div id="outline-container-sec-6-10" class="outline-3">
<h3 id="sec-6-10"><span class="section-number-3">6.10</span> Buffer Overflow Attack Prevention</h3>
<div class="outline-text-3" id="text-6-10">
<p>
There have been patches including Open Wall Linux patch, Segmented-
PAX [Team 2003], KNOX [Purczynski 2003a], RSX module [Starzetz 2003],
Paging-PAX, and Exec shield.  All these source code patches aim to
prevent stack and heap execution at kernel level by using either
segmentation logic or paging logic or both.  See the Buffer Overflow
article also.
</p>
</div>
</div>

<div id="outline-container-sec-6-11" class="outline-3">
<h3 id="sec-6-11"><span class="section-number-3">6.11</span> Linux Security Modules (LSM)</h3>
<div class="outline-text-3" id="text-6-11">
<ol class="org-ol">
<li>AppArmor confines individual programs to a set of listed files and
posix 1003.1e draft capabilities.
</li>
<li>AppArmor: Name-based Access Controls
</li>

<li><a href="http://sourceforge.net/projects/realtime-lsm/">http://sourceforge.net/projects/realtime-lsm/</a> The Realtime Linux
Security Module (LSM) selectively grants realtime permissions to
specific user groups or applications.
</li>

<li>Enforcer Linux Security Module (LSM) The Enforcer is a Linux
Security Module designed to improve integrity of a computer
running Linux by ensuring no tampering of the filesystem.  It can
interact with TCPA hardware to provide higher levels of assurance
for software and sensitive data.  <a href="http://enforcer.sourceforge.net/">http://enforcer.sourceforge.net/</a>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-6-12" class="outline-3">
<h3 id="sec-6-12"><span class="section-number-3">6.12</span> Secure Linux containers</h3>
<div class="outline-text-3" id="text-6-12">
</div><div id="outline-container-sec-6-12-1" class="outline-4">
<h4 id="sec-6-12-1"><span class="section-number-4">6.12.1</span> What is a Container?</h4>
<div class="outline-text-4" id="text-6-12-1">
<ol class="org-ol">
<li>Lightweight virtual OSs running inside Linux
</li>
<li>Not a virtual machine like VirtualBox or VMware
</li>
<li>A container is a group of processes in a "box"
<ol class="org-ol">
<li>Inside the box, it looks like a VM.
</li>
<li>Outside the box, it looks like normal processes.
</li>
<li>"chroot on steroids"
</li>
</ol>
</li>
<li>Process isolation
</li>
<li>Name space isolation
</li>
<li>What is a Hypervisor?
</li>
<li>Example container software: LXC, Docker, OpenVZ.org
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-6-12-2" class="outline-4">
<h4 id="sec-6-12-2"><span class="section-number-4">6.12.2</span> LXC on Ubuntu</h4>
<div class="outline-text-4" id="text-6-12-2">
<ol class="org-ol">
<li><a href="https://help.ubuntu.com/lts/serverguide/lxc.html">https://help.ubuntu.com/lts/serverguide/lxc.html</a>
</li>
<li><code># apt-get install lxc</code>
</li>
<li>KVM is a virtual machine running on Linux kernel.
Relies on assistance from the CPU .
Uses paravirtualization to reduce overhead.
</li>

<li>LXC v Xen:   Both are light weight virtual OS, not VM
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-6-13" class="outline-3">
<h3 id="sec-6-13"><span class="section-number-3">6.13</span> Linux Memory Forensics</h3>
<div class="outline-text-3" id="text-6-13">
<ol class="org-ol">
<li><code>% ls -l /proc/sys/vm</code>
</li>
<li>Keep kernel details confidential? <code>% ls -l /boot</code>
</li>
</ol>
<div class="org-src-container">

<pre class="src src-bash">-rw-r--r-- 1 root    root     1007311 Oct  2 19:19 abi-3.11.0-11-lowlatency
-rw-r--r-- 1 root    root      163504 Oct  2 19:19 config-3.11.0-11-lowlatency
-rw-r--r-- 1 root    root    26228945 Oct 17 23:33 initrd.img-3.11.0-11-lowlatency
-rw------- 1 root    root     3310511 Oct  2 19:19 System.map-3.11.0-11-lowlatency
-rw------- 1 root    root     5674032 Oct  2 19:19 vmlinuz-3.11.0-11-lowlatency
</pre>
</div>
</div>
</div>

<div id="outline-container-sec-6-14" class="outline-3">
<h3 id="sec-6-14"><span class="section-number-3">6.14</span> Intrusion Detection/ Prevention</h3>
<div class="outline-text-3" id="text-6-14">
<p>
No matter what design enhancements have been made, we should be
prepared for intrusion, and hence must have OS functionality that can
detect things.
</p>

<p>
Linux Intrusion Detection System (LIDS), is a a series of kernel
patches that enable loadable module and mount point locking.  Its
focus is on Access Control Lists.  LIDS features include enhancements
to Linux capabilities, protecting important files, protecting Raw I/O
devices, protecting important processes, and port scan detector at the
kernel level.  
</p>

<p>
Snort is an open source network intrusion prevention and detection
system (IDS/IPS) combining signature, protocol, and anomaly-based
inspection.  "Snort can perform protocol analysis and content
searching/matching. It can be used to detect a variety of attacks and
probes, such as buffer overflows, stealth port scans, CGI attacks, SMB
probes, OS fingerprinting attempts, and much more. It uses a flexible
rules language to describe traffic that it should collect or pass, as
well as a detection engine that utilizes a modular plug-in
architecture. Snort has a real-time alerting capability as well,
incorporating alerting mechanisms for syslog, a user specified file, a
UNIX socket, or WinPopup messages to Windows clients. Snort has three
primary uses: a straight packet sniffer like tcpdump, a packet logger
(useful for network traffic debugging, etc), or a full-blown network
intrusion prevention system." [from <a href="http://www.snort.org/">http://www.snort.org/</a>]
</p>

<p>
The snort can easily belong in Fortification.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7"><span class="section-number-2">7</span> Building a Linux Kernel</h2>
<div class="outline-text-2" id="text-7">
</div><div id="outline-container-sec-7-1" class="outline-3">
<h3 id="sec-7-1"><span class="section-number-3">7.1</span> FYI Tar-ball sizes of Linux Kernels</h3>
<div class="outline-text-3" id="text-7-1">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="left" />

<col  class="left" />
</colgroup>
<tbody>
<tr>
<td class="left">du -sh ./linux-3.4-rc7/</td>
<td class="left">June 2012</td>
<td class="left">520 MB</td>
</tr>

<tr>
<td class="left">du -sh ./linux-3.10.2/</td>
<td class="left">July 2013</td>
<td class="left">573MB</td>
</tr>

<tr>
<td class="left">du -sh ./linux-3.11.6/</td>
<td class="left">Oct 2013</td>
<td class="left">586MB</td>
</tr>
</tbody>
</table>
</div>
</div>

<div id="outline-container-sec-7-2" class="outline-3">
<h3 id="sec-7-2"><span class="section-number-3">7.2</span> The Files We Build</h3>
<div class="outline-text-3" id="text-7-2">
<ol class="org-ol">
<li>vmlinuz
</li>
<li>initrd
</li>
<li>modules, in the hundreds
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-7-3" class="outline-3">
<h3 id="sec-7-3"><span class="section-number-3">7.3</span> Build Overview</h3>
<div class="outline-text-3" id="text-7-3">
<ol class="org-ol">
<li><code>% make xconfig</code> This will take only a few seconds.
</li>

<li><code>% xconfig</code> Select the various kernel components carefully.  (This
can take an hour or more depending on your familiarity.)  Requires
your interaction and understanding.  There are many to choose by
answering y/n/m; y = yes make it part of the kernel, n = no omit it
altogether, m = build it as a module.  Make sure that everything
needed for boot is in the kernel image and not as a module.  You may
have to web search for details.  Click on Save before quitting
xconfig.  The config file you produced is the plain ascii text file
(not recommended to edit this by hand): <code>linux/.config</code>
</li>
<li><code>% make bzImage modules</code> This can take 30+ minutes on an i7.  You
can insert extra flags for make (e.g., <code>-j32</code>) to speed up the
build.  Does not require your interaction.  
</li>

<li><code># make install</code> This (i) locates and copies the <code>bzImage, config</code>
and <code>System.map</code> files into the <code>/boot</code> directory; (ii) locates and
copies all the modules (*.ko) also onto the LXU into
<code>/lib/modules/</code> version-number-of-kernel.
</li>

<li><code># grub-update</code> Revise the <code>/boot/grub/menu.lst</code> on the
Linux-on-USBD appropriately so that the machine can be booted with
the newly built kernel.
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-7-4" class="outline-3">
<h3 id="sec-7-4"><span class="section-number-3">7.4</span> Pruning the Kernel</h3>
<div class="outline-text-3" id="text-7-4">
<ol class="org-ol">
<li>Building a custom kernel with just the needed components
<ol class="org-ol">
<li>Pruning device drivers, file systems, &#x2026;
</li>
</ol>
</li>
<li>Disable Loadable Kernel Modules (LKM)
<ol class="org-ol">
<li><code>/boot/vmlinuz</code> has all the "modules" merged in by choosing
either y/n but never an "m" in the <code>% xconfig</code>
</li>
<li><code>/lib/modules/this-version-of-kernel</code> will be empty
</li>
</ol>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-7-5" class="outline-3">
<h3 id="sec-7-5"><span class="section-number-3">7.5</span> Building a Secure Linux Kernel</h3>
<div class="outline-text-3" id="text-7-5">
<p>
The following is a list, based on kernel version 3.12 (Nov 2013), of
the various security related choices you can make using the <code>xconfig</code>
tool in building a custom kernel.  Note that not all items mentioned
in Security Enhancements in the Linux Kernel have made it into the
official kernel source tree.
</p>

<ol class="org-ol">
<li>Select the security module that will be used by default if the
kernel parameter <code>security</code> is not specified.  Choices: SELinux
Simplified Mandatory Access Control (DEFAULT-SECURITY-SMACK) TOMOYO
(DEFAULT-SECURITY-TOMOYO) AppArmor (DEFAULT-SECURITY-APPARMOR) Yama
(DEFAULT-SECURITY-YAMA) Unix Discretionary Access Controls
(DEFAULT-SECURITY-DAC)
</li>

<li>Restrict unprivileged access to the kernel syslog
(SECURITY-DMESG-RESTRICT) This enforces restrictions on
unprivileged users reading the kernel syslog via dmesg(8).
</li>

<li>Enable the securityfs filesystem (SECURITYFS) It is currently used
by the TPM BIOS character driver and IMA, an integrity provider.  It
is not used by SELinux or SMACK.
</li>

<li>Security hooks for pathname based access control (SECURITY-PATH)
</li>

<li>NSA SELinux Support (SECURITY-SELINUX) You will also need a policy
configuration and a labeled filesystem.
</li>

<li>Simplified Mandatory Access Control Kernel Support (SECURITY-SMACK)
Smack is useful for sensitivity, integrity, and a variety of other
mandatory security schemes.
</li>

<li>TOMOYO Linux Support (SECURITY-TOMOYO) This selects TOMOYO Linux,
pathname-based access control.
</li>

<li>AppArmor support (SECURITY-APPARMOR) This enables the AppArmor
security module.  Required userspace tools.  AppArmor policy is
stored in a set of files in <code>/etc/apparmor.d/</code>.
</li>

<li>Yama support (SECURITY-YAMA) Yama extends discretionary access
controls (DAC) support with additional system-wide security
settings beyond regular Linux DAC.
</li>

<li>Digital signature verification using multiple keyrings
(INTEGRITY-SIGNATURE) It defines separate keyrings for each of the
different use cases: evm, ima, and modules.  Different keyrings
improves search performance, but also allow to "lock" certain
keyring to prevent adding new keys.
</li>

<li>Enables integrity auditing support (INTEGRITY-AUDIT) In addition to
enabling integrity auditing support, this option adds a kernel
parameter <code>integrity-audit</code>, which controls the level of integrity
auditing messages.
</li>

<li>Enable asymmetric keys support (INTEGRITY-ASYMMETRIC-KEYS) This
option enables digital signature verification using asymmetric
keys.
</li>

<li>Integrity Measurement Architecture(IMA) (IMA) The Trusted Computing
Group(TCG) runtime IMA maintains a list of hash values of
executables and other sensitive system files, as they are read or
executed.  We can then discover if an attacker manages to change
the contents of an important system file being measured.  If your
system has a TPM chip, then IMA also maintains an aggregate
integrity value over this list inside the TPM hardware, so that the
TPM can prove to a third party whether or not critical system files
have been modified.
</li>

<li>Extended Verification Module (EVM) validates security-sensitive
extended attributes before allowing operations on the files.
</li>

<li>Asymmetric public-key crypto algorithm subtype
(ASYMMETRIC-PUBLIC-KEY-SUBTYPE) This option provides support for
asymmetric public key type handling.  If signature generation
and/or verification are to be used, appropriate hash algorithms
(such as SHA-1) must be available.  ENOPKG will be reported if the
requisite algorithm is unavailable.  RSA public-key algorithm
(PUBLIC-KEY-ALGO-RSA) 
(X509-CERTIFICATE-PARSER) 
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8"><span class="section-number-2">8</span> Case Study: Hardening an FTP + NFS + Web Server</h2>
<div class="outline-text-2" id="text-8">
<ol class="org-ol">
<li>Disable unneeded system calls after initialization.
</li>
<li>Cannot reenable.
</li>

<li>Read-Only File System: Attackers with root privileges can have
access to any file.  He can also access raw devices and corrupt
the file system on it.  We should mount important file volumes as
read-only.  But the ordinary mount cannot securely accomplish that
because of access to raw devices.  A read-only file system must
disable file-write system calls and this would also prevent
modifying file system through raw devices.
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9"><span class="section-number-2">9</span> Lab Experiment on Harden</h2>
<div class="outline-text-2" id="text-9">
<p>
You may wish to do this experiment on your own home PC.  Except for the
steps that replace files in /boot, you do not need to be logged in as
root.
</p>

<ol class="org-ol">
<li>Download the latest bundle of source code of Linux from
<a href="https://www.kernel.org/">https://www.kernel.org/</a> pub/ linux/ kernel/ v3.0/ Unpack it into
some-directory-of-yours/linux-version-number, and establish a
symbolic link named <code>linux</code> to it.
</li>

<li>Select any 5 components from the list of Building a Secure Linux
Kernel.  Build your kernel.
</li>

<li>Reboot into the new kernel booting from the Linux-on-USBD.  Verify
that LXU works properly when its original kernel is replaced by
this one.
</li>

<li>Develop a quick demo that demonstrates the enhanced security of the kernel.
</li>

<li>Bonus Points: Recompile the Linux kernel omitting all features
unnecessary for us.  Merge all needed drivers etc into the kernel.
That is, loadable modules, and initrd are not needed any more.
Verify that LXU works properly when its original kernel is
replaced by this one.  
</li>

<li>Bonus Points: Recompile the Linux kernel, but using a compiler
other than gcc, omitting all features unnecessary for us.  Do keep
the kernel module structure intact.  Verify that LXU works properly
when its original kernel is replaced by this one.
</li>

<li>Describe in detail your kernel config and observations.
</li>
</ol>

<p>
TBD Link to HardenOSLab Grading Sheet
</p>
</div>
</div>

<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10"><span class="section-number-2">10</span> Reading List</h2>
<div class="outline-text-2" id="text-10">
<ol class="org-ol">
<li>Required Readings are a must read.  These are sources of exam
questions.
</li>
<li>Recommended Readings bring more insight into the topic.  But exam
questions will not be derived from these.
</li>
<li>Some of our "readings" are actually web site visits.
</li>
</ol>
</div>

<div id="outline-container-sec-10-1" class="outline-3">
<h3 id="sec-10-1"><span class="section-number-3">10.1</span> Required Reading  (10 hrs)</h3>
<div class="outline-text-3" id="text-10-1">
<ol class="org-ol">
<li><a href="http://kernelnewbies.org/">http://kernelnewbies.org/</a> Become familiar with the nature and
scope of this website.
</li>

<li><a href="https://help.ubuntu.com/community/Kernel/Compile">https://help.ubuntu.com/community/Kernel/Compile</a> is a howto on
Linux kernel builds.  A simpler description was given above in the
lab procedure.  But that method does not make the "dpkg" subsystem
aware of the new kernel.
</li>

<li>Sowgandh S.  Gadi, Security Hardened Kernels for Linux Servers,
<a href="http://cecs.wright.edu/">http://cecs.wright.edu/</a> ~pmateti/ GradStudents/ SunilGadi/
sgadi-ms-slides.pdf Slides from his MS Thesis.
</li>

<li><a href="http://security.stackexchange.com/">http://security.stackexchange.com/</a> Become familiar with the nature
and scope of this website.
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-10-2" class="outline-3">
<h3 id="sec-10-2"><span class="section-number-3">10.2</span> Recommended Reading</h3>
<div class="outline-text-3" id="text-10-2">
<ol class="org-ol">
<li>Sowgandh S.  Gadi, Security Hardened Kernels for Linux Servers,
<a href="http://cecs.wright.edu/">http://cecs.wright.edu/</a> ~pmateti/ GradStudents/ SunilGadi/
sgadi-ms-thesis.pdf MS Thesis, 2004, Advisor: Prabhaker Mateti,
Wright State U.
</li>

<li>Karthik Mohanasundaram, Security Hardening of the Process init of
Linux, MS Thesis, 2004.  Advisor: Prabhaker Mateti, Wright State
U.
</li>
<li>AppArmor Documentation <a href="http://wiki.apparmor.net/index.php/Documentation">http://wiki.apparmor.net/index.php/Documentation</a>
</li>
</ol>
</div>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class="author">Author: Prabhaker Mateti (<a href="mailto:pmateti@wright.edu">pmateti@wright.edu</a>)</p>
<p class="date">Date: </p>
<p class="creator"><a href="http://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="http://orgmode.org">Org</a> mode 8.2.10)</p>
<p class="validation"><a href="http://validator.w3.org/check?uri=referer">Validate</a></p>
</div>
</body>
</html>
