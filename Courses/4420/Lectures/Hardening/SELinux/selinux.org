# -*- mode: org -*-
#+DATE: 2017-08-15
#+TITLE: SELinux (Security Enhanced Linux) LSM Module
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:1
#+HTML_LINK_HOME: ../../
#+HTML_LINK_UP: ../
#+DESCRIPTION: WSU CEG 4900/6900 Android Internals and Security
#+HTML_HEAD: <style> P {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d <a href=\"../../Top/\"> TOP</a> | <a href=\"nsa-se-slides.html\"> Slides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2017 %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> %d"))
#+STYLE: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STARTUP:showeverything
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.4)

1. Background: LKM, and LSM; DAC and MAC
1. SELinux is an implementation of MAC as an LSM for Linux
1. AVC == Access Vector Cache of SELinux

** SEL
1. Disables root user priviledges
1.  Several administrative roles with limited extra privileges
1.  Example: Changing passwords does not require root access to
    setting up firewalls


1.  Multi-level security: Declassified, Secret, Top-Secret, etc.
   1.  In MLS, only a trusted declassifier can lower the secrecy
       of a file
   1.  Users with appropriate privilege can read classified files,
       but cannot output their contents to lower secrecy levels

* SELinux Simplied View

1. Recall MAC: Subjects (active entities, e.g., processes), verbs
   (e.g., read),
   objects (passive entities, e.g., files)

#+ATTR_HTML: :margin-left auto :margin-right auto :width 80%
   [[./Figures/se-linux-simple-view.png]] 

** SELinux Example #1

1. process #31337 wishes to read-open /etc/passwd: simplified
   view\\ 
#+ATTR_HTML: :align center :width 80%
   [[./Figures/dac-mac-flow1.png]]

** SELinux Example #2  More Details of #1

1. process #31337 wishes to read-open /etc/passwd: more details\\
#+ATTR_HTML: :align center :width 80%
   [[./Figures/dac-mac-flow2.png]]

** SELinux Architecture
2. SELinux has hooks located at strategic points within the kernel code

#+CAPTION: SELinux Architecture
#+ATTR_HTML: :align center :width 80%
   [[./Figures/1-core.png]]

* SELinux on Ubuntu

1. SELinux is default on RedHat.  Ubuntu distribution uses AppArmor
   instead; but, you can =apt-get install selinux=
2. Config files on Ubuntu:
   1. =/etc/selinux/*=, 60+ files 
   2. =/etc/selinux.d/ubuntu/*= 50+ files


** SELinux Modes

   1. In =/etc/selinux/config= file, =SELINUX=enforcing= or =disabled,
      permissive=

   1. Enforcing: policy is loaded. Your machine is actively protected.

   2. Permissive: policy file is loaded, but SELinux is /not enforcing/
      it.  Accesses will be logged but not
      prevented.  This mode is intended for testing and debugging.
   3. Disabled: SELinux infrastructure is not enabled. No policy file
      loaded.  Log files are not generated.

** Context Labels

1. A label is a string of four values: user-identity, role, type,
   sensitivity (the last can be missing) [separated by colons]
   1. Ex: /etc/shadow: =system_u:object_r:shadow_t=
   2. Ex: process: =root:staff_r:staff_t=
   3. 100+ types, such as device-type, process-type, file-system-type,
      network type, IPC type, ...

3. Labels encapsulate all security attributes of an object. Labels are
   interpreted by the SELinux Security Server in the kernel and by
   =libselinux= in user space.
5. The rest of the kernel code and user space view labels as opaque data.
6. New security attributes can be added to labels without having to
   recompile applications or redesign core SELinux code.

** SELinux Architecture Diagrams

1. 
#+CAPTION: SELinux Architecture Diagram
#+ATTR_HTML: :align center :width 80%
   [[./Figures/selinux architecture.png]]

1.
#+ATTR_HTML: :align center :width 80%
#+CAPTION: selinux-init
   [[./Figures/selinux-init.jpg]]
1. =selinux_init= files\\
#+ATTR_HTML: :align center :width 80%
   [[./Figures/selinux-init-hooks.jpg]]

** SELinux Policies

1.  Written in a SELinux-specific language.

1. SELinux Policy IDE is an integrated development environment
   for SELinux developed by http://oss.tresys.com/


* SELinux Critique
1. Writing SELinux config files is complicated.

5. Smack LSM was designed in response to the complexity of
   SELinux. Smack is now part of Tizen, a mobile OS.  Not
   well-respected.  See HackerNews.

1. Is SELinux crap?
   http://forums.fedoraforum.org/showthread.php?t=288584 Comments by a
   frustated Linux user.


* References

1. http://source.android.com/devices/tech/security/se-linux.html
   Validating Security-Enhanced Linux in Android.  Required Reading.

2. Richard Haines, =The_SELinux_Notebook-4th_Edition.pdf=, 400pp;
   Legit download? search the web for links; Pretty good.

3. Stephen Smaley, "Security Enhanced (SE) Android: Bringing Flexible
   MAC to Android." [[./SEAndroid-NDSS2013-pm-tab.pdf]] NDSS 2013 paper,
   with a few of my annotations. Slides: [[./seandroid-Presentation02_4.pdf]]

4. Red Hat, [[./state-of-selinux-moore-2015.pdf]] Aug 2015 Short
   presentation.  Recommended Reading.

** References #2

5. Bill McCarty, SELinux NSA's Open Source Security Enhanced Linux,
   O'Reilly Media, Formats: Print Safari Books Online, October 2004
   Pages: 258 Print ISBN:978-0-596-00716-4 | ISBN 10:0-596-00716-7

6. http://www.linux.com/learn/docs/727873-overview-of-linux-kernel-security-features/
   2013 Good overview.  Highly recommended reading.

8. https://www.youtube.com/watch?v=KoK42DsKEtc Defcon 21 - Defeating SEAndroid
9. http://www.electronicsweekly.com/eyes-on-android/what-is/what-is-security-enhanced-se-android-2013-03/
   2013 Overview. Light reading.  Recommended.
10. Stephen Smaley, http://kernsec.org/files/lss2015/lss2014_androidtcb_smalley.pdf Recommended Reading.

1. http://www.linuxnix.com/2012/09/basics-of-selinux-in-linux.html 2012

1. http://www.cse.psu.edu/~trj1/cse544-s13/slides/cse544-selinux.pdf
   40+ slides, 2013, Trent Jaeger Systems and Internet Infrastructure
   Security (SIIS) Lab Computer Science and Engineering Department
   Pennsylvania State University

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
