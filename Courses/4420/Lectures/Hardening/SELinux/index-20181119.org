
# -*- mode: org -*-
#+date: 2018-11-16
#+TITLE: SELinux Intro
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | <a href=./>NoSlides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Overview

1. Prerequisite:  DAC and MAC 
1. Linux includes DAC by default.
1. SELinux is a MAC, installed by choice in Linux distros.  Others are
   AppArmour, etc.
1. SELinux is the default MAC in Android.
1. SELinux can limit the power of the superuser/ root.
1. SELinux is considered by many to be too difficult to learn within a
   week.  We are trying! (in this course)
1. "Security. Hardening. Compliance. Policy. The Four Horsemen of the
   SysAdmin Apocalypse."

* Where Does SELinux Fit in DAC+MAC?

** SysCalls in the Presence of LSM

#+CAPTION: LSM steps in User mode to Kernel Mode
#+ATTR_HTML: :alt LSM Access :title LSM :width 50%
[[./Figures/lsm-access.jpg]]

1. Process with a security id SSec is trying to access (1) the file
   with the security id TSec.
1. The kernel consults LSM module (3)
1. The user specific security is implemented as a function "f".
1. The kernel will then grant/ deny access to the resource (4).

** Permission Granted?

#+CAPTION: Subject Action Object [AVC Access Vector Cache]
#+ATTR_HTML: :alt DAC to MAC flow :title LSM :width 100%
[[./Figures/sel-subj-obj.png]]

** SEL Example: Read /etc/passwd

#+CAPTION: DAC to MAC flow: Subject Action Object
#+ATTR_HTML: :alt DAC to MAC flow :title LSM :width 100%
[[./Figures/dac-mac-sel1.png]]

** SEL Example: More Details of Read /etc/passwd

#+CAPTION: DAC to MAC flow: Subject Action Object
#+ATTR_HTML: :alt DAC to MAC flow :title LSM :width 100%
[[./Figures/dac-mac-sel2.png]]

** SEL Block Diagram

[[./Figures/sel-arch.png]]


** SE Android

#+CAPTION: SE Android
#+ATTR_HTML: :alt LSM Access :title LSM :width 100%
[[./Figures/seandroid-timeline.jpg]]

* SELinux Conceptual Overview

1. Disables root user priviledges
   1.  Several administrative roles with limited extra privileges
   1.  Example: Changing passwords does not require root access to setting up firewalls

1.  Multi-Level Security: Declassified, Secret, Top-Secret, etc.
   1.  In MLS, only a trusted declassifier can lower the secrecy
       of a file
   1.  Users with appropriate privilege can read classified files,
       but cannot output their contents to lower secrecy levels

1. Idea: Extend or restrict user/ process rights with a "role".

1. Idea: Assign a "label" to everything: files, directories, programs,
   processes, network ports, ...


** Role-Based Access Control (RBAC)

1. https://wiki.gentoo.org/wiki/SELinux/Role-based_access_control Do a
   quick read.  Must.


** RBAC-SEL-Example #1

2. User named =ta= should be permitted to browse the web, grade labs,
   and administer a web server.
1. Create a role for each, with different privileges
2. =grader= role should not have network access, except to blackboard
   etc. sofwtare.
3. =browsing= role should not have access to files within local
      directory
4. =webadmin= role should not access students’ labs, etc.
5. More details in SEL Policy language, later.  TBD link.

** RBAC-SEL-Example #2

1. =userlevel1= should be permitted to read a secret file.
1. Transition to a secret role to do this.  This role is restricted:
       1.  Cannot write to the network
       1.  Cannot write to declassified files
1.  Secret files cannot be read in a declassified role

** RBAC-SEL-Example #3

1. Should not let this file =notontheweb.xyz= to go out on the internet.
1. Create secret-file role with no network access
1. Process cannot change roles, only exit
1. Process can read secret files
1. Can this this policy be expressed in Linux DAC permissions?
   1. "On a Linux system, one can make most, if not all, of its
      behavior based on role assignment done through group membership
      and group privileges."

** SELinux Policies

1. SEL Technical Words: subjects, objects, and (actions) verbs

2. Roles may also have policy restrictions on who/ when/ how roles
   are changed.  Not just anyone (or any program) can get privileges.

3. When a user or process requests access to a resource (for example,
   when opening a file), SELinux uses three items to determine whether
   to allow access.
   1. the type of access requested,
   2. the security context of the process, and 
   3. the security context of the requested resource


1. The security context of a process, commonly called a domain,
   determines what the process can do (what it can access, and what
   actions it can take). Users have security contexts too; a user’s
   security context can be viewed and set using the semanage tool.
   The security context of an object, commonly called a type, is
   similar to the security context of a user or process. It represents
   what the security attributes of the object are; that affects which
   users and processes security contexts can access the object (and how).

* SELinux Design Overview

1.  Linux Security Modules (LSM) API: Dozens of access control hooks
    all over the kernel;  see =include/linux/security.h=
1.  Linux also adds opaque "security" pointer that LSM can use to
    store security metadata in processes, inodes, sockets, etc.

1.  A process reads the inode
   1.  VFS function calls LSM hook, with inode and task pointer
   1.  LSM reads policy rules from inode

1.  Suppose the file requires a role transition for read
   1.  LSM hook modifies task’s security data to change its role
   1.  Then read allowed to proceed
        Problem: Persistence
1.  All of these security hooks are great for in memory data
    structures, e.g., VFS inodes
1.  How do you ensure the policy associated with a given
   file persists across reboots?  Extended Attributes
1.  In addition to standard Linux attributes, associate a small
    key+value store with an on-disk inode
   1.  User can tag a file with arbitrary metadata
   1.  Key must be a string, prefixed with a domain: User, trusted,
       system, security

** Types

1. Objects are given a specific "type": actions on the object. E.g.,
   Socket: create, listen, send, recv, close.  Type includes ACLs
   based on roles
1.  Device types:
   1.  =agp_device_t= - AGP device (/dev/agpgart)
   1.  =mouse_device_t= - Mouse (/dev/mouse)
1.  File types:
   1.  =fs_t= - Defaults file type
   1.  =bin_t= - Files in /bin

1. /proc types
   1.  =proc_t= - /proc and related files
   1.  =sysctl_t= - /proc/sys and related files


** Extended Attributes (XATTR)

1. File systems that support extended attributes: ext2/3/4, ...

1. All ACLs, type information, etc. are stored in extended
   attributes for persistence.
1. Each file must be labeled for MAC enforcement.


* SELinux Installation and Exploration

** Prerequisites for this Section

1. Understood: DAC, MAC and SELinux.  Terminology: Subject, Object,
   Action.  Roles, Labels and Types.

** Installed SELinux

1. Caution: Improperly configured, SELinux may not permit the
   completion of a boot.  Drastic measure to fix: Interact with Grub,
   and in the =linux ...= line insert =selinux=0= and press F10.  Or
   boot from a multi boot USBD of Lab L1, and edit files in
   =hddroot/etc/selinux/=.

1. The following steps assume your are installing on Ubuntu.

1. Done  =apt purge apparmor=.  Must remove --purge apparmor.  =reboot=

1. Done =apt install selinux-*= [hyphen-asterisk]. May take a minute
   or two. Done =apt install
   selinux= [no-hyphen-no-asterisk].  Check what your prof installed
   on his machine: [[./sel-dpkg-list.txt]]
1. Configured selinux.  In text file =/etc/selinux/config=, the
   following line =SELINUX=permissive= should be the only line setting
   SELINUX.

1. =reboot= -ed successfully.

** After the Reboot

   #+begin_src bash
root@Milner:~# sestatus
SELinux status:                 enabled
SELinuxfs mount:                /sys/fs/selinux
SELinux root directory:         /etc/selinux
Loaded policy name:             default
Current mode:                   permissive
Mode from config file:          permissive
Policy MLS status:              enabled
Policy deny_unknown status:     allowed
Memory protection checking:     requested (insecure)
Max kernel policy version:      31

root@Milner:~# getenforce
Permissive
#+end_src

1. The Grub menu that booted this session will have =security=selinux
   selinux=1= in it.

1. Re-Configure selinux.  In text file =/etc/selinux/config=, change the
   following line =SELINUX=permissive= to =SELINUX=enforcing=

1. The command =setenforce Enforcing= enforces selinux. The command
   =setenforce Permissive= flips selinux to being permissive.

** More TBD

1. https://wiki.gentoo.org/wiki/SELinux/


** Explore SELinux Files As-Is

1. =dpkg -L selinux= lists where the files from package named selinux
   were installed.


* Labs on SELinux

1. [[./selinux-lab.org]]  Required Lab
1. SELinux vs AppArmor Optional Lab;  Read
   https://www.reddit.com/r/linuxadmin/comments/9a0khb/selinux_vs_apparmor/


* Figures WIP

[[./Figures/sel-init-hooks.png]]

[[./Figures/sel-init-out.jpg]]

[[./Figures/sel-objmgr-avc-hooks.jpg]]


* References

1. https://wiki.gentoo.org/wiki/SELinux/ This is part of Gentoo Linux
   wiki, but applicable to other Linux distros.  Has several useful
   URLs.  Recommended Reading.

1. http://selinuxproject.org/page/FAQ   Recommended Reading.

1. RedHat, [[https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/pdf/selinux_users_and_administrators_guide/Red_Hat_Enterprise_Linux-7-SELinux_Users_and_Administrators_Guide-en-US.pdf][SELinux Users and Admin Guide]] 2018, PDF 189 pp. Reference

1. http://www.cse.psu.edu/~trj1/cse543-f07/slides/03-PolicyConcepts.pdf
   SELinux Policy Concepts and Overview, 2005, 28 slides  Recommended Reading.

1. http://www.cse.psu.edu/~trj1/cse443-s12/docs/ch9.pdf Building a
   Secure Operating System for Linux.    Recommended Reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
  
