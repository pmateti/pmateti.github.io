# -*- mode: org -*-
#+DATE: 2015-08-15
#+TITLE: Linux Security Modules and NSA SELinux/SEAndroid
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:1
#+HTML_LINK_HOME: ../../
#+HTML_LINK_UP: ../
#+DESCRIPTION: WSU CEG 4900/6900 Android Internals and Security
#+HTML_HEAD: <style> P {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d <a href=\"../../Top/\"> TOP</a> | <a href=\"nsa-se-slides.html\"> Slides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> %d"))
#+STYLE: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STARTUP:showeverything
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.4)

* LKM (Linux Kernel Modules)

1. Object code file, .ko extension; see =/lib/modules/=
   1. =/lib/modules/.../iptable_security.ko=
1. Operations: =insmod, rmmod= load, unload
1. Windows, OSX also have kernel modules.

* LSM (Linux Security Modules)

1. hooks := upcalls to a module's methods at security-critical
   points within the kernel
1. LSM hooks are placed so that the Linux DAC checks are performed
   first, and only if they succeed, is LSM code invoked.

** Access Control with LSM Module
#+CAPTION: Access Control with LSM Module
#+ATTR_HTML: :alt lsm-access.jpg :align center :width 80%
[[./Figs/lsm-access.jpg]]

** LSM #2

1. https://www.kernel.org/doc/htmldocs/lsm/ General Security Hooks for Linux
1. Despite LSM being developed as a security API, LSM provides hooks
   that could be used by rootkits. http://grsecurity.net/lsm.php

** LSM #3

To implement LSM, the original (2001) Linux kernel was modified:

1. Opaque Security Fields were added to objects
1. Security Function Hooks were added in key accesses
1. A security System Call was added
1. Registering security modules
1. Modify capabilities to reduce the capable call

** LSM #4

Additional hooks were provided

1. for working with tasks (nice, kill, setuid)
1. for program loading and controlling inheritance of state across program executions (such as file descriptors)
1. for IPC
1. for file ops (read, write, sockets)
1. for network ops (devices, syscalls, sk-buffs)
1. for module operations (create, register, delete)
1. for sytem operations (hostname, accessing I/O ports, process accounting)


* DAC (Discretionary Access Control)

1. Unix/Linux security model can be called DAC
1. Discretionary: at the discretion of file/process owner
1. Using userid, groupid  only
1. Authoritative Terminolgy: DAC, MAC, ...
   1. http://en.wikipedia.org/wiki/Discretionary_access_control
   1. Trusted Computer System Evaluation Criteria, the "Orange Book"
   1. http://www.commoncriteriaportal.org/cc/

* MAC (Mandatory Access Control)

1. System defined access control: Required ("Mandatory") for all.
   1. Users cannot override the policy.
   2. Access control at a much finer granularity.
   3. Principle of Least Privilege
2. Controls objects (and "subjects") such as processes, inodes, files, etc.

** MAC #2

3. Any operation by any subject on any object will be tested against
   the set of authorization rules (aka /policy/) to determine if the
   operation is allowed.
   1. Ex: wish to control access to =/etc/shadow=
   2. Ex: wish to control a process

** MAC #2

4. MAC is mainstream now: Linux, Windows, OS X, iOS
5. Linux MAC solutions: AppArmor, SELinux, Smack, TOMOYO
   1. Ubuntu distribution uses AppArmor; can =apt-get install selinux=
   2. RedHat distribution uses SELinux

* SELinux Overview

1. SELinux is an implementation of MAC as an LSM for Linux

1. Writing SELinux config files is complicated.

5. Smack LSM was designed in response to the complexity of
   SELinux. Smack is now part of Tizen.

** SELinux Simplied View

#+ATTR_HTML: :margin-left auto :margin-right auto :width 80%
   [[./Figs/se-linux-simple-view.png]] 

*** SELinux Example #1

1. process #31337 wishes to read-open /etc/passwd: simplified
   view\\ 
#+ATTR_HTML: :align center :width 80%
   [[./Figs/dac-mac-flow1.png]]

*** SELinux Example #2

1. process #31337 wishes to read-open /etc/passwd: more details\\
#+ATTR_HTML: :align center :width 80%
   [[./Figs/dac-mac-flow2.png]]

** SELinux Simplied Architecture
#+ATTR_HTML: :align center :width 80%
#CAPTION: SELinux Simplied Architecture
   [[./Figs/1-core.png]]

** SELinux on Ubuntu

1. Ubuntu distribution uses AppArmor; but, you can =apt-get install selinux=
2. Config files on Ubuntu:
   1. =/etc/selinux/*=, 60+ files 
   2. =/etc/selinux.d/ubuntu/*= 50+ files

** SELinux modes

   1. In =/etc/selinux/config= file, =SELINUX=enforcing= or =disabled, permissive=

   1. Enforcing: policy is loaded. Your machine is actively protected.

   2. Permissive: policy file is loaded, but SELinux is /not enforcing/
      it.  Accesses will be logged but not
      prevented.  This mode is intended for testing and debugging.
   3. Disabled: SELinux infrastructure is not enabled. No policy file
      loaded.  Log files are not generated.

** SE Context Labels

1. A label is a string of four values: user-identity, role, type, (sensitivity)
   1. Ex: /etc/shadow: =system_u:object_r:shadow_t=
   2. Ex: process: =root:staff_r:staff_t=
   3. 100+ types, such as device-type, process-type, file-system-type,
      network type, IPC type, ...

2. SELinux has hooks located at strategic points within the core kernel code
3. labels encapsulate all security attributes of an object
4. Labels are interpreted by the SE Security Server in the kernel and by =libselinux= in user space.
5. The rest of the kernel code and user space view labels as opaque data.
6. New security attributes can be added to labels without having to
   recompile applications or redesign core SELinux code.

** SELinux Architecture Diagram

#+ATTR_HTML: :align center :width 80%
#CAPTION: SELinux Architecture Diagram
   [[./Figs/selinux architecture.png]]

* SEAndroid

2. SEAndroid is an adapation of SELinux for the Android-embedded
   Linux, and Framework.  Mostly because of Binder.

1. Starting from Andoroid Lollipop: SEAndroid is enabled by default

1. SE Android Timeline: Samsung specific\\
#+ATTR_HTML: :align center :width 80%
   [[./Figs/timeline.jpg]] 

** SEAndroid on my Samsung Note 10.1 P600

  #+begin_src bash
shell@lt03wifiue:/ $ ls -l /se*                                                
-rw-r--r-- root     root         7477 1969-12-31 19:00 seapp_contexts
-rw-r--r-- root     root      1446273 1969-12-31 19:00 sepolicy
-rw-r--r-- root     root          235 1969-12-31 19:00 sepolicy_version
#+end_src
1. Ignore the date-time stamp
1. *Not all* explicitly shown files are from this one device; check
   the prompt

** SEAndroid #3

1. SELinux modes
   4. GooglePlay SELinuxModeChanger APK can switch between modes
      "permissive"(used in android 4.3) and "enforcing"(in kitkat).
   5. =adb shell su 0 setenforce 1=
   6. =root@C6833:/ # setenforce=
   7. =usage:  setenforce [ Enforcing | Permissive | 1 | 0 ]=
   8. =setenforce 0= puts it into permissive mode.
   9. SELinux *can* cause some rooted apps to break.

** Output of id-Z

1. =id -Z= Do note the prompt strings. E.g., =shell@C6833:/ $= Context
   is at the end.  Lines are manually wrapped.
    #+begin_src bash
shell@C6833:/ $ id -Z
uid=2000(shell) gid=2000(shell) groups=1004(input),1007(log),
1011(adb),1015(sdcard_rw),1028(sdcard_r),2991(removable_rw),
3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats) 
context=u:r:shell:s0

shell@C6833:/ $ su
root@C6833:/ # id -Z
uid=0(root) gid=0(root) context=u:r:init_shell:s0
#+end_src

** Output of id-Z, on another device

1. On Samsung Note 10.1 P600
    #+begin_src bash
shell@lt03wifiue:/ $ id
uid=2000(shell) gid=2000(shell) groups=1003(graphics),1004(input),1007(log),
1011(adb),1015(sdcard_rw),1028(sdcard_r),
3001(net_bt_admin),3002(net_bt),3003(inet),3006(net_bw_stats)
context=u:r:shell:s0
#+end_src

** property contexts

1. A (se security) context is a sequence of four values, colon-separated.
   1. user-id: object: property-type: sensitivity

1. Contents of =/property_contexts= \\
  (some times the path name is given as =external/sepolicy/property_contexts=)
    #+begin_src
net.rmnet0              u:object_r:radio_prop:s0
net.gprs                u:object_r:radio_prop:s0
net.ppp                 u:object_r:radio_prop:s0
net.qmi                 u:object_r:radio_prop:s0
net.lte                 u:object_r:radio_prop:s0
net.cdma                u:object_r:radio_prop:s0
gsm.                    u:object_r:radio_prop:s0
persist.radio           u:object_r:radio_prop:s0
net.dns                 u:object_r:radio_prop:s0
sys.usb.config          u:object_r:radio_prop:s0
ril.                    u:object_r:rild_prop:s0
net.                    u:object_r:system_prop:s0
dev.                    u:object_r:system_prop:s0
runtime.                u:object_r:system_prop:s0
hw.                     u:object_r:system_prop:s0
sys.                    u:object_r:system_prop:s0
sys.powerctl            u:object_r:powerctl_prop:s0
service.                u:object_r:system_prop:s0
wlan.                   u:object_r:system_prop:s0
dhcp.                   u:object_r:system_prop:s0
bluetooth.              u:object_r:bluetooth_prop:s0
debug.                  u:object_r:shell_prop:s0
log.                    u:object_r:shell_prop:s0
service.adb.root        u:object_r:shell_prop:s0
service.adb.tcp.port    u:object_r:shell_prop:s0
persist.audio.          u:object_r:audio_prop:s0
persist.sys.            u:object_r:system_prop:s0
persist.service.        u:object_r:system_prop:s0
persist.service.bdroid. u:object_r:bluetooth_prop:s0
persist.security.       u:object_r:system_prop:s0
persist.mmac.           u:object_r:security_prop:s0
selinux.                u:object_r:security_prop:s0
\*                      u:object_r:default_prop:s0
vold.                   u:object_r:vold_prop:s0
crypto.                 u:object_r:vold_prop:s0
ctl.dumpstate           u:object_r:ctl_dumpstate_prop:s0
ctl.ril-daemon          u:object_r:ctl_rildaemon_prop:s0
ctl.                    u:object_r:ctl_default_prop:s0
#+end_src


** se policy

1.
    #+begin_src
shell@C6833:/ $ ls -l /sepolicy
-rw-r--r-- root     root        77338 1970-01-01 05:30 sepolicy
root@pmateti-XE700T1C:~# file /sepolicy
sepolicy: SELinux policy v26 MLS 8 symbols 7 ocons
#+end_src

1. The policy file is constructed by a tool from =/file_contexts=,
   =/property_contexts=, =/seapp_contexts= and a =/mac_permissions.xml=
   files.

1. The =/file_contexts= labels files at build time (e.g., the system
   partition) and at run time (e.g., device nodes, service socket
   files, /data directories created by init.rc, ...).
1. The =/property_contexts= the security context of Android properties for permission checking.
1. The =/seapp_contexts= label app processes and app package directories.
1. The =/system/etc/security/mac_permissions.xml= middleware MAC policy.

** Sample SE policy

1.
    #+begin_src
type bluetoothd, domain;
type bluetoothd_exec, exec_type, file_type;

init_daemon_domain(bluetoothd)
allow bluetoothd self:capability { setuid \
  net_raw net_bind_service net_admin };
allow bluetoothd self:socket *;
allow bluetoothd bluetoothd_data_file:dir \
  create_dir_perms;
allow bluetoothd bluetoothd_data_file:file \
  create_file_perms;
unix_socket_connect(bluetoothd, dbus, dbusd)
#+end_src


** se app contexts

    #+begin_src
root@C6833:/ # more /seapp_contexts
isSystemServer=true domain=system
user=system domain=system_app type=system_data_file
user=bluetooth domain=bluetooth type=bluetooth_data_file
user=nfc domain=nfc type=nfc_data_file
user=radio domain=radio type=radio_data_file
user=_app domain=untrusted_app type=app_data_file levelFrom=none
user=_app seinfo=platform domain=platform_app type=platform_app_data_file
user=_app seinfo=shared domain=shared_app type=platform_app_data_file
user=_app seinfo=media domain=media_app type=platform_app_data_file
user=_app seinfo=release domain=release_app type=platform_app_data_file
user=_isolated domain=isolated_app
user=shell domain=shell type=shell_data_file
user=smartcard domain=smartcard type=smartcard_data_file
user=suntrold domain=suntrold type=suntrold_exec
#+end_src

** selinux occurrences

1. =root@C6833:/ # grep -n selinux /*=
    #+begin_src
file_contexts:178:/data/local/tmp/selinux(/.*)?   u:object_r:tombstone_data_file:s0
Binary file init matches
init.rc:363:    chown system system /sys/fs/selinux/load
init.rc:364:    chown system system /sys/fs/selinux/enforce
init.rc:442:on property:selinux.reload_policy=1
property_contexts:44:# selinux non-persistent properties
property_contexts:45:selinux. u:object_r:security_prop:s0
#+end_src

* References

1. http://source.android.com/devices/tech/security/se-linux.html
   Validating Security-Enhanced Linux in Android.  Required Reading.

2. Richard Haines, =The_SELinux_Notebook-4th_Edition.pdf=, legit
   download? search the web for links; 400pp Pretty good.

3. Stephen Smaley, "Security Enhanced (SE) Android: Bringing Flexible
   MAC to Android." [[./SEAndroid-NDSS2013-pm-tab.pdf]] NDSS 2013 paper,
   with a few of my annotations. Slides: [[./seandroid-Presentation02_4.pdf]]

4. Red Hat, [[./state-of-selinux-moore-2015.pdf]] Aug 2015 Short
   presentation.  Recommended Reading.

** References #2

5. Bill McCarty, SELinux NSA's Open Source Security Enhanced Linux,
   O'Reilly Media, Formats: Print Safari Books Online, October 2004
   Pages: 258 Print ISBN:978-0-596-00716-4 | ISBN 10:0-596-00716-7

6. http://www.linux.com/learn/docs/727873-overview-of-linux-kernel-security-features/
   2013 Good overview.  Highly recommended reading.

8. https://www.youtube.com/watch?v=KoK42DsKEtc Defcon 21 - Defeating SEAndroid
9. http://www.electronicsweekly.com/eyes-on-android/what-is/what-is-security-enhanced-se-android-2013-03/
   2013 Overview. Light reading.  Recommended.
10. Stephen Smaley, http://kernsec.org/files/lss2015/lss2014_androidtcb_smalley.pdf Recommended Reading.

1. http://www.linuxnix.com/2012/09/basics-of-selinux-in-linux.html 2012
