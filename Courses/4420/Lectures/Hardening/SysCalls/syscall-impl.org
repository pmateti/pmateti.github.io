
# -*- mode: org -*-
#+date: 2018-11-05
#+TITLE: New Linux System Call Implementation
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | <a href=./>NoSlides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* New Linux System Call Implementation

We will show how to add a system call using an example.  As explained
above, the design of a new system call is crucial.  To skirt this
issue, we will introduce a system call named =readnew= that duplicates
the existing =read=.  Assume the new syscall is implemented in one C
file named =readnew.c=.

1. cd to the root of the kernel source tree: =.../linux-4.19.0=
1. Edit file =include/linux/syscalls.h= [ TBD linux/ ] Add new
   function declaration =asmlinkage long sys_readnew(int fd);= before
   the line =#endif=
1. Add the new syscall file =readnew.c= under =arch/x86/kernel=
1. Add =obj-y +=readnew.o= to =arch/x86/kernel/Makefile= 
1. Run =make â€“j8= # or -j16 etc, if you have a multi-core CPU; check
   up with =nproc= command.  Or, use =make -j$(nproc)=

1. TBD Check If you must build a 64 bit x86 kernel, you also have to
   put a new entry in the table in the file
   arch/x86/include/asm/unistd_64.h The 64-bit code to #include's this
   file (twice!) into arch/x86/kernel/syscall_64.c to build the system
   call table.


** syscall-table address

1. 2010
   http://gadgetweb.de/linux/40-how-to-hijacking-the-syscall-table-on
   How To: Hijacking the syscall table on latest 2.6.x kernel systems;
   
1. 2011 January 20, 2011
   https://memset.wordpress.com/2011/01/20/syscall-hijacking-dynamically-obtain-syscall-table-address-kernel-2-6-x/

1. March 18, 2011
   https://memset.wordpress.com/2011/03/18/syscall-hijacking-dynamically-obtain-syscall-table-address-kernel-2-6-x-2/

1. June 2014
   https://github.com/maK-/Syscall-table-hijack-LKM/blob/master/template.c
   This is the template file used to build a system specific kernel
   module.

1. =syscall= versus =int 0x80=  Kernel 3.3 v 2.6

1. https://filippo.io/linux-syscall-table/

** Adding a System Call: Method 1

1.  Insert the new system call code in in an existing file in the
    Linux src tree.

1. The following is described on many blogs.
   1. asmlinkage
   : asmlinkage long sys_helloworld(void) {
   :  printk(KERN_EMERG "Hello, world!\n");
   :  return 0;
   : }

1. file arch/x86/syscalls/syscall_32.tbl
   : 350     i386    helloworld             sys_helloworld

EXTRAVERSION = .ownsyscall

int main ()
{
 syscall(350);
 return 0;
}

** Module

1. Several include files were not being found even after apt-get
   install linux-headers-version#

1. =gcc -I /usr/src/linux-headers-3.19.0-20/include/ -I   /usr/src/linux-headers-3.19.0-20/arch/x86/include/asm/ -c   find-syscall-table.c= produces syntax errors in include files!

1. It is possible to build a module whose files are not within kernel
   source directory.  Use the =make -C= Details in
   =Documentation/kbuild=

1. http://www.gilgalab.com.br/hacking/programming/linux/2013/01/11/Hooking-Linux-3-syscalls/
   =#define CR0_WP 0x00010000 // Write Protect Bit (CR0:16)=


** Testing and Debugging a New System Call

So, we have a new vmlinuz, initrd, and lib/modules.  How do we test
these?

** Virtual Box with New Kernel
** Test Program Application

We need to build test programs that use the newly introduced syscalls.
We can certainly write them under the current kernel, but it is best
to compile and build after the new kernel is booted and with the
updates #include files.

* Refs - SysCall Impl
1. https://www.kernel.org/doc/Documentation/kbuild/modules.txt
1. http://www.tldp.org/LDP/lkmpg/2.6/html/x181.html Describes for
   kernel version 2.6.  Needs to be fixed up for current kernels.
1. http://algalon.net/adding-a-system-call-to-linux-3-1/ There are
   plenty of blog posts about adding a system call to Linux 2.6, but
   they are out of date now. Here is a article about adding a system
   call to Linux 3.14. I assume you can easily add the system call for
   further kernel.  {PM: Have read it.  Several spelling mistakes.
   Implements set-root as a new syscall; too difficult to check, so
   not a good choice.  But ok technical content.  I should write my
   tutorial based on this.}
1. http://lxr.free-electrons.com/source/arch/x86/syscalls/;; https://elixir.bootlin.com/linux/latest/source/arch/x86/syscalls
1. July 16, 2014 (i) https://lwn.net/Articles/604287/ (ii)
   https://lwn.net/Articles/604515/ Anatomy of a system call, part 1,
   part 2
1. http://my.cs.lmu.edu/~tcostell/ubuntu-kernel-howto/ This guide will
   explain how to build a linux kernel and add a custom system
   call. Ubuntu 3.13.0-16 is the version used in this guide--keep in
   mind that other versions of Ubuntu will likely not follow this
   guide exactly. To be safe and to avoid damaging your system, I
   highly reccommend that you use a virtual machine (I am using
   VirtualBox) when building the kernel. In addition, the git version
   control system is required.
1. https://www.first.org/resources/papers/conference2014/
   =first_2014_-_gurkok-_cem_-_rootkits_in_os_x_memory_20140626.pdf=

1. http://www.cs.albany.edu/~sdc/CSI500/Fal11/Labs/L06/OwnSyscall.html
   Linux 2.6 or 3.0

1. https://linux-kernel-labs.github.io/master/lectures/syscalls.html
   Linux 4.15.0; Linux system calls implementation, System Call Table,
   VDSO and virtual syscalls, Accessing user space from system calls

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
