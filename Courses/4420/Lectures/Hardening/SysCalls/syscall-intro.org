# -*- mode: org -*-
#+DATE: 2016-01-12
#+TITLE:  System Calls
#+AUTHOR: Prabhaker Mateti

#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../../
#+HTML_HEAD: <style> P {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../Top/\">CEG 4350</a> %d"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2016 %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:nil

* Library Routines

Library functions are implementations of high level, frequently used
operations.  Several methods are collected together into an archive.

Well known archives are at

1. /usr/lib
1. /lib

** Example Program

#+begin_src C
#include <stdio.h>
int main(void)
{
  printf("hello\n");
  return 0;
}
#+end_src

with =g++ -Wall -o hello hello.cpp=.  

** Man Pages

The =man= pages section 1 is devoted to programs ("apps"). Section 2
is devoted to system calls; section 3 is devoted to library calls.

** ltrace

1. =man ltrace=
1. Try =ltrace hello=  Even better, try =ltrace /bin/ls=

** ldd  /bin/ls

1. =man ldd=

#+begin_src bash
linux-vdso.so.1 =>  (0x00007fff6ecf2000)
libselinux.so.1 => /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f501fdfe000)
libacl.so.1 => /lib/x86_64-linux-gnu/libacl.so.1 (0x00007f501fbf5000)
libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007f501f82f000)
libpcre.so.3 => /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f501f5c2000)
libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f501f3be000)
/lib64/ld-linux-x86-64.so.2 (0x00007f5020059000)
libattr.so.1 => /lib/x86_64-linux-gnu/libattr.so.1 (0x00007f501f1b8000)
libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f501ef9a000)
#+end_src

1. Exercise: Explain the above (by the end of this course).  What are
   the numbers in parentheses?  What is the arrow (=>) suggesting?

* System Calls

System calls are "methods" (functions) implemented within the OS
kernel.  An application process calls these methods in much the same
way, but not exactly the same way, as it does its own methods or those
from the library.

Calling a system call changes the CPU mode: from user mode to
privileged mode.  Invoking a system call is translated by the compiler
using a special machine instruction designed for that specific
purpose: save the current "context", change CPU modes, etc.  After
performing the syscall, it uses a special machine instruction to
return to the calling process.

A system call returns a coded integer, indicating success or specific
failure.  Caller of a system call should always check this value and
take relevant action.  A system call almost always changes global
variables and/or environment that are visible to other processes.  The
effects are not undoable.

System calls are designed to be independent of programming languages.
On Linux, the C standard library (glibc) provides wrappers for each
system call.  The wrappers adapt the system call for use in C
programs.

** OS as a Collection of SysCalls

1. System Calls are calls to methods already built into the OS.  The
   OS has a table of pointers to system calls.

1. There are some 350+ system calls in Linux 5.4.x (2019).  May be
   about 200+ of these are inherited from Unix.

1. Listing of SysCalls  https://filippo.io/linux-syscall-table/
   Searchable;  From the git repository [[https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/x86/entry/syscalls/syscall_64.tbl][syscall-64.tbl]].

1. https://github.com/torvalds/linux/blob/master/include/linux/syscalls.h
   Also at linux-kernel-source-tree/ =include/linux/syscalls.h=


** CPU Instructions and Registers

1. System calls are services that userspace can call to request the
   kernel to perform something for them (and therefore execute in
   kernel space).

1. CPUs have special instructions to make and return-from system calls.

1. While still in userspace, calling a syscall requires writing the
   arguments to CPU registers. The system call number will always be
   written in EAX, while the the rest of the arguments will go into
   EBX, ECX, etc.

** File Sys Related SysCalls

2.  =open, close, read, write=
3. per-process open file table
4. =dup=

** Program to Process

1. Given a program and arguments, to create a process from it is the
   most crucial thing that an OS does.

2. execve - execute program

   1. =int execve(const char *filename, char *const argv[], char
      *const envp[]);=

3. What files are "programs"?

   1. Try =file path-name-to-a-file=
   2. binary executables native to the OS; ELF ... for Linux
   3. or a script starting with [[http://en.wikipedia.org/wiki/Shebang_(Unix)][shebang]] =#!= pathname-to-interpreter

4. Parent and child processes
   1. fork - create a new process =pid_t fork(void);=
   2. vfork - create a child process and block parent =pid_t fork(void);=
   3. =execve= does not create a process; it takes over the "body" of the
      calling process.
   4. E.g., when you ran =ls= within a shell, the shell created a
      child, the child invoked execve.
   5. Humans think "No parents should outlive their child."
   6. Parent process awaits the childs termination.

** Sys Call Tracing

1. =man strace=
1. Run the executable with =strace ./hello=.

Towards the end, find a line =write(1, "hello\n", 6)=.  {"There it
is. The face behind the printf() mask." -- from the web.}  Each line
that got printed corresponds to a syscall made by ./hello.

Exercise: Learn =execve("./hello", ["./hello"], [/* 59 vars */])=.

Even more interesting is =strace /bin/ls=

** Special Files

1. Show and tell on thor.
1. =uname -a=
3. =/proc= directory on Linux
1. =ls -l /dev/null /dev/zero /dev/random /dev/urandom=

** Library Calls v Sys Calls

Lib methods run completely in CPU user mode.  Some lib methods are a
more convenient interface for the programmer to the system functions
that do the real work.  System calls run in CPU kernel mode on the
user's behalf and are entry points to the kernel.  E.g., the library
function =printf()= formats the data into strings and writes the
string using the system call =write()=.

** Sys Call Files in the Linux src tree

1. =/usr/src/linux/= is usually a sym link to the src tree
1. =/usr/src/linux/arch/x86/syscalls/syscall_64.tbl= [[./syscall_64.tbl]]
1. =/usr/src/linux/include/linux/syscalls.h= [[./syscalls.h]]

* Reference

1. Richard Stevens, APUE
4. [[./syscalls.ppt][Slides on Sys Calls]] Tarek Abdelzaher + Vikram Adve, U of
   Illinois. Highly Recommended Reading.
1. https://0xax.gitbooks.io/linux-insides/content/SysCall/linux-syscall-2.html
