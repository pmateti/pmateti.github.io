
# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+STARTUP:showeverything
#+TITLE: Fortify + Harden a Linux System TBD
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:1
#+LINK_HOME: ../Top
#+LINK_UP: ../../index.html
#+DESCRIPTION: Online CEG6420 Course
#+STYLE: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-export-html-preamble-format (("en" "%d<br><a href=\"http://cecs.wright.edu/~pmateti/Courses/4420/\">OnLine CEG 6420: Computer Security</a>"))
#+BIND: org-export-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2013 &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a> &bull; %d"))

For now, this is combined fortify+harden for my *own* use.

* Hardening a Linux System: Abstract

We distinguish /hardening/ a system from proper /configuration/ and
/fortification/.  Carefully adjusting various parameters after an
out-of-the-box install is configuration.  Installing or uninstalling
various packages using the OS native tools and mechanisms, such as
apt-get in Debian/ Ubuntu, is fortification.  Hardening refers to
areas of security tightening during the design and construction of
systems rather than after their deployment.  In this lecture, we learn
howto harden an out-of-the-box installation into a trusted/secure
Linux system.

* Educational Objectives Fortify

Students should be able to

1. Determine minimal sofware that meets the expected system functionality
1. Uninstall unneeded components
1. Install security improving components
1. TBD 

* Educational Objectives Harden

1. Recognize hardening in contrast to proper configuration and
   fortification of a system.

1. Harden an out-of-the-box Linux system into a trusted/secure system

* What is Fortification?

1. Install and configure additional software that improves security
1. Removing unnecessary services/software
1. Security updates/ patching the OS and system utilities
1. Example Fortifications
   1. Encrypted File Systems
   1. Virus detection and removal
   1. Rootkit Detection and Removal
   1. Continuous System Audit
   1. Containers (Lightweight virtualization)
   1. SELinux security enhancements from NSA

* Notable Linux Security Updates
1. CVE-2013-2888, Crashing the system via DoS, Privilege Escalation,
   Information leak

* Hardening Ideas
** Careful Recompilation
** Least Privilege
** Capabilities
** Mandatory Access Control
** Role-Based Access Control
** Enhanced Authentication
** Logging
** Source Code Review


** Mutual authentication: init v kernel
** Trusted OS Loader http://projects.sirrix.com/trustedgrub
   TrustedGRUB extends the GRUB bootloader with TCG support. This
   makes it possible to provide a secure bootstrap architecture. The
   whole boot process is measured and - by support of a Trusted
   Platform Module (TPM) - the system integrity is verifyable.



* Linux Kernel Internals
** namespaces
1. (ipc, uts, mount, pid, network and user)

** Seccomp (secure computing mode)
1. sandboxing mechanism in the kernel
1. After a process starts, a one-way transition into a state
   where no system calls except =exit, sigreturn,
   read, write= and =close= are permitted.
1. Attempts to other system calls, will =SIGKILL= the process.
1. Process enters =seccom= via =prctl()= system call
1. Programs using this: OpenSSH, vsftpd, Chrome, ...

** Chroots
** capabilities
** Control Groups (cgroups)
** Linux Security Modules
*** AppArmor

*** SE Linux

*** Smack
*** TOMOYO
** POSIX capabilities

POSIX capabilities (Pcaps) can turn a setuid-root file into a file
with minimum privileges, run a daemon with uid=0 but with amost no
superuser privileges, etc. Privileges are granted to processes instead
of users. Pcaps are implemented in Linux kernels since 2.6.x; capsh,
getpcaps, getcap, setcap are some of the tools. Pcaps divide
privileges that are typically granted to root user.

The table below presents PCaps for a few typical suid-root binaries. The CAP-names used are defined in /usr/include/linux/capability.h.

| ping	| CAP-NET-RAW (13) |
| traceroute	| CAP-NET-RAW (13) |
| chsh	| CAP-CHOWN (0), CAP-DAC-READ-SEARCH (2), CAP-FSETID (4), CAP-SETUID (7) |
| chfn	| CAP-CHOWN (0), CAP-DAC-READ-SEARCH (2), CAP-FSETID (4), CAP-SETUID (7) |
| chage	| CAP-DAC-READ-SEARCH (2) |
| passwd	| CAP-CHOWN (0), CAP-DAC-OVERRIDE (1), CAP-FOWNER (3) |
| mount	| CAP-DAC-OVERRIDE (1), CAP-SYS-ADMIN (21) |
| umount	| CAP-DAC-OVERRIDE (1), CAP-SYS-ADMIN (21) |

To change, run =chmod u-s /usr/bin/chsh; setcap 0,2,4,7=ep /usr/bin/chsh=

** Chroot restrictions
** LIDS (Linux Intrusion Detection System) 
** grsecurity
** Address space modification protection


** Linux Security Modules (LSM)

1. AppArmor confines individual programs to a set of listed files and
   posix 1003.1e draft capabilities.
1. AppArmor: Name-based Access Controls

1. http://sourceforge.net/projects/realtime-lsm/ The Realtime Linux
   Security Module (LSM) selectively grants realtime permissions to
   specific user groups or applications.

1.  Enforcer Linux Security Module (LSM) The Enforcer is a Linux
    Security Module designed to improve integrity of a computer
    running Linux by ensuring no tampering of the filesystem. It can
    interact with TCPA hardware to provide higher levels of assurance
    for software and sensitive data.  http://enforcer.sourceforge.net/

** Secure Linux containers
*** What is a Container?
1. Lightweight virtual OSs running inside Linux
2. Not a virtual machine like VirtualBox or VMware
3. A container is a group of processes in a "box"
   1. Inside the box, it looks like a VM.
   2. Outside the box, it TBD looks like normal processes.
   3. "chroot on steroids"
1. Process isolation
1. Name space isolation
1. What is a Hypervisor?
1. Example container software: LXC, Docker, OpenVZ.org

*** LXC on Ubuntu
1. https://help.ubuntu.com/lts/serverguide/lxc.html
1. # apt-get install lxc
1. LXC v KVM 
   KVM is a virtual machine running on Linux kernel
   Relies on assistance from the CPU 
   Uses paravirtualization to reduce overhead

1. LXC v Xen
   Both are light weight virtual OS, not VM


** SELinux

** ptrace scope
** Linux Memory Forensics  

1. =ls -l /proc/sys/vm=
1. Keep kernel details confidential =ls -l /boot=
#+begin-src bash
-rw-r--r-- 1 root    root     1007311 Oct  2 19:19 abi-3.11.0-11-lowlatency
-rw-r--r-- 1 root    root      163504 Oct  2 19:19 config-3.11.0-11-lowlatency
-rw-r--r-- 1 root    root    26228945 Oct 17 23:33 initrd.img-3.11.0-11-lowlatency
-rw------- 1 root    root     3310511 Oct  2 19:19 System.map-3.11.0-11-lowlatency
-rw------- 1 root    root     5674032 Oct  2 19:19 vmlinuz-3.11.0-11-lowlatency
#+end-src

** Intrusion Detection/ Prevention

* Building a Linux Kernel
** The Files We Build 
1. vmlinuz
1. initrd
1. modules, in the hundreds
** Build Overview
1. =% make xconfig=
1. =% xconfig= Select various items
1. =% make bzImage modules= takes an hour or two
1. =# make install=
1. =# grub-update=
** Pruning the Kernel
1. Building a custom kernel with just the needed components
   1. Pruning device drivers, file systems, ...
1. Disable Loadable Kernel Modules (LKM)
   1. =/boot/vmlinuz= has all the "modules" merged in
   1. =/lib/modules/this-version-of-kernel= will be empty

* Building a Secure Linux Kernel

** Restrict unprivileged access to the kernel syslog (SECURITY-DMESG-RESTRICT)

This enforces restrictions on unprivileged users reading the kernel
syslog via dmesg(8).

If this option is not selected, no restrictions will be enforced
unless the dmesg-restrict sysctl is explicitly set to (1).

** Enable different security models (SECURITY)

This allows you to choose different security modules to be
configured into your kernel.

** Enable the securityfs filesystem (SECURITYFS)

This will build the securityfs filesystem. It is currently used by
the TPM bios character driver and IMA, an integrity provider. It is
not used by SELinux or SMACK.

** Security hooks for pathname based access control (SECURITY-PATH)

This enables the security hooks for pathname based access control.
If enabled, a security module can use these hooks to
implement pathname based access controls.
If you are unsure how to answer this question, answer N.

** NSA SELinux Support (SECURITY-SELINUX)

This selects NSA Security-Enhanced Linux (SELinux).
You will also need a policy configuration and a labeled filesystem.
If you are unsure how to answer this question, answer N.

** Simplified Mandatory Access Control Kernel Support (SECURITY-SMACK)

This selects the Simplified Mandatory Access Control Kernel.
Smack is useful for sensitivity, integrity, and a variety
of other mandatory security schemes.
If you are unsure how to answer this question, answer N.

** TOMOYO Linux Support (SECURITY-TOMOYO)

This selects TOMOYO Linux, pathname-based access control.
Required userspace tools and further information may be
found at <http://tomoyo.sourceforge.jp/>.

** AppArmor support (SECURITY-APPARMOR)

CONFIG-SECURITY-APPARMOR:

This enables the AppArmor security module.
Required userspace tools (if they are not included in your
distribution) and further information may be found at
http://apparmor.wiki.kernel.org

** Yama support (SECURITY-YAMA)

This selects Yama, which extends DAC support with additional
system-wide security settings beyond regular Linux discretionary
access controls. Currently available is ptrace scope restriction.
Further information can be found in Documentation/security/Yama.txt.

** Digital signature verification using multiple keyrings (INTEGRITY-SIGNATURE)

This option enables digital signature verification support
using multiple keyrings. It defines separate keyrings for each
of the different use cases - evm, ima, and modules.
Different keyrings improves search performance, but also allow
to "lock" certain keyring to prevent adding new keys.
This is useful for evm and module keyrings, when keys are
usually only added from initramfs.

** Enables integrity auditing support (INTEGRITY-AUDIT)

In addition to enabling integrity auditing support, this
option adds a kernel parameter 'integrity-audit', which
controls the level of integrity auditing messages.
0 - basic integrity auditing messages (default)
1 - additional integrity auditing messages

** Enable asymmetric keys support (INTEGRITY-ASYMMETRIC-KEYS)

This option enables digital signature verification using
asymmetric keys.

** Integrity Measurement Architecture(IMA) (IMA)

The Trusted Computing Group(TCG) runtime Integrity
Measurement Architecture(IMA) maintains a list of hash
values of executables and other sensitive system files,
as they are read or executed. If an attacker manages
to change the contents of an important system file
being measured, we can tell.

If your system has a TPM chip, then IMA also maintains
an aggregate integrity value over this list inside the
TPM hardware, so that the TPM can prove to a third party
whether or not critical system files have been modified.
Read <http://www.usenix.org/events/sec04/tech/sailer.html>
to learn more about IMA.

** EVM support (EVM)

EVM protects a file's security extended attributes against
integrity attacks.

** Default security module

Select the security module that will be used by default if the
kernel parameter security= is not specified.
Prompt: SELinux
Simplified Mandatory Access Control (DEFAULT-SECURITY-SMACK)
TOMOYO (DEFAULT-SECURITY-TOMOYO)
AppArmor (DEFAULT-SECURITY-APPARMOR)
Yama (DEFAULT-SECURITY-YAMA)
Unix Discretionary Access Controls (DEFAULT-SECURITY-DAC)

Asymmetric public-key crypto algorithm subtype (ASYMMETRIC-PUBLIC-KEY-SUBTYPE)
This option provides support for asymmetric public key type handling.
If signature generation and/or verification are to be used,
appropriate hash algorithms (such as SHA-1) must be available.
ENOPKG will be reported if the requisite algorithm is unavailable.

*** Symbol: ASYMMETRIC-PUBLIC-KEY-SUBTYPE [=y]
RSA public-key algorithm (PUBLIC-KEY-ALGO-RSA)
X.509 certificate parser (X509-CERTIFICATE-PARSER)
CRYPTO [=y] && ASYMMETRIC-KEY-TYPE [=y] && ASYMMETRIC-PUBLIC-KEY-SUBTYPE [=y]



* Case Study: Hardening an FTP + NFS + Web Server

1. Disable unneeded system calls after initialization.
1. Cannot reenable.

* Race Conditions

1. Control of a resource common to >= 2 processes
1. Prevention
1. Detection

* Malware Removal
1. Malware = viruses + worms + Trojans
1. Linux/Unix can be infected with malware.
1. E.g.,  "The Hand of Thief" 2013 banking Trojan protype
1. A Linux server can scan and remove viruses from Windows files

* Rootkit Removal
** What are Rootkits, Trojans and Backdoors
** How do rootkit programs work?
** Contents of Linux Root Kit 5
** Detecting Rootkis
** Removal of Rootkits

* System Audit
1. tripwire

* Lab Experiment on Fortify
1. Takes 1 to 2 hours by the student
1. Practices things discussed above, but not all
   1. Includes list: tripwire, ?webmin
   1. Excluded list: password cracking (a separate lab)

1. Download a Linux ISO we provide (time taken not counted)
1. Student installs on a USBD or in a virtual box (10 - 15 min)
1. Examines this system (30 min)
1. Fortifies this system (60 min)
1. Writes a lab report (30 min)


* Lab Experiment on Harden


* Reading List

1. Readings are grouped into Required and Recommended.
1. Required Readings are a must read.  These are sources of exam
   questions.
1. Recommended Readings bring more insight into the topic.  But exam
   questions will not be derived from these.
1. Some of our "readings" are actually web site visits.

** Required Reading  (10 hrs)
** Recommended Reading


* Misc

