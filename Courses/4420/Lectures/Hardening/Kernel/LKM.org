
# -*- mode: org -*-
#+date: 2018-10-10
#+TITLE: Linux Kernel Modules (LKM)  [WIP]
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | <a href=./>NoSlides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:0

* Kernel Overview

1. Prerequisite: [[./index.org][Kernel Overview]]
1. Related: [[./LSM.org][Linux Kernel Security Modules]]

* LKM Overview

1. "Modules" of code that are needed in some installations and not in
   others.  If needed always, compile/build as built-ins, and not as
   modules.

1. "Kernel modules are pieces of code that can be loaded and unloaded
   into the kernel upon demand. They extend the functionality of the
   kernel without the need to reboot the system.  To create a kernel
   module, you can read The Linux Kernel Module Programming Guide.

1. A typical module is the device driver.  The ext4 is often builtin,
   but other filesys are  modules.

1. LKM is an object code file with =.ko= extension
1. =root@Sutherland:~# ls /lib/modules/4.12.0-12-generic/ -R | wc -l=
   shows 8164

* Module Utilities

1. =insmod= loads a module; kernel address space expands,
   now includes the methods of the module; some of them are syscalls.
1. =rmmod= unload the module; kernel no longer has the module and its
   methods.
1. =lsmod= list the kernel module currently in the kernel

1. Pathnames

  : -rwxr-xr-x 1 root root 157880 May 28 09:12 /bin/kmod

  : lrwxrwxrwx 1 root root 9 Aug 20 00:57 /sbin/depmod -> /bin/kmod
  : lrwxrwxrwx 1 root root 9 Aug 20 00:57 /sbin/insmod -> /bin/kmod
  : lrwxrwxrwx 1 root root 9 Aug 20 00:57 /sbin/lsmod -> /bin/kmod
  : lrwxrwxrwx 1 root root 9 Aug 20 00:57 /sbin/rmmod -> /bin/kmod
  : lrwxrwxrwx 1 root root 9 Aug 20 00:57 /sbin/modprobe -> /bin/kmod

** =/proc/modules=

Through the pseudo text file at =/proc/module=, the kernel informs us
of all the modules is had loaded into the kernel address space.
A highly pruned, and mildly edited, output of =cat /proc/modules= is
shown below, with explanatory notes.

: cpuid 16384 0 - Live 0xffffffffc08cd000
: ntfs 102400 0 - Live 0xffffffffc0a1e000
: msdos 20480 0 - Live 0xffffffffc0aad000

The hex number in the last column is the address of the location of
the module.

* What is a Virtual File Volume?



sysfs, procfs, dev, urandom

* procfs

The Linux kernel provides a virtual file system called sysfs. By
providing virtual files, sysfs is able to export information about
various kernel sub-systems, hardware devices and associated device
drivers from the kernel's device model to user space. ... The /proc
file system was created for this purpose.May 2, 2015

https://opensourceforu.com/2015/05/talking-to-the-kernel-through-sysfs/
* sysfs

=sysfs= is a pseudo file system provided by the Linux kernel that
exports information about various kernel subsystems, hardware devices,
and associated device drivers from the kernel's device model to user
space through virtual files.

: drwxr-xr-x   2 root root 0 Oct  9 12:35 block
: drwxr-xr-x  41 root root 0 Oct  9 12:35 bus
: drwxr-xr-x  74 root root 0 Oct  9 12:35 class
: drwxr-xr-x   4 root root 0 Oct  9 12:35 dev
: drwxr-xr-x  19 root root 0 Oct  9 12:35 devices
: drwxr-xr-x   5 root root 0 Oct  9 12:35 firmware
: drwxr-xr-x  10 root root 0 Oct  9 12:35 fs
: drwxr-xr-x   2 root root 0 Oct  9 12:35 hypervisor
: drwxr-xr-x  13 root root 0 Oct  9 12:35 kernel
: drwxr-xr-x 181 root root 0 Oct  9 12:35 module
: drwxr-xr-x   2 root root 0 Oct  9 12:37 power


* WIP

"There is little relation between /proc/sys and /sys other than the
fact that both are kernel interfaces and a coincidence of names."

"/proc/sys is an interface to sysctl, which are kernel configuration
parameters. Reading or modifying /proc/sys/foo/bar is equivalent to
getting or setting the foo.bar sysctl. Sysctl values are organized by
semantic categories, they are not intrinsically related to the
structure of the kernel. Many sysctl values are settings that are
present on every Linux system regardless of what drivers or features
are compiled in; some are related to optional features (e.g. certain
network protocols) but never to specific hardware devices."

/sys/module is, as the name indicates, an interface to kernel modules. Each directory corresponds to one kernel module. You can read, and sometimes modify, the parameters of the module foo by writing to /sys/module/foo/parameters/*.

Components that are loaded in the kernel read their parameters from the kernel command line. These parameters cannot be set at runtime (at least not through an automatically-generated interface like /sys/module: the component can expose a custom interface for this).

* Compile-in-kernel modules vs Loadable kernel modules (LKMs)

This page is meant to help picking between compile-in-kernel (<*>) and compile-as-module (<M>) when configuring a kernel.

** Gentoo WIP

** Advantages
A module:

Is loadable without reboot (at least most of them).
Results in smaller kernel memory footprint (when the module is not loaded).
Can be loaded on demand by udev (for example DVB drivers for a DVB stick).
Allows easy reloading of kernel drivers in case of module crash.
Allows specifying module-specific parameters in /etc/conf.d/modules

** Drawbacks
Using a module:

May require an update of the initramfs for modules needed early in the boot process (i.e. filesystem drivers).
May result in performance losses due to the addition of an API layer and slightly more memory usage.
Also:

Beware of file system module X located on a partition formatted with X
(unbootable system at worst).

* Loadable kernel modules

** Automatic loading
OpenRC
Loadable modules can be defined in the /etc/conf.d/modules file in order to load modules to the kernel during the init process.

Blacklist
To avoid a module from loading, add it to a file in /etc/modprobe.d/:

FILE /etc/modprobe.d/blacklist.conf
blacklist uhci_hcd
blacklist nvidia
More information on module blacklisting can be found by reading the modprobe.d(5) man page:

user $man 5 modprobe.d
systemd
See the automatic module loading section in the systemd article for module loading when using systemd.

Also see the modules-load.d(5) man page:

user $man 5 modules-load.d
** Manual loading
A module can be loaded or unloaded manually by the modprobe command. For example, to unload the nvidia module and load the nouveau module, run:

root #modprobe -r nvidia
root #modprobe nouveau
To list currently loaded modules, run lsmod.

* Going completely module-less
If, for some reason, you want to have a completely module-less system, you can disable loadable module support in your kernel configuration (making sure to build-in any required drivers/features, of course). Setting CONFIG_MODULES=n will disable loadable module support:

KERNEL Disable loadable module support (CONFIG_MODULES)
[ ] Enable loadable module support  ----
With a module-less kernel, you may also wish to dispense with the userspace programs that manage loadable modules (e.g. lsmod, modprobe, etc). To do this, you'll need to remove kmod support from packages that use it, and you'll need to unmerge sys-apps/kmod and the virtual virtual/modutils package(s). Because virtual/modutils is part of the system set, it first must be removed from the set before it can be unmerged.

First, add -kmod to the system's USE flags in /etc/portage/make.conf.

Next, rebuild installed packages without kmod support:

root #emerge --ask --deep --newuse --update --verbose @world
Follow any special instructions given by rebuilt packages (for example, if udev was rebuilt, then restart it according to the instructions in the emerge output).

Now add -*virtual/modutils to /etc/portage/profile/packages (create the profile directory and packages file if they don't exist). This removes the virtual/modutils virtual package from the system set.

Then unmerge virtual/modutils and sys-apps/kmod packages:

root #emerge -ac
If the above command only removes modutils, then some package still depends on kmod even with the -kmod USE flag set. You can run equery depends kmod to find out which package still depends on kmod.

If you previously had a kernel installed with modules, then you'll also want to remove the /lib/modules/<kernel-version> directory. Since you've built your kernel without any loadable modules, there won't be anything useful in there anymore.

When using a genkernel generated initramfs, it may be necessary to add nomodules to the kernel command line in the system's bootloader (e.g. GRUB) configuration so that the initramfs does not waste any time looking for modules to load.

* References

1. https://wiki.gentoo.org/wiki/Kernel_Modules This page is meant to
   help picking between compile-in-kernel (<*>) and compile-as-module
   (<M>) when configuring a kernel.  Discusses Going completely
   module-less.  Required Reading.

1. Chapter 2. Building and Running Modules from the book by Greg
   Kroah-Hartman, Alessandro Rubini, Jonathan Corbet, Linux Device
   Drivers, 3e, Publisher: O'Reilly Media, Inc., 2005;
   https://www.oreilly.com/library/view/linux-device-drivers/0596005903/ch02.html

1. https://blog.sourcerer.io/writing-a-simple-linux-kernel-module-d9dc3762c234
   Writing a Simple Linux Kernel Module; 2017, Claims: 9 min read.

1. http://www.cs.otago.ac.nz/cosc440/labs/lab02.pdf  Pretty good. TBD

1. Love, Robert, 2010. Linux Kernel Development, 3e. 480 pp,
   Addison-Wesley Professional; Cited heavily.  Highly Recommended
   Reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
