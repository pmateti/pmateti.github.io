
# -*- mode: org -*-
#+date: 2018-10-10
#+TITLE: Hardening A Linux Kernel
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | <a href=./>NoSlides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Overview

1. Hardening an Operating System == Harden the kernel + Harden Sys Programs

** Def of an OS

1. OS Definition by Components: 
   1. OS = Kernel + (Boot) + [SysPrg]
   2. Kernel = VM + FileM + ProcM + Net + IO + UserM
1. OS as a Collection of System Calls
1. OS as a Collection of Files: vmlinuz, initrd, /lib/modules/*.
1. OS as a Collection of Processes

** System Programs

1. [List is not exhaustive; traditional, not minimalistic, view.]
1. all of =/sbin=, =/usr/sbin= (can be pruned heavily)
1. all suid root programs

** Kernel Details

2. Kernel is NOT a process.
3. Kernel, like processes, uses pages, segments of virtual memory.
   1. The "text" (machine code) of a kernel is expected to remain
      unchanged during execution.  Just like a process.
   2. Kernel uses a stack.  Has private and public methods.  The
      public methods are offered to user processes as system calls.
4. Kernel discovers the pathname of init program, and invokes it.
5. Except for init, all other processes are created at the request of
   init or its children.  =pstree=
6. Several psuedo file volumes: /proc, /sys, /dev
7. Show-n-Tell: /proc mostly, /boot/abi-4.18.0-8-generic

* Linux Kernel DIY Build

1. Hardening depends on the kernel build how-to.
2. Source code repositories
3. Build Tools
4. Build Overview
   4. Configure the build: =make xconfig= or =make menuconfig=
   5. =make bzImage= about 030 mins on my machine.
   6. =make modules= about 150mins on my machine.
   7. =make install= few seconds
   8. create a new entry in Grub
3. Deploy a new Linux Kernel

** Source Code Repositories

1. The Main Linux Kernel repository https://www.kernel.org/; 
   1. stable:	4.18.12 As of 2018-10-03 =98M Oct  9 21:17 linux-4.18.12.tar.xz=
   2. mainline:	4.19-rc7 As of 2018-10-07 =154M Oct  9 21:14 linux-4.19-rc7.tar.gz=
   1. =$ du -sh linux-4.18.12/= gives 898M    linux-4.18.12/
   2. =$ du -sh linux-4.19-rc7/= gives 908M    linux-4.19-rc7/
1. http://kernel.ubuntu.com/~kernel-ppa/mainline/daily/current/ These
   binary packages represent builds by Ubuntu of the mainline or stable Linux
   kernel tree.

1. =git clone
   git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git= etc.

1. https://scan.coverity.com/projects/linux "Oct 8, 2018 - See how
   defect density for 'Linux' compares with defect density for other
   ... arch/x86/.*, No, 179,049, 0.54. Kernel .*/kernel/.*, No,
   207,512, 0.70 ...... The root cause of each defect is clearly
   explained, making it easy to fix bugs."  Lines of code analyzed‎:
   ‎14,065,141.  Required Visit.

** Kernel Build Overview

1. Guide to follow https://wiki.ubuntu.com/Kernel/BuildYourOwnKernel
   for Ubuntu Linux kernel.  For a generic Linux kernel, follow
   https://wiki.ubuntu.com/KernelTeam/GitKernelBuild
1. Software Tools/ Packages Needed in the build: =sudo apt install git build-essential kernel-package fakeroot libncurses5-dev libssl-dev ccache=
1. =sudo apt install libqt5*-dev=  bison flex libelf-dev
4. Build Overview
   4. Configure the build: =make xconfig= or =make menuconfig=
   5. =make bzImage= about 030 mins on my machine.
   6. =make modules= about 150mins on my machine.
   7. =make install= few seconds
   8. create a new entry in Grub

** Make xconfig, vmlinuz, modules

1. The kernel source code download comes with an extensive Makefile
: -rw-rw-r-- 1 pmateti pmateti 59969 Oct  7 11:26 Makefile

1. Create a Linux kernel configuration: What components to
   include/ exclude / build-as-modules

1. =make xconfig= Invoke it and answer "thousand questions".  Make an
   effort to understand the QAs, but do not get discouraged.  The
   configuration, a text file, is saved to a file named =.config= in
   the current directory.  Web copy of [[./dot-config.txt][.config]] 

: -rw-rw-r-- 1 pmateti pmateti 218282 Oct  9 22:08 .config

1. =make bzImage= Make time depends on how capable your machine is.
   Can take up to 60 minutes on an i7 with 16 GB RAM.

1. =make modules= 

7. =make install= few seconds.  See Deploying a Kernel below.

* Deploying a Kernel

1. Copy the vmlinuz, modules, etc to /boot  Modules are stored in
   =/lib/modules/= kernel-version-number.
   =make install= does this work.

1. Prepare a new menu item in the Grub OS boot loader.

1. Lab Task:  Get a kernel package and deploy it.
   http://kernel.ubuntu.com/~kernel-ppa/mainline/daily/current/linux-image-unsigned-4.19.0-999-lowlatency_4.19.0-999.201810082201_amd64.deb
   This is a built .deb Debian package.  This can be installed by
   =dpkg=

* Awareness of Linux Kernel Exploits

2. Lectures on [[../KernelExploits/]]
   1. BackDoors
   2. SymLinkAttack
   3. RaceConditions            
   4. Viruses   
   5. privilege-escalation.org
   6. RootKits

* Kernel Responsibilities (not bugs)

Kernel should

1. check the integrity of init.
1. track the provenance (of processes)
1. track network activity

* DIY Build of a Secure Kernel 

1. Patches


* References

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
