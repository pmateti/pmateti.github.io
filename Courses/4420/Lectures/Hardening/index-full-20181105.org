
# -*- mode: org -*-
#+date: 2018-08-29
#+TITLE: Hardening an OS (Kernel + SysPrgs)
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | <a href=./>NoSlides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Overview

Abstract

This article is a comprehensive introduction to what is involved in
securing a Linux kernel.  A companion article considers the security
of entire distributions based on the Linux kernel.  By a distribution,
we mean a collection of system tools, applications and, of course, the
kernel.  Securing a distribution therefore includes securing the
kernel itself.  Securing a kernel is not only a harder topic, but also
a topic of specific interest to us and we separate the discussion of
kernel per se into this article.

We describe areas of tightening security prior to the compilation of
OS kernels rather than after their deployment.  We do not consider
applications, not even such standard services as syslogd, kerneld and
inetd.  We do consider the loading and unloading of "modules" (cf.
insmod and rmmod), and a few network configuring tools as part of the
kernel.  We survey all known re-designs of the kernel.  We contribute
several of our own suggestions. We conclude with an outline of how a
secure kernel can be put together incorporating all compatible
security enhancements from the standard components as distributed by
the Linux kernel group.



1. Recall that we previously described Proper Configuration
   [[../LinuxSetup/Config]]
1. Hardening is a widely used tech word, but not well-defined.
   Security industry does some "fortification" and pushes it as
   "hardening".

1. Fortification is a tech word we use in this course.  It is
   semantically in between Configuration and Hardening.  Further
   details in [[./Fortification]].

1. In this course, hardening embraces the content outlined below.

1. This article summarizes the architecture and features of Linux
   kernels that are relevant to security issues rather than increased
   usability or performance.  

* Build a Kernel from Source Code

1. [[./BuildKernel]]

** Deploy

1. =ls -l /boot=
1. =ls -lR /lib/modules/4.18.0-7-generic/ | wc -l= 9418
1. =dmesg=

* Examples of Kernel Bugs

1. [[https://bugzilla.kernel.org/buglist.cgi?chfield=%5BBug%20creation%5D&chfieldfrom=7d][https://bugzilla.kernel.org/]] Bugs reported in the last 7 days  
1. https://medium.com/booking-com-infrastructure/linux-kernel-bug-hunting-35f648c8dbb7
   Linux Kernel bug hunting May 2018

** 2001, For Example

1. Two security bugs found in 2001 Linux kernels: 
1. Through the use of properly constructed chains of symbolic
      links, a local attacker can lock up the kernel for long periods
      of time, thus creating a denial of service.
2. With the proper use of a setuid binary, the =ptrace()= system
      call can be fooled into tracing another setuid program, and thus
      into executing arbitrary code as root.  This can be defeated by
      getting rid of the =newgrp= binary.
3. These bugs have been fixed years ago, but worth understanding.

** Race Conditions
"Temporary file race vulnerabilities occur when privi-leged programs
attempt to create temporary files in an unsafe manner. ÒUnsafeÓ means Ònon-atomic
with respect to an attackerÕs activities.Ó There is no portable standard for
safely (atomically) creating temporary files, and many operating systems have no
safe temporary file creation at all. As a result, many programs continue to use
unsafe means to create temporary files, resulting in widespread vulnerabilities.
This paper presents Race-Guard: a kernel enhancement that detects attempts to
exploit temporary file race vulnerabilities, and does so with sufficient speed
and precision that the attack can be halted before it takes effect. RaceGuard
has been imple-mented, tested, and measured. We show that RaceGuard is effective
at stopping temporary file race attacks, pre-serves compatibility (no legitimate
software is broken), and preserves performance (overhead is minimal)."

** Coverity Analyses of Linux Kernel Bugs

1. https://scan.coverity.com/projects/linux

** Source Code Audit

1. CERT Code Audit Guides
1. [[./SourceCodeAudit]]



* Secure Kernel Ideas

** Freezing Some System Calls
** Provenance


Notes: most kernels permit hiding processes and loaded modules
** Fine-grained privilege
On any computer system, certain operations must bypass the security
constraints normally imposed by the system. For example, in order to create a
backup, the backup operator must be able to run a backup program that is able to
read all files on the disks, even though the operator would not normally be
allowed such access. Other programs must also be carefully controlled, such as
the programs to shut down the system, create new users, and repair damaged file
systems. On a standard Unix system, there is one user ID, called the <i>root</i>,
that can bypass all security restrictions and limitations.  On Windows
NT/2000 systems such privileged accounts are  "System" and
"Administrator".
The inability of standard Unix to grant rights on a finer granularity is a
weakness. Also, when one process invokes another, the newly created process runs
with the user ID of the first.  As a result, the technique of exploiting a
bug in a root program to start an interactive shell has been known for two
decades.
We would like such privileges broken down into finer grained privileges.
Thus, we would like to grant the backup program the privilege to read any file,
but it must not have the privileges to shut down the system, to modify files, or
to, say, send random network packets. The use of many limited capabilities
instead of a single all-powerful mechanism is called the <i>least privilege</i>
principle.

** Authorizations and Privileges
<i>Authorization</i> is an attribute of a user account that enables the user
to execute a subset of  the available programs. <i>Privileges</i> are
attributes assigned to programs that give them different grades of access to
system resources. Together, these two sets of attributes enable programs to
behave differently toward different users. Applications can be extended to
define and check new authorizations, providing a standardized protocol by which
applications and the operating platform can communicate to grant permissions to
users. Authorizations can be used to divide administrative duties into separate
roles, which can then be assigned to different users.
** Independent Validation
Secure kernels should undergo evaluation of their overall design,
verification of the integrity and reliability of their source code, and
systematic, independent penetration evaluation. ITSEC (Information Technology
Security Evaluation Criteria) is an internationally recognized set of standards
for the evaluation, testing, and certification of IT security products. ITSEC
certification, performed by an independent body,  tests the claims made
about the security functionality of a product against a predetermined level of
assurance.

** Access Control Lists

Access Control Lists (ACLs) support fine-grained permissions. Arbitrary users
and groups can be granted or denied access in addition to the three traditional
classes of users.

POSIX 1003.1e Draft Standard 17 Access Control Lists are now part of
many commercial UNIX systems. Extended<i> </i>Attributes are arbitrary
name/value pairs that are associated with files or directories. They
can be used to store system objects (e.g., capabilities of
executables, or Access Control Lists) and user objects (e.g., the
character set or mime type of a file). Access Control Lists are
implementable as extended system attributes.  "When a system has been
"exploited" (rooted), it's commonly believed that complete control
over the system has been achieved. This is rarely, if ever, true
(unless the running kernel has been modified, but that is not the
original problem). What has actually happened is the cracker has
elevated his or her permissions to the point where the discretionary
access protections do not prohibit anything. But the access control
checks are actually still taking place. It is a "feature" of the
access control system to allow this misuse. Access Control Lists
(ACLs) make access control much more flexible for the user to share
data with particular users, but do nothing for the security problems
of the system administrator."

1. Linux trustees (ACL) project
1. https://fedoraproject.org/wiki/Administration_Guide_Draft/ACLs

** Role Based Access Control

Processes are assigned "roles" and levels of access that can be
extremely fine-grained. For example, Apache can be assigned a
web-server-role and be restricted to certain activities.  A port, for
example port 21, can be defined as an object and then grant access to
this port only to the FTP system. Even a program running with root
privileges (such as bind) would not then be able to use port 21 as it
would on an ordinary system.  RBAC implies large scale kernel patches,
patches to system tools, etc.

** Security Policies and their Enforcement

"A security policy is a definition that outlines the rules and
practices to be followed to set up the computer network security in an
organization. How the organization should manage, protect, and
distribute sensitive data is also defined by the security policy."  --
Practical Linux Security Cookbook

** Subdomains

A sub domain specifies on a per program basis which files it can
access and how. So, e.g., a cgi script, even if hijacked by an
attacker would not be able to write to /tmp.

** Subjects, Objects, and Access Matrices

* Making Linux Kernel Secure

This section summarizes various contributions that make the Linux
kernel more secure.  Note that these are separate contributions.  To
our knowledge, there has been no attempt yet to synthesize all these
into one kernel that keeps pace with new releases of the standard
kernel.

** Recompiling with Thorough Checking

1. Linux kernel is written in C and (a tiny portion in) Assembly
1. =gcc= has many flags that enable all kinds of checking
1. On Linux, there are compilers other than =gcc=

** Careful Recompilation

Stack smashing (buffer overflow) attacks are among the most
common.   By and large, these are programming errors that can be
caught by analytical techniques.  Newer compilers are mechanizing these
techniques.  For example, such vulnerabilities are carefully checked by the
Immunix's "StackGuard" enhancements to the GNU egcs compiler.  An
entire RedHat distribution has been recompiled with this compiler resulting in
the distribution of Immunix.



** Libsafe 2

https://github.com/tagatac/libsafe-CVE-2005-1125
Detects and handles buffer overflow attacks

** Patching a Kernel

Patches are often released in binary form, but they they can also be
at the source code level.  These replace section(s) of code in the
kernel.  Often a patch is in response to a newly discovered security
hole.  

http://www.lids.org LIDS (Linux Intrsion Detection System) is a series
of proactive kernel patches.  It provides protection from root
exploits by disabling some functions that can be used to gain
unauthorized access to root. Features such as disabling the loading of
modules, locking routing tables, protecting daemons from signals,
read-only and append-only flags to protect programs or log files from
a root intruder, implementation of capabilities, and much more.

** Kernel Audit

** Loadable Kernel Modules

Loadable kernel modules provide an interface to hardware devices
and data within the kernel memory. Most Unix systems enforce the usage of
loadable kernel modules in order to offer maximum interaction with the
peripherals and the kernel.  Due to those features, kernel modules have
gained the interest of intruders, since they affect the operating system at the
basic level and guarantee an efficient and hard to detect way to manipulate the
system. In the past years loadable kernel modules including backdoors have been
published for Unix systems such as Linux and FreeBSD.</p>
<a href="http://www.linuxsecurity.com/resource_files/host_security/lkm.htm">http://www.linuxsecurity.com/resource_files/host_security/lkm.htm</a> 


** Linux Kernel Security Modules

1. https://github.com/torvalds/linux/blob/master/include/linux/security.h

** Kernel without .ko Modules
** Hypervisors

A hypervisor is a loadable kernel module providing a sand boxed
wrapper.  A master kernel hypervisor coordinates installation and removal
of individual client kernel hypervisors and manages the clients. This framework
allows client kernel hypervisors to be stacked so that a variety of application
specific policies can be implemented, each by means of its own kernel hypervisor.
The hypervisors run in the kernel, but since they are loadable modules, they do
not require that the kernel be modified.


** grsecurity

https://grsecurity.net/ is a set of security patches for Linux.  It features the
Openwall non-executable stack, PaX, the Oblivion ACL system, /proc
restrictions, chroot restrictions, linking and FIFO restrictions, exec
and set*id logging, secure file descriptors, trusted path execution,
randomized IP IDs, randomized PIDs, randomized TCP source ports,
altered ping ids, randomized TTL, better IP stack randomness, socket
restrictions, sysctl support on nearly all options, secure keymap
loading, stealth networking enhancements, signal logging, failed fork
logging, time change logging, and others.  "RAP™ is our patented and
best-of-breed Control Flow Integrity (CFI) defense against code reuse
attacks like ROP. Its performance, security guarantees, and ability to
scale to complex C/C++ codebases of arbitrary size are unmatched."

1. https://news.ycombinator.com/item?id=14633163 Linus: Don't bother
   with grsecurity. Their patches are pure garbage (spinics.net)



** Kernel Verifies =/sbin/init=, and Vice Versa



** Linux Trustees
Linux "trustees" is a permission management system.
https://lwn.net/Articles/111247/  It is inspired
by Novell Netware approach and Java security API.  Special objects, called <i>trustees</i>,
bound to every file and directory,  describe the permissions granted (or
denied) to certain user or group (or all except user or group), with the default
being deny.  </font><font face="Times New Roman,Times,Times NewRoman">The
trustees objects are stored in the kernel memory that allows for fast
lookup.   The permission to access a file (or directory) is calculated as
follows:
<ul>
  Dereference file name, replacing all symbolic links.
  Set initial deny mask to empty mask, and allow mask to U, use Unix rights.
  Starting from root directory check all the parents of file and file itself
    and find trustee objects applicable, and set (or clear, if C in the trustee
    mask)  the rights in trustee mask in the permission mask applicable.
  After the masks for file name is calculated:
    <ul>
      If user is the super user, grant the access.
      If at least one of the access modes requested is denied, deny the
        access.
      If U flag is set in allow mask, and U flag is not set in deny mask,
        and the normal Linux permission code allows the access, grant access
      If all the access flags requested set in allow mask, grant the access
      Otherwise, deny
    </ul>
  
</ul>
Note, that string names (not i-node numbers) are stored in trustees object, so
the trustee system is work despite of the mount points, file system types etc.</font>

** Reference Monitor for Unix Systems
REMUS (REference Monitor for Unix Systems) provides a reference monitor
implemented both as a loadable kernel module and as a kernel patch.   It can
detect illegal invocations of system calls, and also prevent loading of
malicious kernel module.   It also integrates the Access Control Database (ACD)
with the Unix standard virtual file system <code>/proc</code>.  The system
administrator sees the ACD as a directory, each file contains the set of rules
for a given critical system call.   REMUS employs a simple mechanism for
system calls interception at the OS kernel level and requires minimal additions
to the kernel code and no change to the syntax and semantics of existing system
calls.  The execution of system call is allowed only when the invoking process
and the value of the arguments comply with the rules kept in an Access Control
Database (ACD) within the kernel.  Common penetration techniques that involve
tricking the system into running the intruder's own program in privileged mode
are blocked by this approach.  In particular, REMUS blocks buffer overflow
attacks before they can complete.

** Hypersec Kernel

Hypersec is a collection of security patches applied to the standard kernel:

  http://www.openwall.com/linux/README">[OpenWall-1 Patch]</a>
  http://www.theaimsgroup.com/~hlein/hap-linux/">[HAP-3 Linux
    Patch]</a>
  http://www.rsbac.org/documentation.htm">[RSBAC-1.1.1 Patch]</a>
  http://linux01.gwdg.de/~alatham/ppdd.html">[PP DiskDriver-1.2]</a>
  ftp://ftp.v-lo.krakow.pl/pub/linux/patches/sec00r.desc">[Sec00r-2.2.19
    Patch]</a>
  IPVS-1.0.6 Modules
  http://www.vanheusden.com/Linux/kernel_patches.php3">[FP Patch]</a>
  http://www.kerneli.org/">[KernelI-2.2.19]</a>
  http://pageexec.virtualave.net/pageexec.txt">[PAX-2.2.19]</a>
  
    Raw I/O Patch
  

It integrates cryptography and support for encrypting loop back devices,
random PIDs and random TCP Sequence Numbers, Mandatory Access Control, Access
Control Lists, non-executable heap and stack areas, restricted /proc and /tmp,
protection against TCP OS fingerprinting.


** Open Source Cryptography

Encryption is the key to the next generation of [Internet]
communications.  No longer is it possible to use the protocols that
were commonplace in times before electronic commerce, companies
relying on their Internet presence for interacting with customers, and
even basing their corporate image on it.


* Lab Experiments WIP

** Lab on Add-a-SysCall
** Lab on Freeze a few SysCalls
** Lab on StackClash
1. https://blog.qualys.com/securitylabs/2017/06/19/the-stack-clash
1. https://github.com/sagiesec/PIE-Stack-Clash-CVE-2017-1000253 Demo-ing CVE-2017-1000253 in a container
** Lab on Hardening a Kernel

** Lab on Hardening a Distro

* Acknowledgements

The above serves as a quick introduction to the many Linux
distributions/ kernels that claim to be secure.


* References

1.  https://www.qubes-os.org/ "Qubes is a security-oriented,
    free and open-source operating system for personal computers that
    allows you to securely compartmentalize your digital life."  Uses
    Xen hypervisor technology.  Runs Linux programs.

1.  VXE - Virtual eXecuting Environment, http://www.intes.odessa.ua/vxe/

1.  Mike Frantzen, Cerias, and Mike Shuey, "StackGhost: Hardware
   Facilitated Stack Protection," 10th USENIX Security
   Symposium, 2001.

1.  Janus, http://www.cs.berkeley.edu/~daw/janus/</a>
    Janus is a security tool for sandboxing untrusted applications within a
    restricted execution environment.  This can be used to limit the harm that
    can be caused by any successful compromise of the application.  We have
    successfully used Janus to jail Apache, bind, and other programs within a
    limited sandbox without disturbing application behavior, and we continue to
    seek experience with using this approach in production environments.

1.  REMUS Project: REference Monitor for Unix Systems,
   http://twiki.dsi.uniroma1.it/twiki/view/Remus/WebHome

** References

1.  https://kernsec.org/wiki/index.php/Projects Kernel Security
   Projects 2017

1.  Chris Wright and Crispin Cowan, James Morris, Stephen Smalley, Greg
   Kroah-Hartman, Linux Security Module Framework,
   http://www.kroah.com/linux/talks/ols_2002_lsm_paper/lsm.pdf, 2002.

1.  https://source.android.com/security/overview/kernel-security System
   and kernel security 2018

1.  https://lwn.net/Articles/748682/ Safe, dynamically loadable LSM
   hooks, 2018

1.  LKAP: A Manifesto for a Secure Linux Kernel Audit, <a
   href="http://mail.nl.linux.org/kernel-audit/">http://mail.nl.linux.org/kernel-audit/</a>,
   http://www.lkap.org/mission.html">http://www.lkap.org/mission.html</a>

1.  Xie Huagang and Nick DeClario, Build a Secure System with LIDS,
    http://www.linuxsecurity.com/ feature_stories/
    feature_story-12.html</a>, May 2000.


* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
