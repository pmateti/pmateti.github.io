
# -*- mode: org -*-
#+date: 2017-02-06
#+TITLE: Hash Functions
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: Mateti: Android Internals and Security
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2017 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:3

* Hash Functions

All hash functions map a large domain of values into a much smaller
range of values.  When two domain values a and b map to the same v in
the range, we have a collision.  A crypto hash function maps an
enormously large domain into a rather small range of values.  The
well-know crypto hash functions are surprising in that collisions are
difficult to exhibit.  So, computing the inverse of a hash is
considered "computationally infeasible".

#+CAPTION: Hash Function [source: Web]
#+ATTR_HTML: :width 50%
[[./Figures/hash-function.jpg]]

On Linux, you will find =md5sum=, =sha1sum=,  and =sha512sum=.  Below,
we show the results for the word "test" and an .iso file.  The output
is in hex-digits, always fixed length, no matter what the length of
input is.

: % echo test | md5sum
: d8e8fca2dc0f896fd7cb4cb0031ba249  -

: % echo test | sha1sum 
: 4e1243bd22c66e76c2ba9eddc1f91394e57f9f83  -

: % time sha1sum kali-linux-2016.2-amd64.iso 
: 25cc6d53a8bd8886fcb468eb4fbb4cdfac895c65  kali-linux-2016.2-amd64.iso
: real    0m14.853s, user    0m10.724s, sys     0m1.120s

: echo test | sha512sum
: 0e3e75234abc68f4378a86b3f4b32a198ba301845b0cd6e50106e874345700cc6663a86c1ea125dc5e92be17c98f9a0f85ca9d5f595db2012f7cc3571945c123  -


: % time md5sum /var/Public/Software/OSISO/kali-linux-2016.2-amd64.iso 
: real 0m17.120s; user 0m8.500s; sys 0m1.480s
: 3d163746bc5148e61ad689d94bc263f9; 

** Pigeon Hole Principle

The input domain of a crypto hash function is very, very, ... large
compared to the size of the output range.  Thus, it cannot be that for
every pair of inputs a and b, hash(a) != hash(b).  But, for all the
well-known hash functions (such as MD5, SHA1, and SHA512), the world
could not discover/ design a and b so that hash(a) == hash(b).  (This
is called a collision.)  Until recently, that is.

[[http://www.mscs.dal.ca/~selinger/md5collision/][MD5 Collision Demo, 2006]]: The algorithm of Wang and Yu 2005 [[http://pds10.egloos.com/pds/200810/20/90/How_to_Break_MD5_and_Other_Hash_Functions.pdf][PDF]] can be
used to create files of arbitrary length that have identical MD5
hashes, and that differ only in 128 bytes somewhere in the middle of
the file. Several people have used this technique to create pairs of
interesting files with identical MD5 hashes.

[[https://www.theregister.co.uk/2017/02/23/google_first_sha1_collision/][SHA1 Collision, News, Feb 2017]]: 'First ever' SHA-1 hash collision
calculated.  All it took were five clever brains... and 6,610 years of
processor time.  [[https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html][GoogleBlog]]

Both MD5 and SHA1 are broken in that we can algorithmically construct
distinct inputs a, b, c, d such that MD5sum(a) = MD5sum(b), and
SHA1sum(c) = SHA1sum(d).  It is not known (as of 2017) if two inputs x
and y can be constructed so that not only (i) MD5sum(x) = MD5sum(y)
but also (ii) SHA1sum(x) = SHA1sum(y).



* Hash Types

1. http://www.geek-kb.com/how-to-generate-rainbow-tables-using-winrtgen/
   has a list.  The rest of the article is a dumb repeat.

* References

1. Prabhaker Mateti, Hash functions, 2017.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
