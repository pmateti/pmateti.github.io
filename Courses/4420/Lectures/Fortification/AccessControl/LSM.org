# -*- mode: org -*-
#+DATE: 2015-08-15
#+TITLE: Linux Security Modules (LSM)
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:1
#+HTML_LINK_HOME: ../../
#+HTML_LINK_UP: ../
#+DESCRIPTION: WSU CEG 4900/6900 Android Internals and Security
#+HTML_HEAD: <style> P {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "%d <a href=\"../../Top/\"> TOP</a> | <a href=\"nsa-se-slides.html\"> Slides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> %d"))
#+STYLE: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STARTUP:showeverything
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.4)

* LKM (Linux Kernel Modules)

1. "Modules" of code that are needed in some installations and not in
   others.  If needed always, compile/build as built-ins.

1. Object code file, .ko extension; see =/lib/modules/=

1. =insmod= loads a module; kernel address space expands,
   now includes the methods of the module; some of them are syscalls.
1. =rmmod= unload the module; kernel no longer has the module and its
   methods.
1. =lsmod= list the kernel module currently in the kernel
1. Path name of where the modules are: 
: root@Sutherland:~# ls /lib/modules/4.12.0-12-generic/ -R | wc -l
8164

* LSM (Linux Security Modules)

1. Goal: Modularize security as much as possible.  An LSM is an LKM.

1. http://elixir.free-electrons.com/linux/latest/source/include/linux/security.h
1. hooks := upcalls to a module's methods at security-critical
   points within the kernel

1. An LSM author can control functions called by these hooks to
   enforce policies
1. Linux also adds an opaque security pointer that LSM can use to
   store security info they need in processes, inodes, sockets, etc.

1. LSM hooks are placed so that the Linux DAC checks are performed
   first, and only if they succeed, is LSM code invoked.

** Access Control with LSM Module

#+CAPTION: Access Control with LSM Module
#+ATTR_HTML: :alt lsm-access.jpg :align center :width 80%
[[./Figs/lsm-access.jpg]]

** LSM #2

1. https://www.kernel.org/doc/htmldocs/lsm/ General Security Hooks for Linux
1. Despite LSM being developed as a security API, LSM provides hooks
   that could be used by rootkits. http://grsecurity.net/lsm.php

** LSM #3

1. Opaque Security Fields were added to objects
1. Security Function Hooks were added in important accesses
1. A security System Call was added
1. Registering security modules
1. Modify capabilities to reduce the capable call

** LSM #4

1. Additional hooks were provided for working with tasks (nice, kill,
   setuid)
1. for program loading and controlling inheritance of state across program executions (such as file descriptors)
1. for IPC
1. for file ops (read, write, sockets)
1. for network ops (devices, syscalls, sk-buffs)
1. for module operations (create, register, delete)
1. for sytem operations (hostname, accessing I/O ports, process accounting)


* References

6. http://www.linux.com/learn/docs/727873-overview-of-linux-kernel-security-features/
   2013.  Highly recommended reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
