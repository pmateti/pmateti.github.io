<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-11-18 Mon 08:17 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Access Control Models</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Prabhaker Mateti" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2019 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="org-div-home-and-up">
 <a accesskey="h" href="../"> UP </a>
 |
 <a accesskey="H" href="../../Top/index.html"> HOME </a>
</div><div id="preamble" class="status">
<a href="../../"> ../../</a>
</div>
<div id="content">
<h1 class="title">Access Control Models</h1>

<div id="outline-container-org5b17b95" class="outline-2">
<h2 id="org5b17b95"><span class="section-number-2">1</span> Access Control Principles</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>Who (subject) can do What (operations) on Whom (objects) ?</li>

<li>Privilege of Least Authority: Who can/ should do an operation P on
object B?  Among the "who", the group that has the least authority
should.</li>

<li>Develop Fine-Grained Access Control Permissions</li>
<li>Ex: Read/write permissions are too coarse.  A "back-up operator"
can be given rw permissions &#x2013; but this is too much.  We can
design/implement a new permission that can "just copy" files.  This
copy operation is fine grained.</li>
<li>Role Based Access Control (RBAC)</li>
</ol>
</div>
</div>

<div id="outline-container-org89f875c" class="outline-2">
<h2 id="org89f875c"><span class="section-number-2">2</span> Access Control Models and Mechanisms</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li><a href="./DAC.html">./DAC.html</a> Discretionary Access Control; Linux default permissions</li>
<li><a href="./MAC.html">./MAC.html</a> Mandatory Access Control; Users cannot change these policies</li>
<li><a href="./LKM.html">./LKM.html</a> Linux Kernel Modules</li>
<li><a href="./LSM.html">./LSM.html</a> Linux Security Modules</li>
<li><a href="./SELinux/">./SELinux/</a> "Security Enhanced" Linux LSM; contributed by NSA (2000s?)</li>
<li><a href="./SELinux/seandroid.html">./SELinux/seandroid.html</a> SELinux adapted to Android</li>
</ol>
</div>
</div>

<div id="outline-container-org5317b4c" class="outline-2">
<h2 id="org5317b4c"><span class="section-number-2">3</span> Capabilities</h2>
<div class="outline-text-2" id="text-3">
<ol class="org-ol">
<li>The <code>root</code> user normally has complete control over all functions of
a Linux box.  Binding to a privileged port, loading kernel modules,
and managing filesystems are examples of things that typically can
only be done by root.  If a regular user needed to run the "ping"
command, for example, it was necessary to make it run with the
privileges of the root user.   The ping binary needs root privileges
in order to open a raw socket (an operation managed by the kernel)
to create the necessary ICMP packet for the echo request.</li>

<li>Another classic example is the time server, xntpd.  In order to bind
to the privileged ntp port, the daemon requires root privileges.  If
we could somehow simply supply the ntp daemon with root privileges
for the time it takes to manipulate the system clock as the daemon
starts, then lower its privileges to that of a normal user before
processing actually starts, we can significantly reduce the
potential for a programming error from compromising the whole
system.</li>

<li>Once these privileges are relinquished, it's effectively gone until
the next reboot.  Even another root process cannot regain those
privileges.</li>

<li>This is where capabilities become a critical next step in the
evolution of system and kernel security.  Capabilities support
extends the UNIX security model and allows Linux to provide more
fine-grained access to privileged system commands.  It is a set of
"rules" that can be assigned to processes, users, and files that
even the root user must follow.</li>

<li>Linux 2.2 introduced basic support, but a modification by Chris
Evans to the 2.4 kernel turned capabilities into a system that is
largely useable and can be programmed into many of the common
services, such as the ntp daemon.  Chris' change involved a
modification to the <code>prctl()</code> system call that permits a program
implementing capabilities to retain its existing level of
capabilities while switching from running as root to a non-root
user.</li>

<li>Linux 2.4 implemented nine of the capabilities from the original
draft, and an additional twenty-one that are specific to Linux.</li>

<li>Some of these capabilities include the ability to change file
ownership, kill processes, control kernel module management, reboot
or shutdown the machine, manipulate the system clock, and more.  One
can immediately see how powerful this is &#x2013; processes that are
normally set-user-id root such as /bin/ping or simply must be run
as root can now run with just the privileges they need and no more,
diminishing the likelihood of a security problem resulting in a
system compromise.</li>

<li>Capabilities can also be controlled on a system-wide level using a
"bounding set." The ability to load or unload modules might be one
such capability.  The <a href="http://www.linuxsecurity.com/feature_stories/capability.h">CAP-SYS-MODULE</a> might be disabled once the
system has booted and entered the normal multi-user level to
prohibit the loading or unloading of kernel modules essentially
until the next reboot.  Using the lcap command, one might disable
the ability to load kernel modules using the following: <code># lcap
   CAP_SYS_MODULE</code> .   This would typically be done at the first point
at which all the necessary modules have been loaded.  This is an
effective countermeasure against a malicious intruder attempting to
install a backdoor kernel module.  The CAP<sub>SYS</sub><sub>RAW</sub><sub>IO</sub> capability
would also disabled to prevent hacking kernel memory directly using
<code>/dev/kmem</code>.</li>

<li>A program such as xntpd might go through the following process to relinquish
the rights that are not necessary for normal operation:
<ol class="org-ol">
<li>Start with full root privileges as it normally does</li>
<li>Bind to the privileged ntp port</li>
<li>Drop all capabilities other than <code>CAP_SYS_TIME</code></li>
<li>Drop root privileges (preventing it from even writing to root-owned files)</li>
<li>Continue normal operation as a regular administrative account&lt;/li&gt;</li>
</ol></li>

<li>Future changes yet to be completely implemented include the
modification to commands similar to chattr(1) to modify and tag
files that will one day totally remove the concept of a "root"
user.  The goal is to provide the ability for a command-line tool to
add or remove privileges in much the same way we current add or
remove permissions using &lt;tt class="tt"&gt;chmod(1)&lt;/tt&gt;.</li>

<li>Currently, programs need to be modified to take advantage of
capabilities.   With filesystem capabilities, this becomes easier.</li>
</ol>
</div>
</div>

<div id="outline-container-orgf904c86" class="outline-2">
<h2 id="orgf904c86"><span class="section-number-2">4</span> POSIX capabilities</h2>
<div class="outline-text-2" id="text-4">
<p>
POSIX capabilities can turn a setuid-root file into a file with
minimum privileges, run a daemon with uid=0 but with almost no
superuser privileges, etc.  Privileges are granted to processes
instead of users.  Pcaps divide privileges that are typically granted
to root user.  Pcaps are implemented in Linux kernels since 2.6.x;
<code>capsh, getpcaps, getcap, setcap</code> are some of the tools.
</p>

<p>
The table below presents PCaps for a few typical suid-root binaries.
The CAP-names used are defined in <code>/usr/include/linux/capability.h</code> .
</p>


<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<tbody>
<tr>
<td class="org-left">ping</td>
<td class="org-left">CAP-NET-RAW (13)</td>
</tr>

<tr>
<td class="org-left">chsh</td>
<td class="org-left">CAP-CHOWN (0), CAP-DAC-READ-SEARCH (2), CAP-FSETID (4), CAP-SETUID (7)</td>
</tr>

<tr>
<td class="org-left">chfn</td>
<td class="org-left">CAP-CHOWN (0), CAP-DAC-READ-SEARCH (2), CAP-FSETID (4), CAP-SETUID (7)</td>
</tr>

<tr>
<td class="org-left">chage</td>
<td class="org-left">CAP-DAC-READ-SEARCH (2)</td>
</tr>

<tr>
<td class="org-left">passwd</td>
<td class="org-left">CAP-CHOWN (0), CAP-DAC-OVERRIDE (1), CAP-FOWNER (3)</td>
</tr>

<tr>
<td class="org-left">mount</td>
<td class="org-left">CAP-DAC-OVERRIDE (1), CAP-SYS-ADMIN (21)</td>
</tr>

<tr>
<td class="org-left">umount</td>
<td class="org-left">CAP-DAC-OVERRIDE (1), CAP-SYS-ADMIN (21)</td>
</tr>
</tbody>
</table>


<p>
To change, run <code>chmod u-s /usr/bin/chsh; setcap 0,2,4,7=ep
  /usr/bin/chsh</code>
</p>
</div>
</div>



<div id="outline-container-org5c5a48b" class="outline-2">
<h2 id="org5c5a48b"><span class="section-number-2">5</span> End</h2>
<div class="outline-text-2" id="text-5">
</div>
</div>
</div>
<div id="postamble" class="status">
<hr size=1>Copyright &copy; 2017 <a href="http://www.wright.edu/~pmateti">www.wright.edu/~pmateti</a> &bull; 2017-09-11
</div>
</body>
</html>
