
# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+STARTUP:showeverything
#+TITLE: Fortification TBD
#+AUTHOR: Prabhaker Mateti
#+OPTIONS: toc:1
#+LINK_HOME: ../Top
#+LINK_UP: ../../index.html
#+DESCRIPTION: Online CEG6420 Course
#+STYLE: <style> P { text-align: justify } @media screen {BODY {margin: 10%} }</style>
#+BIND: org-export-html-preamble-format (("en" "<a href=\"http://cecs.wright.edu/~pmateti/Courses/4420/\">OnLine CEG 6420: Computer Security</a>"))
#+BIND: org-export-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2013 &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a> &bull; %d"))


* Educational Objectives

Students should be able to

1. Determine minimal sofware that meets the expected system functionality
1. Uninstall unneeded components
1. Install security improving components
1. TBD 

* What is Fortification?

1. Install and configure additional software that improves security
1. Removing unnecessary services/software
1. Security updates/ patching the OS and system utilities
1. Example Fortifications
   1. Encrypted File Systems
   1. Virus detection and removal
   1. Rootkit Detection and Removal
   1. Continuous System Audit
   1. Containers (Lightweight virtualization)
   1. SELinux security enhancements from NSA

* Notable Linux Security Updates
1. CVE-2013-2888, ... Crashing the system via DoS, Privilege Escalation, Information leak

* Malware
1. Malware = viruses + worms + Trojans
1. Linux/Unix can be infected with malware.
1. E.g.,  "The Hand of Thief" 2013 banking Trojan protype
1. A Linux server can scan and remove viruses from Windows files

* Linux Kernel Internals: Digging Deeper 
** namespaces
1. (ipc, uts, mount, pid, network and user)

** Seccomp (secure computing mode)
1. sandboxing mechanism in the kernel
1. After a process starts, a one-way transition into a state
   where no system calls except =exit, sigreturn,
   read, write= and =close= are permitted.
1. Attempts to other system calls, will =SIGKILL= the process.
1. Process enters =seccom= via =prctl()= system call
1. Programs using this: OpenSSH, vsftpd, Chrome, ...

** Chroots
** capabilities
** Control Groups (cgroups)

* Rootkit Removal
** What are Rootkits, Trojans and Backdoors
** How do rootkit programs work?
** Contents of Linux Root Kit 5
** Detecting Rootkis
** Removal of Rootkits

* System Audit
1. tripwire

* Secure Linux containers

** What is a Container?
1. Lightweight virtual OSs running inside Linux
2. Not a virtual machine like VirtualBox or VMware
3. A container is a group of processes in a "box"
   1. Inside the box, it looks like a VM.
   2. Outside the box, it TBD looks like normal processes.
   3. "chroot on steroids"
1. Process isolation
1. Name space isolation
1. What is a Hypervisor?
1. Example container software: LXC, Docker, OpenVZ.org

** LXC on Ubuntu
1. https://help.ubuntu.com/lts/serverguide/lxc.html
1. # apt-get install lxc
1. LXC v KVM 
   KVM is a virtual machine running on Linux kernel
   Relies on assistance from the CPU 
   Uses paravirtualization to reduce overhead

1. LXC v Xen
   Both are light weight virtual OS, not VM

* AppArmor
1. AppArmor is a Linux Security Module (LSM)
1. Name-based Access Controls

. AppArmor confines individual programs to a set of
listed files and posix 1003.1e draft capabilities.

* SELinux

* ptrace scope

* Lab Experiment
1. Takes 1 to 2 hours by the student
1. Practices things discussed above, but not all
   1. Includes list: tripwire, ?webmin
   1. Excluded list: password cracking (a separate lab)

1. Download a Linux ISO we provide (time taken not counted)
1. Student installs on a USBD or in a virtual box (10 - 15 min)
1. Examines this system (30 min)
1. Fortifies this system (60 min)
1. Writes a lab report (30 min)

* Misc

** Linux Memory Forensics  


1. =ls -l /proc/sys/vm=
1. Keep kernel details confidential =ls -l /boot=
#+begin_src bash
-rw-r--r-- 1 root    root     1007311 Oct  2 19:19 abi-3.11.0-11-lowlatency
-rw-r--r-- 1 root    root      163504 Oct  2 19:19 config-3.11.0-11-lowlatency
-rw-r--r-- 1 root    root    26228945 Oct 17 23:33 initrd.img-3.11.0-11-lowlatency
-rw------- 1 root    root     3310511 Oct  2 19:19 System.map-3.11.0-11-lowlatency
-rw------- 1 root    root     5674032 Oct  2 19:19 vmlinuz-3.11.0-11-lowlatency
#+end_src

** Restrict unprivileged access to the kernel syslog (SECURITY_DMESG_RESTRICT)

CONFIG_SECURITY_DMESG_RESTRICT:

This enforces restrictions on unprivileged users reading the kernel
syslog via dmesg(8).

If this option is not selected, no restrictions will be enforced
unless the dmesg_restrict sysctl is explicitly set to (1).

If you are unsure how to answer this question, answer N.

Symbol: SECURITY_DMESG_RESTRICT [=n]
Type : boolean
Prompt: Restrict unprivileged access to the kernel syslog
Location:
-> Security options
Defined at security/Kconfig:9

** Enable different security models (SECURITY)

CONFIG_SECURITY:

This allows you to choose different security modules to be
configured into your kernel.

If this option is not selected, the default Linux security
model will be used.

If you are unsure how to answer this question, answer N.

Symbol: SECURITY [=y]
Type : boolean
Prompt: Enable different security models
Location:
-> Security options
Defined at security/Kconfig:21
Depends on: SYSFS [=y]

** Enable the securityfs filesystem (SECURITYFS)

CONFIG_SECURITYFS:

This will build the securityfs filesystem. It is currently used by
the TPM bios character driver and IMA, an integrity provider. It is
not used by SELinux or SMACK.

If you are unsure how to answer this question, answer N.

Symbol: SECURITYFS [=y]
Type : boolean
Prompt: Enable the securityfs filesystem
Location:
-> Security options
Defined at security/Kconfig:33
Selected by: TCG_TPM [=y] && HAS_IOMEM [=y] || SECURITY_TOMOYO [=y] && SECURITY [=y] && NET [=y] || SECURITY_APPARMOR [=y] && SECURITY [=y] && NET [=y] || SECURITY_YAMA [=y] && SECURITY [=y] || IMA [=n] && SECURITY [=y]


** Security hooks for pathname based access control (SECURITY_PATH)

CONFIG_SECURITY_PATH:

This enables the security hooks for pathname based access control.
If enabled, a security module can use these hooks to
implement pathname based access controls.
If you are unsure how to answer this question, answer N.

Symbol: SECURITY_PATH [=y]
Type : boolean
Prompt: Security hooks for pathname based access control
Location:
-> Security options
Defined at security/Kconfig:64
Depends on: SECURITY [=y]
Selected by: SECURITY_TOMOYO [=y] && SECURITY [=y] && NET [=y] || SECURITY_APPARMOR [=y] && SECURITY [=y] && NET [=y] || SECURITY_YAMA [=y] && SECURITY [=y]

** NSA SELinux Support (SECURITY_SELINUX)

CONFIG_SECURITY_SELINUX:

This selects NSA Security-Enhanced Linux (SELinux).
You will also need a policy configuration and a labeled filesystem.
If you are unsure how to answer this question, answer N.

Symbol: SECURITY_SELINUX [=y]
Type : boolean
Prompt: NSA SELinux Support
Location:
-> Security options
Defined at security/selinux/Kconfig:1
Depends on: SECURITY_NETWORK [=y] && AUDIT [=y] && NET [=y] && INET [=y]
Selects: NETWORK_SECMARK [=y]

** Simplified Mandatory Access Control Kernel Support (SECURITY_SMACK)

CONFIG_SECURITY_SMACK:

This selects the Simplified Mandatory Access Control Kernel.
Smack is useful for sensitivity, integrity, and a variety
of other mandatory security schemes.
If you are unsure how to answer this question, answer N.


Symbol: SECURITY_SMACK [=y]
Type : boolean
Prompt: Simplified Mandatory Access Control Kernel Support
Location:
-> Security options
Defined at security/smack/Kconfig:1
Depends on: NET [=y] && INET [=y] && SECURITY [=y]
Selects: NETLABEL [=y] && SECURITY_NETWORK [=y]

** TOMOYO Linux Support (SECURITY_TOMOYO)

CONFIG_SECURITY_TOMOYO:

This selects TOMOYO Linux, pathname-based access control.
Required userspace tools and further information may be
found at <http://tomoyo.sourceforge.jp/>.
If you are unsure how to answer this question, answer N.

Symbol: SECURITY_TOMOYO [=y]
Type : boolean
Prompt: TOMOYO Linux Support
Location:
-> Security options
Defined at security/tomoyo/Kconfig:1
Depends on: SECURITY [=y] && NET [=y]
Selects: SECURITYFS [=y] && SECURITY_PATH [=y] && SECURITY_NETWORK [=y]


** AppArmor support (SECURITY_APPARMOR)

CONFIG_SECURITY_APPARMOR:

This enables the AppArmor security module.
Required userspace tools (if they are not included in your
distribution) and further information may be found at
http://apparmor.wiki.kernel.org

If you are unsure how to answer this question, answer N.

Symbol: SECURITY_APPARMOR [=y]
Type : boolean
Prompt: AppArmor support
Location:
-> Security options
Defined at security/apparmor/Kconfig:1
Depends on: SECURITY [=y] && NET [=y]
Selects: AUDIT [=y] && SECURITY_PATH [=y] && SECURITYFS [=y] && SECURITY_NETWORK [=y]

** Yama support (SECURITY_YAMA)

CONFIG_SECURITY_YAMA:

This selects Yama, which extends DAC support with additional
system-wide security settings beyond regular Linux discretionary
access controls. Currently available is ptrace scope restriction.
Further information can be found in Documentation/security/Yama.txt.

If you are unsure how to answer this question, answer N.

Symbol: SECURITY_YAMA [=y]
Type : boolean
Prompt: Yama support
Location:
-> Security options
Defined at security/yama/Kconfig:1
Depends on: SECURITY [=y]
Selects: SECURITYFS [=y] && SECURITY_PATH [=y]

** Digital signature verification using multiple keyrings (INTEGRITY_SIGNATURE)

CONFIG_INTEGRITY_SIGNATURE:

This option enables digital signature verification support
using multiple keyrings. It defines separate keyrings for each
of the different use cases - evm, ima, and modules.
Different keyrings improves search performance, but also allow
to "lock" certain keyring to prevent adding new keys.
This is useful for evm and module keyrings, when keys are
usually only added from initramfs.

Symbol: INTEGRITY_SIGNATURE [=y]
Type : boolean
Prompt: Digital signature verification using multiple keyrings
Location:
-> Security options
Defined at security/integrity/Kconfig:6
Depends on: INTEGRITY [=y] && KEYS [=y]
Selects: SIGNATURE [=y]

** Enables integrity auditing support (INTEGRITY_AUDIT)

CONFIG_INTEGRITY_AUDIT:

In addition to enabling integrity auditing support, this
option adds a kernel parameter 'integrity_audit', which
controls the level of integrity auditing messages.
0 - basic integrity auditing messages (default)
1 - additional integrity auditing messages

Additional informational integrity auditing messages would
be enabled by specifying 'integrity_audit=1' on the kernel
command line.

Symbol: INTEGRITY_AUDIT [=y]
Type : boolean
Prompt: Enables integrity auditing support 
Location:
-> Security options
Defined at security/integrity/Kconfig:20
Depends on: INTEGRITY [=y] && AUDIT [=y]


** Enable asymmetric keys support (INTEGRITY_ASYMMETRIC_KEYS)

CONFIG_INTEGRITY_ASYMMETRIC_KEYS:

This option enables digital signature verification using
asymmetric keys.

Symbol: INTEGRITY_ASYMMETRIC_KEYS [=y]
Type : boolean
Prompt: Enable asymmetric keys support
Location:
-> Security options
Defined at security/integrity/Kconfig:35
Depends on: INTEGRITY_SIGNATURE [=y]
Selects: ASYMMETRIC_KEY_TYPE [=y] && ASYMMETRIC_PUBLIC_KEY_SUBTYPE [=y] && PUBLIC_KEY_ALGO_RSA [=y] && X509_CERTIFICATE_PARSER [=y]

** Integrity Measurement Architecture(IMA) (IMA)

CONFIG_IMA:

The Trusted Computing Group(TCG) runtime Integrity
Measurement Architecture(IMA) maintains a list of hash
values of executables and other sensitive system files,
as they are read or executed. If an attacker manages
to change the contents of an important system file
being measured, we can tell.

If your system has a TPM chip, then IMA also maintains
an aggregate integrity value over this list inside the
TPM hardware, so that the TPM can prove to a third party
whether or not critical system files have been modified.
Read <http://www.usenix.org/events/sec04/tech/sailer.html>
to learn more about IMA.
If unsure, say N.

Symbol: IMA [=n]
Type : boolean
Prompt: Integrity Measurement Architecture(IMA)
Location:
-> Security options
Defined at security/integrity/ima/Kconfig:3
Depends on: SECURITY [=y]
Selects: INTEGRITY [=y] && SECURITYFS [=y] && CRYPTO [=y] && CRYPTO_HMAC [=y] && CRYPTO_MD5 [=y] && CRYPTO_SHA1 [=y] && TCG_TPM [=y] && TCG_TIS [=m] && TCG_IBMVTPM [=n]


** EVM support (EVM)

CONFIG_EVM:

EVM protects a file's security extended attributes against
integrity attacks.

If you are unsure how to answer this question, answer N.

Symbol: EVM [=y]
Type : boolean
Prompt: EVM support
Location:
-> Security options
Defined at security/integrity/evm/Kconfig:1
Depends on: SECURITY [=y] && KEYS [=y] && TRUSTED_KEYS [=y]!=m
Selects: CRYPTO_HMAC [=y] && CRYPTO_MD5 [=y] && CRYPTO_SHA1 [=y] && ENCRYPTED_KEYS [=y]

** Default security module

Select the security module that will be used by default if the
kernel parameter security= is not specified.


Prompt: Default security module
Location:
-> Security options
Defined at security/Kconfig:128
Selected by: m
SELinux (DEFAULT_SECURITY_SELINUX)

There is no help available for this option.
Symbol: DEFAULT_SECURITY_SELINUX [=n]
Type : boolean
Prompt: SELinux
Location:
-> Security options
-> Default security module (<choice> [=y])
Defined at security/Kconfig:141
Depends on: <choice>


** Simplified Mandatory Access Control (DEFAULT_SECURITY_SMACK)

There is no help available for this option.
Symbol: DEFAULT_SECURITY_SMACK [=n]
Type : boolean
Prompt: Simplified Mandatory Access Control
Location:
-> Security options
-> Default security module (<choice> [=y])
Defined at security/Kconfig:144
Depends on: <choice>


** TOMOYO (DEFAULT_SECURITY_TOMOYO)

There is no help available for this option.
Symbol: DEFAULT_SECURITY_TOMOYO [=n]
Type : boolean
Prompt: TOMOYO
Location:
-> Security options
-> Default security module (<choice> [=y])
Defined at security/Kconfig:147
Depends on: <choice>
AppArmor (DEFAULT_SECURITY_APPARMOR)

There is no help available for this option.
Symbol: DEFAULT_SECURITY_APPARMOR [=y]
Type : boolean
Prompt: AppArmor
Location:
-> Security options
-> Default security module (<choice> [=y])
Defined at security/Kconfig:150
Depends on: <choice>



** Yama (DEFAULT_SECURITY_YAMA)

There is no help available for this option.
Symbol: DEFAULT_SECURITY_YAMA [=n]
Type : boolean
Prompt: Yama
Location:
-> Security options
-> Default security module (<choice> [=y])
Defined at security/Kconfig:153
Depends on: <choice>


** Unix Discretionary Access Controls (DEFAULT_SECURITY_DAC)

There is no help available for this option.
Symbol: DEFAULT_SECURITY_DAC [=n]
Type : boolean
Prompt: Unix Discretionary Access Controls
Location:
-> Security options
-> Default security module (<choice> [=y])
Defined at security/Kconfig:156
Depends on: <choice>

** Asymmetric public-key crypto algorithm subtype (ASYMMETRIC_PUBLIC_KEY_SUBTYPE)

CONFIG_ASYMMETRIC_PUBLIC_KEY_SUBTYPE:

This option provides support for asymmetric public key type handling.
If signature generation and/or verification are to be used,
appropriate hash algorithms (such as SHA-1) must be available.
ENOPKG will be reported if the requisite algorithm is unavailable.

Symbol: ASYMMETRIC_PUBLIC_KEY_SUBTYPE [=y]
Type : tristate
Prompt: Asymmetric public-key crypto algorithm subtype
Location:
-> Cryptographic API (CRYPTO [=y])
-> Asymmetric (public-key cryptographic) key type (ASYMMETRIC_KEY_TYPE [=y])
Defined at crypto/asymmetric_keys/Kconfig:12
Depends on: CRYPTO [=y] && ASYMMETRIC_KEY_TYPE [=y]
Selects: MPILIB [=y]
Selected by: MODULE_SIG [=y] && MODULES [=y] || INTEGRITY_ASYMMETRIC_KEYS [=y] && INTEGRITY_SIGNATURE [=y]


** RSA public-key algorithm (PUBLIC_KEY_ALGO_RSA)

CONFIG_PUBLIC_KEY_ALGO_RSA:

This option enables support for the RSA algorithm (PKCS#1, RFC3447).

Symbol: PUBLIC_KEY_ALGO_RSA [=y]
Type : tristate
Prompt: RSA public-key algorithm
Location:
-> Cryptographic API (CRYPTO [=y])
-> Asymmetric (public-key cryptographic) key type (ASYMMETRIC_KEY_TYPE [=y])
-> Asymmetric public-key crypto algorithm subtype (ASYMMETRIC_PUBLIC_KEY_SUBTYPE [=y])
Defined at crypto/asymmetric_keys/Kconfig:21
Depends on: CRYPTO [=y] && ASYMMETRIC_KEY_TYPE [=y] && ASYMMETRIC_PUBLIC_KEY_SUBTYPE [=y]
Selects: MPILIB_EXTRA
Selected by: MODULE_SIG [=y] && MODULES [=y] || INTEGRITY_ASYMMETRIC_KEYS [=y] && INTEGRITY_SIGNATURE [=y]

** X.509 certificate parser (X509_CERTIFICATE_PARSER)

CONFIG_X509_CERTIFICATE_PARSER:

This option procides support for parsing X.509 format blobs for key
data and provides the ability to instantiate a crypto key from a
public key packet found inside the certificate.

Symbol: X509_CERTIFICATE_PARSER [=y]
Type : tristate
Prompt: X.509 certificate parser
Location:
-> Cryptographic API (CRYPTO [=y])
-> Asymmetric (public-key cryptographic) key type (ASYMMETRIC_KEY_TYPE [=y])
-> Asymmetric public-key crypto algorithm subtype (ASYMMETRIC_PUBLIC_KEY_SUBTYPE [=y])
Defined at crypto/asymmetric_keys/Kconfig:28
Depends on: CRYPTO [=y] && ASYMMETRIC_KEY_TYPE [=y] && ASYMMETRIC_PUBLIC_KEY_SUBTYPE [=y]
Selects: ASN1 [=y] && OID_REGISTRY [=y]
Selected by: MODULE_SIG [=y] && MODULES [=y] || INTEGRITY_ASYMMETRIC_KEYS [=y] && INTEGRITY_SIGNATURE [=y]



* References

