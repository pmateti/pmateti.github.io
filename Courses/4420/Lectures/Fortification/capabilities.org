
** Capabilities

As you know, the "root" user normally has complete control over all
functions of a Linux box. Binding to a privileged port, loading kernel modules,
and managing filesystems are examples of things that typically can only be done
by root. If a regular user needed to run the "ping" command, for
example, it was necessary to make it run with the privileges of the root user.
The ping binary needs root privileges in order to open a raw socket (an
operation managed by the kernel) to create the necessary ICMP packet for the
echo request.
Another classic example is the time server, xntpd. In order to bind to the
privileged ntp port, the daemon requires root privileges. If we could somehow
simply supply the ntp daemon with root privileges for the time it takes to
manipulate the system clock as the daemon starts, then lower its privileges to
that of a normal user before processing actually starts, we can significantly
reduce the potential for a programming error from compromising the whole system.
Once these privileges are relinquished, it's effectively gone until the next
reboot. Even another root process cannot regain those privileges.
This is where capabilities become a critical next step in the evolution of
system and kernel security. Capabilities support extends the UNIX security model
and allows Linux to provide more fine-grained access to privileged system
commands. It is a set of "rules" that can be assigned to processes,
users, and files that even the root user must follow.
Linux 2.2 introduced basic support, but a modification by Chris Evans to the
2.4 kernel turned capabilities into a system that is largely useable and can be
programmed into many of the common services, such as the ntp daemon. Chris'
change involved a modification to the <tt class="tt">prctl()</tt> system call
that permits a program implementing capabilities to retain its existing level of
capabilities while switching from running as root to a non-root user.
Originally a http://www.guug.de/~winni/posix.1e/" target="_blank">POSIX.1e</a>
specification, now withdrawn but still a useful guide, Linux 2.4 implements nine
of the capabilities from the original draft, and an additional twenty-one that
are specific to Linux.
Some of these capabilities include the ability to change file ownership, kill
processes, control kernel module management, reboot or shutdown the machine,
manipulate the system clock, and more. One can immediately see how powerful this
is -- processes that are normally set-user-id root such as /bin/ping or simply
must be run as root can now run with just the privileges they need and no more,
diminishing the likelihood of a security problem resulting in a system
compromise.
Capabilities can also be controlled on a system-wide level using a
"bounding set." The ability to load or unload modules might be one
such capability. The <a
href="http://www.linuxsecurity.com/feature_stories/capability.h" target="_blank">CAP_SYS_MODULE</a>
might be disabled once the system has booted and entered the normal multi-user
level to prohibit the loading or unloading of kernel modules essentially until
the next reboot. Using the lcap command, one might disable the ability to load
kernel modules using the following:
<pre>  [root@magneto /root]# lcap CAP_SYS_MODULE
</pre>
This would typically be done at the first point at which all the necessary
modules have been loaded. This is an effective countermeasure against a
malicious intruder attempting to install a backdoor kernel module. The
CAP_SYS_RAW_IO capability would also disabled to prevent hacking kernel memory
directly using /dev/kmem.
A program such as xntpd might go through the following process to relinquish
the rights that are not necessary for normal operation:
<ul>
  Start with full root privileges as it normally does
  Bind to the privileged ntp port
  Drop all capabilities other than CAP_SYS_TIME
  Drop root privileges (preventing it from even writing to root-owned files)
  Continue normal operation as a regular administrative account
</ul>
Future changes yet to be completely implemented include the modification to
commands similar to chattr(1) to modify and tag files that will one day totally
remove the concept of a "root" user. The goal is to provide the
ability for a command-line tool to add or remove privileges in much the same way
we current add or remove permissions using <tt class="tt">chmod(1)</tt>.
Currently, programs need to be modified to take advantage of capabilities.
With filesystem capabilities, this sometimes won't be necessary. It might go
something like this:
<pre>  [root@magneto /root]# chattr +CAP_BIND xntpd
</pre>
This would enable the xntpd process to bind to a socket without requiring root
privileges prior to being run. Quite powerful. At the same time, it's also
contains a certain potential danger due to making an unprivileged binary
slightly privileged.
 
1. Capabilities FAQ, <a
    href="ftp://ftp.guardian.no/pub/free/linux/capabilities/capfaq.txt">ftp://ftp.guardian.no/pub/free/linux/capabilities/capfaq.txt</a>

1.  LCAP - Linux Kernel Capability Bounding Set Editor, <a
    href="http://pweb.netcom.com/~spoon/lcap/"
    target="_blank">http://pweb.netcom.com/~spoon/lcap/</a> Pragmatic,
    "(nearly) Complete Linux Loadable Kernel Modules: The definitive
    guide for hackers, virus coders and system administrators," <a
    href="http://www.thehackerschoice.com/papers/LKM_HACKING.html">http://www.thehackerschoice.com/papers/LKM_HACKING.html</a>,
    March 1999.
