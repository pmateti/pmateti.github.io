
# -*- mode: org -*-
#+date: 2018-12-14
#+TITLE: CEG4420/6420 Final Exam [TBD][WIP] Dec 14, 2018
#+AUTHOR: Prabhaker Mateti
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<img src=./wsu-logo-xsm.gif border=0 width=100>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2018 Dr Prabhaker Mateti &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:0



1. This exam is a traditional closed book, closed notes exam.  Once
   you click the exam link, you are honor bound

   2. not to surf, not to access any content already existing (TBD other
      than the links given),
   1. not to take longer than 120 minutes,
   1. not to give or take help from others until you turnin your
      answers.

1. Every sentence and figure submitted is *your own work* produced
   during the two hours.

1. This exam permits the use of a Linux/ Mac/ Windows laptop/ PC/ VCSL
   running Ubuntu/ Knoppix/ Kali/ ... distros, gcc, ps, splint,
   etc. but *not* man pages.

1. Submit one PDF file named =answers.pdf= into the Pilot dropbox for Final.

* Part I (5 points each)

The following statements may or may not be (fully or partially)
valid. (i) Explain the _underlined_ technical term (also marked with ##)
occurring in each statement.  (ii) Explain/ discuss/ dispute the
statement. It is possible to write no more than, say, ten, sentences
each, and yet receive full score.

1. _Code signing_ ## uses symmetric key encryption and guarantees the
   integrity of the software by verifying that the software has not
   been modified.

1. AlephOne describes the _eggshell program_ ## as "usage: eggshell [-a
   <alignment>] [-b <buffersize>] [-e <eggsize>] [-o <offset>]\n".
   Why do we need these arguments?

1. There are several _log files_ ## within =/var/log/= directory in
   all Linux systems.  These are for performance monitoring.  None of
   them is useful in the context of security.

1. _Address Space Layout Randomization_ ## (ASLR) helps prevent
   machine code injection.

   TBD1. _ROP gadgets_ ## Explain what stack top randomization is. Describe how/why stack top
   randomization makes buffer overflow exploits difficult.

1. TBD chroot

* Part II (15 points each)


1. Suppose that an attacker has acquired root privileges on a Linux
   system.  Suppose his/her primary goal is to obtain one hundred
   userid-password combinations.  A secondary goal is to do this
   without being noticed.  How will you verify that this attack has
   happened?  How will you discover files that are changed, and
   perhaps later replaced with originals?  Give your answers first (i)
   (5 points) in English prose, then (ii) (10 points) as a =bash=
   script.

   TBD This exercise is a continuation of the one given in the last Mid
   Semester Exam. Our attack plan is to replace the kernel and init
   with Trojaned versions that are already created by the attacker and
   available at /root/.-+/.-vmlinuz and /root/.-+/.-init. Assume that
   these files were not detected. Assume that the existing modules and
   initrd are useable with the new vmlinuz. Note the use of dot and
   other characters. The replaced versions should become effective at
   next boot. Give details of the attack plan, at the level of bash
   scripts and invoking them at events E1 through E10 etc.

2. One of the hardening actions taken in modern Linux kernels is to
   remove abstract devices =/dev/mem= and =/dev/kmem=. (i) Explain the
   purpose of these devices as used in the past. (ii) Using an example
   or two, describe an exploit that uses these devices. (iii) Discuss
   if these devices can be resurrected in a running Linux system with
   a modern kernel even though the kernel is compiled without them.

   TBD The code of =get_sp()= as given by Aleph One is shown:
   : unsigned long get_sp(void) { __asm__("movl %esp,%eax"); }
   What does it "compute"? Describe an alternate but equivalent
   version of =get_sp()= without using any assembly code.

3. Describe the functionality of any five security related entries in
   =/proc/sys/kernel=

4. Describe any three of the Principles of Robust Programming of Matt
   Bishop's article.

5. In the lectures on SELinux, 
   1. an example on the =passwd= program was discussed.
      1. =allow passwd_t passwd_exec_t : file entrypoint;=
      2. =allow user_t passwd_exec_t : file { getattr execute };=
      3. =type_transition user_t passwd_exec_t : process passwd_t;=
      4. =allow user_t passwd_exec_t : file { getattr execute };=
   2. In the context of the above four rules, answer the
      following:
      1. (3 points) What is /context/, /role/, and /type/?  Give examples.
      3. (2 points) What is the problem of domain transitions?
      1. (10 points) How did the MAC rules above improve the standard
         Linux (DAC) passwd security?  Why did we need four rules?
         Does the order of these rules matter?

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
