\documentstyle[12pt]{article}
\def\fat{\framebox[1mm]{\rule{0mm}{2mm}}}
\def\CSP{{\sc csp}}
\parindent=0pt
\begin{document}


{\bf CEG 
\large \bf 730 Distributed Systems I\\[5pt]
\large Mid Term Exam\\[10pt]
May 9, 1991 \quad 100 points max \quad 75 minutes\\
}
\bigskip
{Mateti,  Spring Quarter 1991, Wright State U}\\[-5pt]
\hrule

\begin{enumerate}

\item (4*5 points)
Explain, in a few lines, the truth or falsity of the following
statements.

\begin{enumerate}
\item
Semaphores can be implemented in distributed systems without making
use of any solution to the distributed mutual exclusion problem.

\item
There is no difference between distributed systems and concurrent
systems.

\item
We need only have one clock per node in order to correctly compute a
happened-before relation.

\item
The \CSP\ code {\tt [X!2 \fat\ Y!3]} is equivalent to \\
{\tt
[  true --> X!2; Y!3\\
\fat\ true --> Y!3; X!2\\
]
}

\end{enumerate}

\item (30 points)
Write the code in \CSP\ for a process named C that controls the two
elevators A and B in a building of five stories.  On each floor, and
elevator there is a push-button control panel that riders use, and a
display panel that shows where the two elevators are.  When pushed, a
button outputs to process C something (that you decide) identifying
itself.  There are sensors on each floor that send signals to C when
an elevator is about to pass them.  There is also a timer that sends,
every second, a signal to C.  Each elevator responds to three commands
from C: stop, go-up, and go-down; stop works instantaneously and opens
the elevator doors, the going-up/down continues until stopped.  The
doors close when a go-command is received.  The elevator system should
behave in a 'typical' fashion (or be prepared to show me where such a
system as what you designed exists!). State clearly any other
assumptions that you found necessary for your solution.


\item (20 points)
Describe a distributed termination algorithm.  Do not assume that the
process graph is a tree.

\item (15 points)
Describe a solution to the Byzantine Generals Problem assuming one
traitor and three loyal generals.


\item (15 points)  Udding's solution to the mutual exclusion problem
is reproduced below.  In the Concluding remarks section, the author
comments ``In this program as in previous programs that implement
semaphores, the order of two V-operations, viz., {\tt V(eu)} and {\tt
V(qu)}, turns out to be crucial.''  There are three occurrences of
{\tt V(eu)}.  Which one is he referring to?  Explain what would happen
if we exchange that {\tt V(eu)} with {\tt V(qu)}.

\begin{verbatim}
 1 P(eu); ne := ne+1; V(eu);
 2 P(qu); P(eu);	    
 3	nm := nm+1;	    
 4	ne := ne-1;	    
 5	if ne > 0 --> V(eu) 
 6	[] ne = 0 --> V(mu) 
 7	fi;		    
 8 V(qu);		    
 9 P(mu); nm := nm-1;	    
10	<cs >		    
11	if nm > 0 -->  V(mu)
12	[] nm = 0 -->  V(eu)
13	fi		    
\end{verbatim}

\end{enumerate}
\end{document}
