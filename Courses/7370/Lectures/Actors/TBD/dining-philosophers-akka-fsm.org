# -*- mode: org -*-
#+TITLE: The Dining Philosophers in Scala Akka FSM 
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CEG7370 Distributed Computing
#+OPTIONS: toc:1 
#+OPTIONS: timestamp:t
#+OPTIONS: html-link-use-abs-url:nil html-postamble:t html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:t tex:t
#+OPTIONS: org-html-indent:nil
#+LINK_HOME: ./actorsAkkaScalaOnePage.html
#+LINK_UP: ./akkaSlides.html
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../Top/\">CEG 7370 Distributed Computing</a> | <a href=\"./actorsAkkaScalaOnePage.html\"> Actors Akka Scala Overview</a> | <a href=\"./dining-philosophers-akka-fsm-Slides.html\"> Slides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2014 %d %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+STARTUP:showeverything
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.4)

#+HTML_HEAD_EXTRA:
#+REVEAL_ROOT: http://www.cs.wright.edu/~pmateti/RevealJS
#+REVEAL_PREAMBLE: <a href="./dining-philosophers-akka-fsm-OnePage.html"> Single-Page</a><style> P {text-align: justify} code {font-family: monospace; font-size: 10pt; color: yellow;} pre.src, pre.src-scala {font-family: monospace; font-size: 20pt; color: cyan;} </style>
#+REVEAL_THEME: default
#+REVEAL_TRANS: default
#+REVEAL_HLEVEL: 2
#+REVEAL-SLIDE-NUMBER: t
#+OPTIONS: reveal_control:t reveal_progress:t reveal_history:t reveal_center:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1><h3>%a</h3>%e<h2>%d</h2>Assuming familiarity with the Actors, Scala and Akka<br><a href="../../Top/">CEG 7370 Distributed Computing</a>
#+ATTR_REVEAL: highlight-blue  # not working

* The FSM (Finite State Machine)

1. FSMs are typically visualized as graphs, with nodes representing
   /states/, and directed edges representing /transitions/.

1. Example drawing coming up ...

1. If FSM is in state S and the event E occurs, it takes the actions A
   and transitions into the state S'.
   /FSM: State X Event --> Actions X State/

1. FSMs are strongly related to regex.


** An example: Vending Machine FSM.

1.  [from Kenneth Rosen, Discrete Math and its Applications, 7e,
    Section 13.2]

#+CAPTION: Vending Machine FSM
#+ATTR_HTML: :alt fig-actor-users.png :align center :width 100%
 [[./fig-vending-machine2.jpg]]


* Dining Philosophers using Akka FSM

1. Full source code [[./scalaExamples/DiningHakkersOnFsm.scala.html][DiningHakkersOnFsm.scala]], includes some mods.

1. Explained below piecemeal.

1. Assumes familiarity with the Dining Philosophers scenario.  Read
   Andrews book section on "Dining Philosophers Revisited."

1. Akka FSM is an OOP [[http://en.wikipedia.org/wiki/Mixin][mixin]]

1. We skip all OOP details of Scala in this lecture.  Such
   as: sealed trait, case object, case class, ...

** object DiningHakkersOnFsm

#+begin_src scala
object DiningHakkersOnFsm {
  val system = ActorSystem()
  def main(args: Array[String]) {
    val chopsticks =
      for (i <- 0 to 4) yield system.actorOf(
         Props[Chopstick], "C" + i)
    val hakkers = for {
      (name, i) <- List("P0", "P1", "P2", "P3", "P4").
           zipWithIndex
    } yield system.actorOf(
        Props(classOf[FSMHakker], 
              name, chopsticks(i),
              chopsticks((i + 1) % 5)))
    hakkers.foreach(_ ! Think)
  }
}
#+end_src

1. =chopsticks= array of actors, indexed from 0 to 4, named C0, ...,
   C4.

1. =zipWithIndex= constructs ("P0", 0), ..., ("P4", 4).

1. All actors in =hakkers= are sent the message =Think=

** ChopstickState

1.
    #+begin_src scala
sealed trait ChopstickState
case object Available extends ChopstickState
case object Taken extends ChopstickState

case class TakenBy(hakker: ActorRef)
#+end_src

1. There are two =ChopstickState= s for the chopsticks: =Available=,
   =Taken=

1. =TakenBy= is a class with one constructor that requires a =hakker=
   as its argument. The =ActorRef= better be a "hakker" actor.


** Chopstick Class

    #+begin_src scala
class Chopstick extends Actor 
    with FSM[ChopstickState, TakenBy] {
  import context._
  startWith(Available, TakenBy(system.deadLetters))
  when(Available) ...
  when(Taken) ...
  initialize
}
#+end_src

1. =startWith= defines the initial state and initial data.
   =system.deadLetters= cf. "nobody"

1. =when(state) ...= per state.

1. =initialize=: now the actor is placed in the initial
   state defined in =startWith=.  Until now, this actor was in
   "limbo".

1. All these (startWith, when, initialize) are from Akka FSM.


** ChopstickMessage

    #+begin_src scala
sealed trait ChopstickMessage
object Take extends ChopstickMessage
object Put extends ChopstickMessage
case class Taken(chopstick: ActorRef)
        extends ChopstickMessage
case class Busy(chopstick: ActorRef)
        extends ChopstickMessage
#+end_src

** Chopstick State: Available

    #+begin_src scala
  when(Available) {
    case Event(Take, _) =>
      goto(Taken) 
         using TakenBy(sender) 
            replying Taken(self)
  }
#+end_src

1. The chopstick actor does the following when it is in state =Available=.
1. If the event =Take= happens, whatever the second parameter may be,
   transition into state =Taken=.
1. =TakenBy= the sender actor of this event.
1. Invoke the method =Taken= with itself as the chopstick.
1. =using= and =replying= are modifier words.

** A Scala Aside: goto

1. This "goto" is related to the famous "goto considered harmful" of
   Dijkstra.  But, Scala's goto is nicely refined.

1. Scala is using /delimited continuations/, of the functional
   programming world, in defining this /goto/.

1. Ex: A method from the Scala Swarm library, "... stops the execution
   of your code at one point, and the remaining computation becomes
   the continuation. ... transfers the computation to another host,"
   and returns the result to the stopped computation.

** Chopstick State: Taken

    #+begin_src scala
  when(Taken) {
    case Event(Take, currentState) =>
      stay replying Busy(self)
    case Event(Put, TakenBy(hakker)) 
      if sender == hakker =>
         goto(Available) using TakenBy(system.deadLetters)
  }
#+end_src

1. If a =Take= event happens, the state =stay= s the same.

1. Invoke the method =Busy= with itself as the chopstick.

1. If a =Put= happens, it better be by whoever took this chopstick.
   If so, transition into =Available=.  Who has it now? Nobody (i.e.,
   =system.deadLetters=)

* FSMHakkerState

    #+begin_src scala
sealed trait FSMHakkerMessage
object Think extends FSMHakkerMessage

sealed trait FSMHakkerState
case object Thinking extends FSMHakkerState
case object Eating extends FSMHakkerState
case object Hungry extends FSMHakkerState
case object Waiting extends FSMHakkerState
case object WaitForOtherChopstick extends FSMHakkerState
case object FirstChopstickDenied extends FSMHakkerState

case class TakenChopsticks(
  left: Option[ActorRef], right: Option[ActorRef])
#+end_src

1. The states are all disjoint.  An actor cannot be in two or more
   states simultaneously.

1. Advanced Scala: the =Option[T]= type.  It is a container for an
   optional value of type T.  Cf. None, null, nil, ...

* class FSMHakker

    #+begin_src scala
class FSMHakker (
  name: String, left: ActorRef, right: ActorRef)
  extends Actor with 
  FSM[FSMHakkerState, TakenChopsticks] {
  startWith(Waiting, TakenChopsticks(None, None))
  when(Waiting) ...
  when(Thinking) ...
  when(Hungry) ...
  when(WaitForOtherChopstick) ...
  when(FirstChopstickDenied) ...
  when(Eating) ...
  initialize
}
#+end_src

1. Philosopher has name, left, right fields.

1. Philosopher starts in Waiting state, with no chopsticks.

** Waiting State

    #+begin_src scala
  when(Waiting) {
    case Event(Think, _) =>
      println( s"$name starts to think" )
      startThinking(5.seconds)
  }

  private def startThinking(duration: FiniteDuration) = {
    goto(Thinking) using 
      TakenChopsticks(None, None) forMax duration
  }
#+end_src

1. Soon receives Think message from main object =DiningHakkersOnFsm=.


** Thinking State

    #+begin_src scala
  when(Thinking) {
    case Event(StateTimeout, _) =>
      left ! Take
      right ! Take
      goto(Hungry)
  }

#+end_src

1. In =Thinking= state, philosopher does not have any chopsticks.
   This state ends (i.e., a transition will happen) in a finite amount
   of time.

1. At the end of the timeout, sends the Take message to chopstcks =left=
   and =right=.

1. Enters =Hungry= state.

** Eating State

    #+begin_src scala
  when(Eating) {
    case Event(StateTimeout, _) =>
      println(s"$name puts down and starts to think")
      left  ! Put
      right ! Put
      startThinking(5.seconds)
  }
#+end_src

1. In =Eating= state, philosopher does have two chopsticks. This state
   ends in a finite amount of time.

** Hungry State

    #+begin_src scala
  when(Hungry) {
    case Event(Taken(`left`), _) =>
      goto(WaitForOtherChopstick) using 
        TakenChopsticks(Some(left), None)
    case Event(Taken(`right`), _) =>
      goto(WaitForOtherChopstick) using 
        TakenChopsticks(None, Some(right))
    case Event(Busy(_), _) =>
      goto(FirstChopstickDenied)
  }
#+end_src

1. Note the back ticks.
1. Advanced Scala: =Some(x)= Some[A] represents existing values of type A
1. No chopsticks: enter =FirstChopstickDenied= state.

** WaitForOtherChopstick

    #+begin_src scala
  when(WaitForOtherChopstick) {
    case Event(Taken(`left`), 
      TakenChopsticks(None, Some(right))) =>
          startEating(left, right)
    case Event(Taken(`right`), 
      TakenChopsticks(Some(left), None)) =>
          startEating(left, right)
    case Event(Busy(chopstick), 
      TakenChopsticks(leftOption, rightOption)) =>
          leftOption.foreach(_ ! Put)
          rightOption.foreach(_ ! Put)
          startThinking(10.milliseconds)
  }
#+end_src

1. On entering this state: Already have one chopstick.  Need the other.
1. Note the naming: leftOption and rightOPtion. One of them can be
   =None=.  Hence, the use of =foreach=. One of these iterates 0
   times.

** startEating

    #+begin_src scala
  private def startEating(
    left: ActorRef, right: ActorRef) = { println(
      s"$name has $left and $right and starts to eat")
    goto(Eating) using TakenChopsticks(
      Some(left), Some(right)) forMax (5.seconds)
  }
#+end_src

** FirstChopstickDenied

    #+begin_src scala
  when(FirstChopstickDenied) {
    case Event(Taken(secondChopstick), _) =>
      secondChopstick ! Put
      startThinking(10.milliseconds)
    case Event(Busy(chopstick), _) =>
      startThinking(10.milliseconds)
  }
#+end_src

1. "First" refers to the chopstick in the left hand.  Second = right hand.


* Exercises

1. Draw a state diagram for a philosopher as constructed here.

1. Should this program exhibit livelock? deadlock? individual
   starvation?

1. How do you orchestrate (cause) these?

1. Introduce a "waiter" actor to solve the above problems.

1. Would prioritizing the chopsticks and/or philosophers enable a
   solution without needing a waiter?

1. Allow philosophers to request the fork(s) from each other.  Is this
   permissible?

1. When to use Akka FSM?  When to stay with =become=?


* References

1. Akka doc http://doc.akka.io/docs/akka/snapshot/scala/fsm.html

1. Rick Molloy, "Solving The Dining Philosophers Problem With
   Asynchronous Agents", Visual C++. 2010.
   http://msdn.microsoft.com/en-us/magazine/dd882512.aspx
   Suggested Reading.

1. http://rosettacode.org/wiki/Dining_philosophers implemented in 35+
   (famous and not-so-famous) programming languages using various
   concurrency primitives.  Highly Recommended Reading.
