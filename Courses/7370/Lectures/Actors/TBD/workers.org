# -*- mode: org -*-
#+TITLE: Workers in Scala Akka
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CEG7370 Distributed Computing
#+OPTIONS: toc:1 
#+OPTIONS: timestamp:t
#+OPTIONS: html-link-use-abs-url:nil html-postamble:t html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:t tex:t
#+OPTIONS: org-html-indent:nil
#+LINK_HOME: ./actorsAkkaScalaOnePage.html
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../Top/\">CEG 7370 Distributed Computing</a> | <a href=\"./actorsAkkaScalaOnePage.html\"> Actors Akka Scala Overview</a> | <a href=\"./dining-philosophers-akka-fsm-Slides.html\"> Slides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2014 %d %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+STARTUP:showeverything
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.4)

#+HTML_HEAD_EXTRA:
#+REVEAL_ROOT: http://www.cs.wright.edu/~pmateti/RevealJS
#+REVEAL_PREAMBLE: <a href="./dining-philosophers-akka-fsm-OnePage.html"> Single-Page</a><style> P {text-align: justify} code {font-family: monospace; font-size: 10pt; color: yellow;} pre.src, pre.src-scala {font-family: monospace; font-size: 20pt; color: cyan;} </style>
#+REVEAL_THEME: default
#+REVEAL_TRANS: default
#+REVEAL_HLEVEL: 2
#+REVEAL-SLIDE-NUMBER: t
#+OPTIONS: reveal_control:t reveal_progress:t reveal_history:t reveal_center:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1><h3>%a</h3>%e<h2>%d</h2>Assuming familiarity with the Actors, Scala and Akka<br><a href="../../Top/">CEG 7370 Distributed Computing</a>
#+ATTR_REVEAL: highlight-blue  # not working

* A Compute Server in Scala

1. The server implements a future method which evaluates a given
   expression in parallel with its caller.

1. The server could run each thread on a separate processor.

1. Avoid the overhead in context-switching threads on a single processor.

* "Job" Defined

#+begin_src scala
  abstract class Job {
    type T
    def task: T
    def ret(x: T)
  }
#+end_src

A job is an object with

1. An abstract type =T= which describes the result of the compute job.

1. A parameterless =task= method of type T which denotes the expression
   to be computed.

1. A =ret= method which consumes the result once it is computed.

** Benefits of Abstract Types

1. The T can vary between different jobs.  

1. Without abstract types it would be impossible to implement the same
   class to the user in a statically type-safe way, without relying on
   dynamic type tests and type casts.

* Channel openJobs

1.  Expressions to be computed (i.e. arguments to calls of future) are
    written to the =openJobs= channel.

* ComputeServer.future

#+begin_src scala
  def ftr[A](p: => A): () => A = {
    val reply = new SyncVar[A]()
    openJobs.write{
      new Job {
        type T = A
        def task = p
        def ret(x: A) = reply.set(x)
      }
    }
    () => reply.get
  }
#+end_src

1. The details of the signature of =ftr= are in the next section

1. Future is a CS technical term describing how some computation is
   performed.  In Scala, the two terms/ideas "future" and "promise"
   are almost found together.  See previous lecture.

1. =openJobs.write= constructs and writes a description of the job.

1. The =A= and the =p= were given to =ftr=.

1. =reply= is a =SyncVar= of type =A=.  Offers =get= and =put=.  Newly
   created, it is unset (undefined). See previous lecture.

1. =reply.get= blocked wait until =reply= is defined.

** Details of ftr

1.  =def ftr[A](p: => A): () => A = ...=

1. The =A= and the =p= are given.  Expression =p= is the argument to
   =ftr= that ftr should compute.  The computed result is going to be
   of type A. =p: => A=

1. What is =ftr= then? It is a function that returns a function.  The
   =A= is the  (generic) type parameter.

1. The returned function takes no arguments, but returns a value of
   type A.  =() => A= .

1. You would use it as in fz = ftr(expression).  You would then do
   fz().

** Details of ftr, contd

1. The polymorphic future method creates a =new= job and inserts
   (=write=) this job into the "set" of open jobs.

1. The =ret= method is implemented by a guard named =reply= 

1. It then waits until the corresponding reply guard is called. =() =>
   reply.get=

* Processor Prozor

#+begin_src scala
  def prozor(i: Int) {
    while (true) {
      val job = openJobs.read
      job.ret(job.task)
    }
  }
#+end_src

1. One such process repeatedly consumes ("reads") an open job.

1. Evaluates the job’s task method.

1. Passes the result on to the job’s ret method. 

* ComputeServer

#+begin_src scala
class ComputeServer(n: Int) {
  abstract class Job ...
  val openJobs = new Channel[Job]()
  def prozor(i: Int) ...
  def future[A](p: => A): () => A = ...

  spawn(replicate(0, n) { prozor })
}

#+end_src

1. The compute server creates n =prozor= s as part of its initialization.

* Example Use

#+begin_src scala
object Test with Executable {
  val server = new ComputeServer(1)
  val f = server.future(41 + 1)
  println(f())
}
#+end_src

* Full Code

#+begin_src scala
import scala.concurrent._   // more ... TBD

class ComputeServer(n: Int) {
  private abstract class Job {
    type T
    def task: T
    def ret(x: T)
  }
  private val openJobs = new Channel[Job]()
  private def prozor(i: Int) {
    while (true) {
      val job = openJobs.read
      job.ret(job.task)
    }
  }

  def ftr[A](p: => A): () => A = {
    val reply = new SyncVar[A]()
    openJobs.write{
      new Job {
        type T = A
        def task = p
        def ret(x: A) = reply.set(x)
      }
    }
    () => reply.get
  }
  spawn(replicate(0, n) { prozor })
}

object Test with Executable {
  val server = new ComputeServer(1)
  val f = server.ftr(41 + 1)
  println(f())
}
#+end_src


* References

1. Martin Odersky, Scala By Example, Section 17.9 Workers.
