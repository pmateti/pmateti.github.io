# -*- mode: org -*-
#+TITLE: Actors, Akka and Scala: Overview
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CEG7370 Distributed Computing
#+OPTIONS: toc:2
#+OPTIONS: timestamp:t
#+OPTIONS: html-link-use-abs-url:nil html-postamble:t html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:t tex:t
#+OPTIONS: org-html-indent:nil
#+LINK_HOME: ../../Top/
#+LINK_UP: ../
#+HTML_CONTAINER: div
#+HTML_DOCTYPE: xhtml-strict
#+HTML_HEAD: <style> P {text-align: justify} code {font-family: monospace; font-size: 10pt;color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../Top/\">CEG 7370 Distributed Computing</a> | <a href=\"./actorsAkkaScalaSlides.html\"> Slides</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2014 %d %e &bull; <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a>"))
#+STARTUP:showeverything
#+CREATOR: <a href="http://www.gnu.org/software/emacs/">Emacs</a> 24.3.1 (<a href="http://orgmode.org">Org</a> mode 8.2.4)
#+REVEAL_ROOT: http://www.cs.wright.edu/~pmateti/RevealJS
#+REVEAL_PREAMBLE: <a href="../../Top/"> CEG 7370 Distributed Computing</a> | <a href=./actorsAkkaScalaSlides.html> Slides</a> | <a href=./actorsAkkaScalaOnePage.html> OnePage</a>
#+REVEAL_THEME: night
#+REVEAL_TRANS: default
#+REVEAL_HLEVEL: 2
#+REVEAL-SLIDE-NUMBER: t
#+OPTIONS: reveal_control:t reveal_progress:t reveal_history:t reveal_center:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1><h3>%a</h3>%e<h2>%d</h2><p>An introduction to Akka, assuming Scala and Java fluency<br><a href="../../Top/">CEG 7370 Distributed Computing</a></p>
#+ATTR_REVEAL: highlight-blue  # not working
#+DATE:


* Overview of Lectures

1. May be 3 to 4 lectures (75 minutes) total.

1. Describe Scala minimally.  Just enough to do Akka.  Pretty much
   ignore its (i) functional programming features, (ii) syntactic
   conveniences and (iii) type inference [not wholly].

1. Describe the Actors Model, comparable in depth to our
   treatment of SMP, AMP, Shared-Vars, Semaphores.

1. Describe Akka, an implementation of Actors.  Just
   enough so you can re-do all the classics such as Readers/Writers,
   Dining Philosophers.

1. Show-and-Tell [[./typesafe-activator.org]]

1. WSU CEG 7370 P3 details depend on the above.

* What is Scala?

1. Can be thought of as a modernized Java.

1. Combines OOP and Functional Programming.

1. Uses Type Inference heavily.

1. Compiles to JVM .class files.

1. Scala http://www.scala-lang.org/ is open source.

1. [[./scalaPractical.html][CEG 7370 on Scala]]


* Actors Model

1. A model of distributed computation.

1. Uses AMP only.  

1. No semaphores. No SMP.  

1. Can we build these in Actors?

1. [[./actors.html][CEG 7370 on Actors]]


* What is Akka?

1. Akka is an implementation of the [[./actors.html][Actor Model]].

1. It makes practical concessions to the pure actor model.

1. Implemented as a library in Scala (and hence JVM).  Akka library
   can be used in Java as well.

1. "Akka is a toolkit and runtime for building highly concurrent,
   distributed, and fault tolerant event-driven applications on the
   JVM" http://www.akka.io

1. Akka is open source.

1. [[./akka.html ][CEG 7370 on Akka]]

* Dining Philosophers on Akka

1.  This Spring 2014, the CEG 7370 Project P3 is mostly about learning
    Scala + Akka to some extent.  Start with the source code examples
    below.  These two files are "implementing" the famous Dining
    Philosophers problem.  Not the solution.

1. [[./scalaExamples/DiningHakkersOnBecome.scala][DiningHakkersOnBecome.scala]] minor mods by Mateti

1. [[./scalaExamples/DiningHakkersOnFsm.scala][DiningHakkersOnFsm.scala]] minor mods by Mateti

1. The numbers at left are the count of lines.

    #+begin_src bash
 106 DiningHakkersOnBecome.scala
 141 DiningHakkersOnFsm.scala
#+end_src

1. My versions can be compiled and run without using Activator: =% scalac DiningHakkersOnBecome.scala; % scala DiningHakkersOnBecome=

1. [[./dining-philosophers-akka-fsm.html][dining-philosophers-akka-fsm]] fairly detailed explanation of the Akka FSM based code.

1. https://www.typesafe.com/activator/template/akka-sample-fsm-scala


