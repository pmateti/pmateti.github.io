# -*- mode: org -*-
#+DATE: 2015-03-13
#+TITLE: Distributed Programming Language Sampler: Go
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: CEG7370 Distributed Computing
#+OPTIONS: toc:1 
#+HTML_HEAD: <style> P {text-align: justify} code, pre {font-family: monospace; font-size: 10pt; color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../Top/\"> CEG 7370</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2015 %e &bull; <a href=\"http://www.wright.edu/~pmateti\"> www.wright.edu/~pmateti</a>  %d"))
#+STARTUP:showeverything
#+REVEAL_ROOT: http://www.cs.wright.edu/~pmateti/RevealJS
#+REVEAL_PREAMBLE: <a href="./scalaPracticalOnePage.html">single-page</a><style> P {text-align: justify} code {font-family: monospace; font-size: 10pt; color: yellow;} pre.src, pre.src-scala {font-family: monospace; font-size: 20pt; color: cyan;} </style>
#+REVEAL_THEME: night
#+REVEAL_TRANS: default
#+REVEAL_HLEVEL: 2
#+REVEAL-SLIDE-NUMBER: t
#+OPTIONS: reveal_control:t reveal_progress:t reveal_history:t reveal_center:t reveal_rolling_links:t reveal_keyboard:t reveal_overview:t
#+REVEAL_TITLE_SLIDE_TEMPLATE: <h1>%t</h1><h3>%a</h3>%e<h2>%d</h2>An introduction to Scala, assuming OS and Java fluency<br><a href="../../Top/">CEG 7370 Distributed Computing</a>
#+ATTR_REVEAL: highlight-blue  # not working


* Facts



* Hype

* Hello world

#+begin_src go
package main
import "fmt"
func main() { fmt.Println("Hello World!") }
#+end_src

* Quick Sort

#+begin_src go
% from http://stackoverflow.com/questions/15802890/

func qsort(a []int) []int {
  if len(a) < 2 { return a }

  left, right := 0, len(a) - 1
  pivotIndex := rand.Int() % len(a)
  a[pivotIndex], a[right] = a[right], a[pivotIndex]

  for i := range a {
    if a[i] < a[right] {
      a[i], a[left] = a[left], a[i]
      left++
    }
  }
  a[left], a[right] = a[right], a[left]

  qsort(a[:left])
  qsort(a[left + 1:])
  return a
}
#+end_src

* Concurrently Say "Enjoy" "Rosetta" "Code": Goroutine

Goroutine is a play on coroutine.

"Simplest and most direct solution: Start three goroutines, give each
one a word. Each sleeps, then returns the word on a channel. The main
goroutine prints words as they return. The print loop represents a
checkpoint--main doesn't exit until all words have returned and been
printed."

#+begin_src go
package main
 
import (
    "fmt"
    "math/rand"
    "time"
)
 
func main() {
    words := []string{"Enjoy", "Rosetta", "Code"}
    rand.Seed(time.Now().UnixNano())
    q := make(chan string)
    for _, w := range words {
        go func(w string) {
            time.Sleep(time.Duration(rand.Int63n(1e9)))
            q <- w
        }(w)
    }
    for i := 0; i < len(words); i++ {
        fmt.Println(<-q)
    }
}
#+end_src

* Concurrently Say "Enjoy" "Rosetta" "Code": Afterfunc

=time.Afterfunc= combines the sleep and the goroutine
start. =log.Println= serializes output in the case goroutines attempt
to print concurrently. =sync.WaitGroup= is used directly as a
checkpoint.  

#+begin_src go
package main
 
import (
    "log"
    "math/rand"
    "os"
    "sync"
    "time"
)
 
func main() {
    words := []string{"Enjoy", "Rosetta", "Code"}
    rand.Seed(time.Now().UnixNano())
    l := log.New(os.Stdout, "", 0)
    var q sync.WaitGroup
    q.Add(len(words))
    for _, w := range words {
        w := w
        time.AfterFunc(time.Duration(rand.Int63n(1e9)), func() {
            l.Println(w)
            q.Done()
        })
    }
    q.Wait()
}
#+end_src

* Concurrently Say "Enjoy" "Rosetta" "Code": Select

This solution might stretch the intent of the task a bit. It is
concurrent but not parallel.  Also it doesn't sleep and doesn't call
the random number generator explicity. It works because the select
statement is specified to make a "pseudo-random fair choice" among
multiple channel operations.  package main
 
import "fmt"
 
func main() {
    w1 := make(chan bool, 1)
    w2 := make(chan bool, 1)
    w3 := make(chan bool, 1)
    for i := 0; i < 3; i++ {
        w1 <- true
        w2 <- true
        w3 <- true
        fmt.Println()
        for i := 0; i < 3; i++ {
            select {
            case <-w1:
                fmt.Println("Enjoy")
            case <-w2:
                fmt.Println("Rosetta")
            case <-w3:
                fmt.Println("Code")
            }
        }
    }
}

* Compute the Digits of Pi

#+begin_src go
#+end_src

* Misc

1. [[./languageSampler.html]]

1. http://www.lunabase.org/~faber/blog/?p=1361 Playing with Go: a
   concurrent quicksort May 2012

1. http://rosettacode.org/wiki/Concurrent_computing#Go
