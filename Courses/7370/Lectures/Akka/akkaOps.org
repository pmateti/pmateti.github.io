# -*- mode: org -*-
#+date: 2020-01-31
#+TITLE: Akka Ops: Create, Send, Become, Supervise
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

This is part of [[./index.org][Akka Actors with Scala]].  Understanding all that is
here is spiral-like.  Do read these notes first.  Secondly, [[./index.html#org5835199][TypeSafe
Activator: Akka Get Started]].  Third, to better understand, read the
details given in Akka Examples (perhaps skipping the Documentation).

* Akka Actors

1. Akka Actors: Extremely lightweight (> 2.7 million actors per GB
   RAM)  =import akka.actor._=

1. Messages are the "kinetic energy" in an actor system.

1. Actors can have lots of buffered "potential energy", but cannot do
   anything with it until triggered by a message.

1. Everything is asynchronous and lockless.

** Example Actor

   #+begin_src scala
case class Greeting (who: String)

class GreetingActor extends Actor {
  def receive = {
    case Greeting(who) =>
      sender ! (s"Hello, $who! Thanks.")
  }
}
#+end_src

* Akka Actors "Systems"

1. Allocate (internal) threads: =ActorSystem acsywsu =
   ActorSystem.create("WSU-CEG-7370-Actors");=

1. Allocate (internal) threads: =ActorSystem acsyiiitd =
   ActorSystem.create("IIID-5xx-DIC-Actors");=

1. Several actor systems, possibly with different configurations, can
   co-exist.

   #+begin_src scala
val grtr = acsyiiitd . actorOf(Props[GreetingActor], "greeter")
grtr ! Greeting("Brad Pitt")
#+end_src

1. =Props= is a configuration class to specify options for the
   creation of actors.

1. Try the above in scala REPL.  You need the import shown below.

1. =import akka.actor.{ ActorRef, ActorSystem, Props, Actor }=

1. glitch: akka://WSU-CEG-7370-Actors/deadLetters

* An Actor in Java

1. Akka actors are do-able in Java.  Much longer.

   #+begin_src java
public class Greeting implements Serializable {
  public final String who;
  public Greeting(String who) {
    this.who = who;
  }
}
#+end_src

1. Continued ...

** An Actor in Java, contd-1

   #+begin_src java
public class GreetingActor extends UntypedActor {
  LoggingAdapter log = Logging.getLogger(getContext().system(), this);
  public void onReceive(Object message) throws Exception {
    if (message instanceof Greeting)
      getSender.tell("Hello " + ((Greeting) message).who + " Thanks.");
  }
} 
#+end_src
1. Continued ...

** An Actor in Java, contd-2

   #+begin_src java
ActorSystem acsy = ActorSystem.create("WSU-CEG-7370-Actors");
ActorRef grtr = acsy . actorOf(
  new Props(GreetingActor.class), "greeter");
grtr.tell(new Greeting("Brad Pitt"));  
#+end_src


* Create an Actor

1. Create an actor by
   calling =ActorContext.spawn()=. The creator actor becomes the parent
   of the newly created child actor. 
1. Akka Actor receive message loop is exhaustive, different from
   Erlang and the late Scala "native" Actors.

1. Provide a pattern match for all messages that the actor can accept.

1. To handle unknown messages have a default case =case _ => ...=

1. Killing an Actor: =victim ! Kill=

1. =context.system.shutdown()= the ActorSystem when
   everythingâ€™s finished


* Actor Lifecycle

#+CAPTION: Actor Lifecycle
#+ATTR_HTML: :alt fig-actor-lifecycle.png  :align center :width 100%
#+ATTR_HTML: :style background-color:beige
[[./Figures/fig-actor-lifecycle.png]]

* Actor Op: Send

1. The method named =receive= defines how messages are handled.
1. The Bang =!= aka =tell=.
1. Asynchronous and Non-blocking -- "Fire-forget"

1. Order of send == order of arrival in the mailbox of receiving
   actor. Message ordering is guaranteed on a per-sender basis.

1. The size of the mailbox can be bounded (cf Actor Std Model) or
   unbounded.

1.  =def ! (message: Any)=\\
    =(implicit sender: ActorRef = Actor.noSender)=

1. The Query =?= sends a message asynchronously and returns a =Future=
   representing a possible reply. Aka =ask=.

* Actor Op: Become

1. Behaviors can be pushed and popped
1. =context.become= Replaces the current (the top of the behavior
   stack) behavior
1. Will now react according to the new behavior to the messages
1. =context.unbecome= pop the stack

** Example: HotSwapActor

    #+begin_src scala
import akka.actor._
class HotSwapActor extends Actor {
  import context._
  def angry: Receive = {
    case "ang" => sender ! "I am already angry >:("
    case "hap" => become(happy)
  }
 
  def happy: Receive = {
    case "hap" => sender ! "I am already happy :-)"
    case "ang" => become(angry)
  }
 
  def receive = {
    case "ang" => become(angry)
    case "hap" => become(happy)
  }
}
#+end_src

** Become -- Why?

1. Implement finite state machines =import akka.actor.FSM=

1. Spawn up an empty generic worker actor that can become whatever the
   master needs

1. Let a highly contended actor adaptively transform into an actor
   pool or a Router

1. Implement graceful degradation

** Finite State Machines, and P3

1. http://www.typesafe.com/activator/template/akka-sample-fsm-scala

1. [[./dining-philosophers-akka-fsm.org]]

1. IIITD DIC (WSU CEG 7370) P3: Understand the example above, and
   answer the questions.


** Add to the Stack, Not Replace

    #+begin_src scala
import akka.event.Logging; import akka.actor._
case object Swap
class Swapper extends Actor {  import context._
  val log = Logging(system, this) 
  def receive = {
    case Swap =>
      log.info("Hi")
      become({
        case Swap =>
          log.info("Ho")
          unbecome() /* just for fun */
      }, discardOld = false) /* not replace */  }}
 
object SwapperApp extends App {
  val sys = ActorSystem("SwapperSystem")
  val a = sys.actorOf(Props[Swapper], name="swapper")
  // alternately logs Hi, Ho, ...
  a!Swap; a!Swap; a!Swap; a!Swap; a!Swap; a!Swap
}
#+end_src

* Actor Op [Hidden]: Supervise

1. "Let it crash!"

   1. When an actor crashes, its parent can either =restart=, =stop=
      it, or =escalate= the failure, up the hierarchy of actors.

   1. A chain of responsibility, all the way to the top.    

1. Every single Akka actor has a default supervisor strategy.  Which is
   usually sufficient.  But it can be overridden.

1. Provides clean separation of business logic and error handling

1. Traditional failure management:

  1. You are given a single thread of control
  1. Need to do all explicit error handling WITHIN this single thread
  1. Errors do not propagate between threads
  1. Leads to defensive programming, with error handling tangled with
     business logic

* DeathWatch

1. Register to receive =Terminated= message provided by the
   =DeathWatch= component of the Akka actor system.

    #+begin_src scala
import akka.actor.{ Actor, Props, Terminated }
class WatchActor extends Actor {
  val child = context.actorOf(Props.empty, "child")
  context.watch(child)   // registration
  var lastSender = system.deadLetters
  def receive = {
    case "kill" =>
      context.stop(child); lastSender = sender()
    case Terminated(`child`) =>
      lastSender ! "finished"
  }
}
#+end_src

1.  Note the back-quotes in =Terminated(`child`)=




* References

1. Akka Documentation https://doc.akka.io/docs/akka/current/
   Nearly all the code snippets and figures are from here.  Reference.

1. Jonas Boner, "Above the Clouds: Introducing Akka", 2011.  Web
   search.  Video or pdf.  Highly recommended.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
