# -*- mode: org -*-
#+date: 2020-01-31
#+TITLE: Workers in Scala
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Scala Prerequisite

1. The notes below assume a good understanding of Scala classes.

* A Compute Server in Scala

1. The server below implements a future method which evaluates a given
   expression in parallel with its caller.

1. The server could run each thread on a separate processor.

1. Avoid the overhead in context-switching threads on a single processor.

* Benefits of Abstract Types: a "Job" Defined

#+begin_src scala
  abstract class Job {
    type T
    def task: T
    def ret(x: T)
  }
#+end_src

1. An abstract type =T= which describes the result of the compute job.

1. A parameterless =task= method of type T which denotes the expression
   to be computed.

1. A =ret= method which consumes the result once it is computed.

1. The T can vary between different jobs.  

1. Without abstract types it would be impossible to implement the same
   class to the user in a statically type-safe way, without relying on
   dynamic type tests and type casts.

* ComputeServer.future

1. Future is a CS technical term describing how some computation is
   (yet to be) performed.  In Scala, the two terms/ideas "future" and
   "promise" are almost bound together.  See previous lecture.

1.  Expressions to be computed (i.e. arguments to calls of future) are
    written to the =openJobs= channel.

1. 
  #+begin_src scala
  def ftr[A](p: => A): () => A = {
    val reply = new SyncVar[A]()
    openJobs.write{
      new Job {
        type T = A
        def task = p
        def ret(x: A) = reply.set(x)
      }
    }
    () => reply.get
  }
#+end_src

1. The details of the signature of =ftr= are in the next section

1. =openJobs.write= constructs and writes a description of the job.

1. The =A= and the =p= were given to =ftr=.

1. =reply= is a =SyncVar= of type =A=.  Offers =get= and =put=.  Newly
   created, it is unset (undefined). See previous lecture.

1. =reply.get= blocked wait until =reply= is defined.

** Details of ftr

1.  =def ftr[A](p: => A): () => A = ...=

1. The =A= and the =p= are given.  Expression =p= is the argument to
   =ftr= that ftr should compute.  The computed result is going to be
   of type A. =p: => A=

1. What is =ftr= then? It is a function that returns a function.  The
   =A= is the  (generic) type parameter.

1. The returned function takes no arguments, but returns a value of
   type A.  =() => A= .

1. You would use it as in fz = ftr(expression).  You would then do
   fz().

** Details of ftr, contd

1. The polymorphic future method creates a =new= job and inserts
   (=write=) this job into the "set" of open jobs.

1. The =ret= method is implemented by a guard named =reply= 

1. It then waits until the corresponding reply guard is called. =() =>
   reply.get=

* Processor Prozor

#+begin_src scala
  def prozor(i: Int) {
    while (true) {
      val job = openJobs.read
      job.ret(job.task)
    }
  }
#+end_src

1. One such process repeatedly consumes ("reads") an open job.

1. Evaluates the job’s task method.

1. Passes the result on to the job’s ret method. 

* ComputeServer

#+begin_src scala
class ComputeServer(n: Int) {
  abstract class Job ...
  val openJobs = new Channel[Job]()
  def prozor(i: Int) ...
  def future[A](p: => A): () => A = ...

  spawn(replicate(0, n) { prozor })
}

#+end_src

1. The compute server creates n =prozor= s as part of its initialization.

* Example Use

#+begin_src scala
object Test with Executable {
  val server = new ComputeServer(1)
  val f = server.future(41 + 1)
  println(f())
}
#+end_src

* Full Code

#+begin_src scala
import scala.concurrent._   // more ...

class ComputeServer(n: Int) {
  private abstract class Job {
    type T
    def task: T
    def ret(x: T)
  }
  private val openJobs = new Channel[Job]()
  private def prozor(i: Int) {
    while (true) {
      val job = openJobs.read
      job.ret(job.task)
    }
  }

  def ftr[A](p: => A): () => A = {
    val reply = new SyncVar[A]()
    openJobs.write{
      new Job {
        type T = A
        def task = p
        def ret(x: A) = reply.set(x)
      }
    }
    () => reply.get
  }
  spawn(replicate(0, n) { prozor })
}

object Test with Executable {
  val server = new ComputeServer(1)
  val f = server.ftr(41 + 1)
  println(f())
}
#+end_src


* References

1. Martin Odersky, Scala By Example, Section 17.9 Workers.
   https://www.scala-lang.org/old/sites/default/files/linuxsoft_archives/docu/files/ScalaByExample.pdf
   Search for a 2014 version.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
