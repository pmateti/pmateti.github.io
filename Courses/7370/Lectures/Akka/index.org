# -*- mode: org -*-
#+date: 2020-04-14
#+TITLE: Akka Actors with Scala
#+AUTHOR: Prabhaker Mateti
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a> | %d"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2

* Overview of Lectures

1. What do these lecture notes do?
1. Describe Scala minimally.  Just enough to do Akka.  Pretty much
   ignore its (i) functional programming features, (ii) syntactic
   conveniences and (iii) type inference [not wholly].  Goto What is
   Scala?

1. Describe Carl Hewitt's Actors Model, comparable in depth to our
   treatment of SMP, AMP, Shared-Vars, Semaphores.  Goto Actors Model.

1. Describe Akka, an implementation of Actors.  Just enough so you can
   re-do all the classics such as Readers/Writers, Dining
   Philosophers.  Goto What is Akka?

* What is Scala?

1. Scala can be thought of as a significantly enhanced Java.

1. Combines OOP and Functional Programming.

1. Uses Type Inference heavily.

1. Compiles to JVM .class files.

1. Scala is described fully at http://www.scala-lang.org/.  Its
   compilers and other tools are open source.

1. [[../Languages/Scala/scalaPractical.html][Scala Practical]] My lecture notes.  Required Reading.


* Actors Model

1. A model of distributed computation.

1. Uses AMP only.  

1. No semaphores. No SMP.  

1. Can we build these in Actors?

1. [[./actors.html][On Actors]] My lecture notes.  Required Reading.


* What is Akka?

1. Akka is an open source implementation of Hewitt's (pure) [[./actors.html][Actor
   Model]], as a library in Scala.  It makes practical concessions to
   the pure actor model.

1. "Akka is a toolkit and runtime for building highly concurrent,
   distributed, and fault tolerant event-driven applications on the
   JVM" http://www.akka.io.  [Note the use of concurrent *and*
   distributed.]

1. Akka helps with scaling both UP (utilizing multi-core processors) and
   OUT (utilizing the cloud/ grid/ cluster).

1. For fault-tolerance, Akka adopts the "Let it crash" model, which has
   been used with great success in the telecom industry to build
   applications that self-heal and never stop.

1. Reactive Applications = Concurrency + Events

** What is Akka? v.Frivolous

1. https://www.google.com/search?q=akka+mountain

1. https://www.google.com/search?q=akka+finnish+goddess&safe=active

1. https://www.google.com/search?q=akka+indian&safe=active

1. https://www.google.com/search?q=akka+telugu&safe=active

1. Should we give equal time to Bing, Yahoo, DuckDuckGo?

** Who Is Using Akka?

#+CAPTION: Who Is Using Akka?
#+ATTR_HTML: :alt fig-actor-users.png :align center :width 50%
[[./Figures/fig-actor-users.png]]


** What is Akka? v.nonFrivolous

1. Includes an implementation of Actor Model, with improvements for practicality.

1. Also includes Software Transactional Memory (STM).

1. Event driven, middleware framework

1. Part of Typesafe Stack. Open source, Apache License.  

1. Created by Jonas Bonér.

** Large Scale Examples of Akka

1. http://www.playframework.com/ "The High Velocity Web Framework For
   Java and Scala" Built on Akka, Play provides predictable and
   minimal resource consumption (CPU, memory, threads) for
   highly-scalable applications.  RESTful by default.

   1. REST stands for "Representational State Transfer".  It describes
      a web architecture.

1. Play https://developer.lightbend.com/start/?group=play

1. http://spray.io/ =spray= is an open-source toolkit for building
   REST/HTTP-based integration layers on top of Scala and Akka.  It is
   asynchronous, and actor-based.


** Akka Practical Use Overview

1. Versions: Scala 2.11+, Akka 2.3.1+.  Code for older versions may
   not work with these versions.  Most, not 100%, are open source.

1. https://developer.lightbend.com/guides/akka-quickstart-scala/ Must
   read and follow.

1. The code shown in boxes below is not always self-contained enough to
   compile it stand-alone.

1. =scala.actor= is deprecated.  Caution: Many articles on the web
   are based on scala.actor.  Use =import akka.actor= .
   http://docs.scala-lang.org/overviews/core/actors-migration-guide.html

1. Akka library can be used in Java as well.
1. http://www.pykka.org/ with Python.

** How Does Akka work?

#+CAPTION: How Does Akka work?
#+ATTR_HTML: :alt fig-actor-users.png :align center :width 100%
[[./Figures/fig-akka-how-works.png]]

** Akka Practical Details

1. Akka can be used without defining a
   configuration, since sensible default values are provided.

    #+begin_src scala
// application.conf at the root of the class path.
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  stdout-loglevel = "WARNING"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    default-dispatcher {
      # set to 1 for as fair as possible
      throughput = 10
    }
  }
  remote { netty.tcp.port = 2552  }
}
#+end_src



* Akka Actor Architecture

#+CAPTION: Actor Hierarchy and Name Resolution
#+ATTR_HTML: :alt fig-actor-hierarchy.png  :title Actor Hierarchy and Name Resolution :align center :width 100%
[[./Figures/fig-actor-hierarchy.png]]

1. An actor in Akka always belongs to a parent.  Who is the parent of
   the first actor you create? "Root Guardian", similar to parent of /
   in Linux.

1. Read further https://doc.akka.io/docs/akka/current/typed/guide/tutorial_1.html#the-akka-actor-hierarchy


* Akka Ops: Create, Send, Become, Supervise

1. Akka has Create, Send, Become, Supervise operations on its actors.
   These are essential to use Akka.

1. Link to [[./akkaOps.org][Lectures Notes on Ops]]

* Routers, Dispatchers, and Schedulers

1. A router is a type of actor.  Routes incoming messages to
   outbound actors.
1. A dispatcher chooses an actor and a message from the actors mbox,
   and allocates a thread.
1. You can schedule sending of messages and execution of tasks
   (functions or Runnable).

1. Link to [[./akkaRDS.org][Lecture Notes on Routers, Dispatchers, and Schedulers]]


* Futures and Promises

1. Akka gets Futures and Promises from Scala.

** Futures

1. A Future is a placeholder object for a result that has not been
   computed yet.  A related CS term is *lazy evaluation*.

1. A Future may only be assigned once.  Needs an =ExecutionContext=

1. Invoking the =future= method starts an asynchronous computation and
   returns a future.  The result becomes available once the future
   *completes*.

   #+begin_src scala
import scala.concurrent.{ future, promise }
import scala.concurrent.ExecutionContext.Implicits.global
val s = socialNetwork.createSessionFor("user", credentials)
val f: Future[List[Friend]] = future {
  s.getFriends()           // may take a while
}
#+end_src

** Promises

1. A Promise is a writable, single-assignment container that completes
   a future. Methods: =success=, =failure=, =complete=

   #+begin_src scala
import scala.concurrent.{ future, promise }
import scala.concurrent.ExecutionContext.Implicits.global
val p = promise[T]
val f = p.future
val prdcr = future {               // producer
  val r = produceSomething()
  p . success . r
  continueDoingSomethingUnrelated()
}
val cnsmr = future {              // consumer
  startDoingSomething()
  f . onSuccess {
    case r => doSomethingWithResult()
  }}
   #+end_src

* Distributed Actor System

#+CAPTION: Distributed Actor System
#+ATTR_HTML: :alt fig-actor-path.png :align center :width 100%
[[./Figures/fig-actor-path.png]]

** Actor References

1. Actor references may be obtained by (i) creating actors or (ii)
   looking them up

1. Typically, we create actors beneath the guardian actor using the
   =ActorSystem.actorOf= method and then ...

1. Spawn the actor tree using =ActorContext.actorOf=.

*** Looking up Actors by Concrete Path

1. =ActorSystem.actorSelection= method

1. Send a message, such as the built-in =Identify= message, to the
   actor and use the =sender= reference of a reply from the actor.

1. =actorFor= is deprecated in favor of =actorSelection= because actor
   references acquired with actorFor behave *differently* for local
   and remote actors.  Beware: actorOf vs. actorSelection vs. actorFor

1.  Matching on paths similar to shells «*» and «?»:
    =context.actorSelection("../*") ! msg=

*** Absolute vs. Relative Paths

1. Send a message to a specific sibling:
1. =context . actorSelection ("../brother") ! msg=
1. Absolute paths: =context.actorSelection("/user/serviceA") ! msg=

** Remote Actors and Akka Clusters

1. Remote Actors ActorSystem configuration

#+CAPTION: Remote Actors ActorSystem configuration
#+ATTR_HTML: :alt fig-actor-remote-1.png :align center :width 100%
[[./Figures/fig-actor-remote-1.png]]


** Clusters

1. Automatic cluster-wide deployment
1. Decentralized P2P gossip-based cluster membership
1. Leader “election”
1. Adaptive load-balancing (based on runtime metrics)
1. Automatic replication with automatic fail-over upon node crash
1. Automatic adaptive cluster rebalancing
1. Highly available configuration service

** Enable Clustering

    #+begin_src scala
akka {
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    ...
  }
 
  extensions = ["akka.cluster.Cluster"]
 
  cluster {
    seed-nodes = [
      "akka://ClusterSystem@127.0.0.1:2551",
      "akka://ClusterSystem@127.0.0.1:2552"
    ]
    auto-down = on
  }
}
#+end_src


** Remote Deployment

#+CAPTION: Remote Deployment
#+ATTR_HTML: :alt fig-actor-remote-deployment.png :align center :width 100%
[[./Figures/fig-actor-remote-deployment.png]]

1. http://doc.akka.io/docs/akka/snapshot/general/addressing.html

* Termination

What Does "Finished" Mean? The most natural answer to this question
   appears to be, "When all the Mailboxes are empty." Natural, yes;
   correct, no. :)

#+CAPTION: Actor System terminated?
#+ATTR_HTML: :alt fig-terminated-q.png  :align center :width 100%
#+ATTR_HTML: :style background-color:beige
[[./Figures/fig-terminated-q.png]]

** The Reaper

#+CAPTION: Actor System Reaper
#+ATTR_HTML: :alt fig-the-reaper.png  :align center :width 100%
#+ATTR_HTML: :style background-color:beige
[[./Figures/fig-the-reaper.png]]

** Reaper Source Code

    #+begin_src scala
      import akka.actor.{Actor, ActorRef, Terminated}
      import scala.collection.mutable.ArrayBuffer
       
      object Reaper { case class WatchMe(ref: ActorRef); }
       
      abstract class Reaper extends Actor {
        import Reaper._
        val watched = ArrayBuffer.empty[ActorRef]
       
        /* Derivations must implement this method. Called 
         * when everything is dead */
      
        def allSoulsReaped(): Unit
       
        final def receive = {
          case WatchMe(ref) =>
            context.watch(ref)
            watched += ref
          case Terminated(ref) =>
            watched -= ref
            if (watched.isEmpty) allSoulsReaped()
        }
      }
#+end_src

** PoisonPill

#+CAPTION: Application with PoisonPill
#+ATTR_HTML: :alt fig-akka-poison-pill.png  :align center :width 100%
#+ATTR_HTML: :style background-color:beige
[[./Figures/fig-akka-poison-pill.png]]

* References

1. https://doc.akka.io/docs/akka/current/
   Nearly all the code snippets and figures are from here.  Reference.

2. Jonas Boner, "Above the Clouds: Introducing Akka", 2011.  Web
   search.  Video or pdf.  Highly recommended.

4. https://doc.akka.io/docs/akka/current/typed/guide/ Getting Started
   Guide.  Must visit.  The following are linked there.
   1. Introduction to Akka.  Required Reading
   2. Part 1: Actor Architecture. Required Reading
   3. Part 2: Creating the First Actor. Required Reading
   4. Part 3: Working with Device [in the small] Actors Optional Reading
   5. Part 4: Working with Device Groups   Optional Reading
   6. Part 5: Querying Device Groups  Optional Reading

1. http://allaboutscala.com/scala-frameworks/akka/ 2020 Recommended
   Reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
