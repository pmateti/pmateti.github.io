# -*- mode: org -*-
#+Date: 2020-01-21
#+TITLE: Distributed Computing  Course Projects
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: Mateti's Distributed Computing
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\">../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 &bull; <a href=mailto:pmateti@iiitd.ac.in>pmateti@iiitd.ac.in</a> &bull; %d"))
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P, LI {TBDtext-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STARTUP:showeverything
#+OPTIONS: toc:2


* Prerequisites

1. We will try to fill you in on the missing prerequisites.  Please
   fill out the following survey [[../Overview/survey.org]]

** Languages

1. It is assumed that you are fluent in Java, and C++/C.
1. It is *not* assumed that you are familiar with either RPC or RMI,
   Scala or Akka.

** Programs v Processes

1. Conceptually you must have a pretty good understanding of
   [[file:../RPC+RMI/programs-processes.html][Programs-v-Processes]].
2. Both theory and (Linux) practice.

** Linux

1. We use  Linux -- any distro.  We will not be using Windows.

1. This course expects that you are already comfortable in the /use/
   of networked machines based on Linux and X GUI.

5. Be able to remote login via =ssh= into a machine without having to
   give a password each time.  Set up pub/private keys for your self.

1. Linux process-related system calls, in particular, =alarm, fork,
   pipes, signals= and some =bash= scripting.



** Assertions

1. This course uses assertions written in logic (generalized Boolean
   exp) heavily.
1. There will be lecture(s) on assertions; see [[../FormalMethods/]].
1. But, do become familiar on your own with =assert.h= of C/C++
   https://en.wikipedia.org/wiki/Assert.h.

* Overview

1. The projects are /required/.  Not producing demonstrable (even if
   faulty) projects will award you a grade no better than an F in the
   whole course regardless of your performance in the exams.

1. The projects must be work done by /you/ as a /single individual/.
   Do not use code from other sources, not even if it was given by the
   instructor in a past term.  

1. The projects are evaluated both by a demo and by skimming the
   source code and associated documentation.

* The Idea of a Digital WhiteBoard

1. Our /whiteboard/ (WB) is a digital interactive version of a typical
   class room whiteboard mounted on a wall but allowing multiple
   people, geographically distant, to simultaneously use the board.
   There are many open source and commercial implementations of this
   idea.

1. To keep our project size within 1500 lines of code, we drastically
   simplified the WBs to (i) draw no more than zig-zag lines, and (ii)
   no text display.  The multiple people are just you remotely working
   from multiple (virtual) machines.

** WhiteBoard #1

1. A whiteboard, say b0, is a window of colored zig-zag lines produced
   by different clients who are *on* the board.  Clients can join/leave
   an existing board, or create a new board.
1. A server S1 handles all the clients that share a given board b0,
   and has in general multiple boards, b0, b1,...  There can be many
   servers, S1, S2, ...  
1. A whiteboard is not shared among servers.  For load balancing or
   whatever, a server may transfer a board (and all clients on it) to
   another server.

** WhiteBoard #2

1. Conceptually, the servers and clients are on whatever network nodes
   you wish.  Obviously, firewalls etc, should permit communication
   among our nodes.

1. We will give a demo, during the first week, to make all this
   familiar.

* Project P0: Tasks 5% weight

We will give a P0.tar.gz (A Startup WhiteBoard Src Code Bundle) by Dr
Mateti.  Depending on the background of the students registered, this
will be in one of C++, Java/Kotlin, or Go.

The P0 will be a tiny collection of client-server programs using

1.  C++ and RPC
2.  Java RMI and/or Jini, JavaSpaces
3.  Distributed PLs: Erlang, Go, and/or Scala

that implement the WB client-server paradigm, depending on the PL.
These, as given, have only one server, but can have multiple boards and
clients.

In P0, we are not using "threads".  We do use multiple processes.
And, several "machines".


** Getting Started with P0

1. For now, we assume P0 was given in C++.  See [[./WB-C-RPC/]] to
   get an overview of the directory.

1. Here is a TBD [[./WB-C-RPC/html/]] web-browse-able version of the
   P0 source generated by
   http://www.doxygen.com .

1. Study the source code closely.  P0 is 800+ lines.  You should
   become so familiar with it *as if* you wrote it.  Read through this
   entire page: [[../Projects/WB-C-RPC/0README.html]]

** First Task: Build P0

1. Your first task is to =make= the C++/X/RPC version so that the
   server is on one machine (node), and there are at least four
   clients on four different nodes (different CPUs?) and two different
   whiteboards.

1. Read the [[./WB-C-RPC/0README.org]] to get an overview.  You are given a working
   version bundle of source code of the P0.  Untar this (=tar xvvf
   tarBall.tbz=), and do a make.
1. We expect no errors inherently
   present in the bundle.  Any errors you run into are likely to be
   due to your build environment.  

1. You will find [[./WB-C-RPC/wbadmin.c]] useful after you have
   begun working with P1.


** Second Task: Run P0

1. Your second task is to run the C++/X/RPC version so that the server
   is on one machine (node), and there are at least four clients on
   four different nodes (different CPUs?) and two different
   whiteboards.

2. The P0 C++/RPC version of our WB project expects that the Linux
   setup is as follows.  See Linux Setup for further details.

3. =rpcbind= is running with option -i.  Read the man page for details.
4. Xorg/X server must not disable listening to TCP -- The option
  =-nolistentcp= should not be present.
5. Be able to remote login via =ssh= into a machine without having to
   give a password each time.  Set up pub/private keys for your self.



** Second Task: Assertions

1. Your second task is to write entry- and exit assertions for most of
   the procedures and functions of P0.  First, in English prose, and
   then in PL Boolean expressions.

* Extend P0 to Project P1 10%

And, extend the clients and server(s) as follows.  The percentages are
associated weights in grading.

1.  WB server now responds to messages from a new ``client'' that we call
   =wbadmin=.  A simple example of =wbadmin.c= is included in the source
   code.  10%
2.  Server must respond to a query with full information (name of the
   board, names of the host machines where the boards are in use, etc.)
   regarding all its whiteboards.  15%
3.  Server must respond to a request to initiate a new server on a given
   node.  The newly given node may be the same node as that of an
   existing server.  The newly created server begins its life with no
   boards to serve.  25%
4.  A server must respond to a request to transfer a given whiteboard
   (and hence all clients on it) from one server to another.  This
   transfer should be transparent to the users of the clients.  25%
5. Add usable pre- post-conditions to all (old and new) functions/
   procedures/ methods.  25%

7. Further clarifications, as needed, will be found on our
   discussion board.

Design and implement the extensions described above in C++ and RPC.
We are naming this version P1.

* Java RMI: P2 10%

1. Re-do/ re-design the P1 above but using Java, and RMI.
1. Java WhiteBoard [[../Lectures/Projects/WB-Java-RMI/html/index.html][src html-ized]]

* Scala + Akka: P3 10%

1. Re-do/ re-design the P1 above but using [Scala and] Akka Actors.

* Turnins and Demos

1. TBD To be revised to suit IIIT-Delhi.

** Demos

1. When you are done you must give me a demo of your program.  You
   will get just one chance.  It is over in about 5 minutes,
   typically.  I may ask you to rebuild the program prior to the demo,
   but have it ready-to-run.  We expect some of our class students as
   audience.  Read through the acceptance test linked above.

1. This is not a software engineering class.  Bugs are tolerated.
   There is no teamwork.

2. But your project must be demonstrable and must satisfy the
   acceptance test.

3. Graded on a very coarse (not fine) basis.


** Turnins

1. The due dates and project weights are on the course home page.  For
   each of the above, turn in a brief PDF report, with an overview of
   how you did it.  Include screenshots that show that the WB
   Acceptance Test was passed.  Also, turnin the tar ball of your
   source code.

1. Login to TBD =thor.cs.wright.edu= with your username.  Using the
   command line =~ceg737000/turnin P1 fileNames= submit files with
   your changes clearly pointed out/ marked/ highlighted.  Change P1
   to P0, P2 or P3 as needed.  Submit *your* =ReadMe.txt=, not my
   =0README.*=.

* Links

1. [[./][This directory]] listing.

1. [[./Linux-Setup.html]] Linux Setup.  Help with Linux for our WhiteBoard
   RPC projects (P0 and P1).

1. [[./7370-WB-C-RPC/]] of the WhiteBoard C RPC projects P0, the src code
   bundle expanded for use in lectures. Download [[./WB-C-RPC-2020.tbz]]

1. [[./WB-Java-RMI/]] Java RMI version of P0.  Download [[./WB-Java-RMI-2020.tbz]]

1. [[./accept-test.html]] Acceptance Test.  Before the demo, verify that
   it will pass this text.



# * End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
