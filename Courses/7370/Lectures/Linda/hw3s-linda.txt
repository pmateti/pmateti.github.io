CS 7370: Distributed Systems I
Fall 91: Mateti


Problem: Given a finite bag B of numbers, as well as the size nb of the
bag B, produce a set S of numbers so that no two numbers in S divide
each other, and it is the largest such set that is a subbag of B.  Do
this in Linda, and in SR.


Linda Solution:

(Most of the difficulty is in discovering a solution outline suitable
for Linda, i.e., with many processes, with almost no synchronization.
Message passing, and shared memory are easy in Linda.  Since this is a
homework encouraging you to learn Linda, efficiency is relatively
unimportant, but correctness must be preserved at all costs.

Note that the set S for a given B is not unique.  So we are entitled
to produce one or more such S as long as each of the sets is a valid
answer.  I make no claims that the solution outlined below is the
"best"; it certainly is a "good" one.  It is quite likely
that you will find several details missing.)

We say that a set s is partial solution, if no two numbers in s divide
each other, and s is a subbag of B.  But s is perhaps not a largest
such bag.

We add tuples of the form <"nps", i, 0> for i:1..nb giving us the
number of partial solutions of length i constructed so far.  These
counters are incremented as we build up a solution.  When finished, we
rd("nps", i, ?j) for i:nb .. 0 until we find a non-zero j.  We then 
read an/the i-long solution from the tuple space TS.

Our computation proceeds in "waves": the i-th wave computes (or tries to)
all partial solutions of length i.  The last wave is for i == nb.

We take (in) one element b of B, and take (in) one partial solution s
of length i-1, and see if we can extend it to a solution of length i.
If it divides or is divided by an element of s, s cannot be extended,
and no partial solution gets deposited.  Otherwise, we add b to s, and
deposit the resulting (partial) solution into the TS, and increment
the c in <"nps", i, c>.  After this is done for each element of B, we
move on to the next wave.

Wave 1 starts with s == empty set.  So we should have done {out("ps",
0, empty-set) nb times; out("nps", 0, 1);}

Taking one element b of B without getting blocked is not too hard.
Maintain a count of items in the current bag, <"nB", i, ni>, where is
the same i as in the waves.  Take (in) this counter, verifying that it
is > 0, in("B", i, ?b) and then deposit out("nB", i, ni-1).

Generating the bag for the next wave is not too hard.  After obtaining
b, do {in("nB", i+1, ?n); out("B", i+1, b); out("nB", i+1, n+1)}.  So
we better have <"nB", i, 0> tuples for i:1..nb right after beginning.

A worker process will not proceed to the next wave until after the
current i-th wave is finished; i.e., a rd("nB", i, ?n) gives n==0.
There is a next wave provide the present wave produced >0 solutions.
If i == nb, the process terminates, otherwise it increments i, and
begins on the next wave.

The partial solution is a set, and sets cannot be 'naturally'
represented in Linda, just as they cannot in practically every
programming language.  We represent them as sequences without
duplicates.  Thus if we relly wanted to out("ps", i, s) with s
containing i elements, we will actually do out("ps", i, j, s[j]) for
j:1..i; similarly for reading a partial solution of length i.  The
empty-set solution required begin wave 1 is simply out("ps", 0, 0, x)
where x is any (irrelevant) number.


(The algorithm can easily be improved.  I chose to 'describe' rather
than write in pseudo-code in order to explain the ideas.  I am sure
you can all fill-in the details and code it in whatever-Linda.  The SR
solution ...)
