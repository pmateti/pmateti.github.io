# -*- mode: org -*-
#+Date: 2020-01-01
#+TITLE: DistrComp  Course Overview
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: Mateti's Distributed Computing
#+BIND: org-html-preamble-format (("en" "%d | <a href=\"../../\">../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 &bull; <a href=\"https://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P, LI {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+STARTUP:showeverything
#+OPTIONS: toc:1

* Course Overview

1. WSU CEG7370 [[https://cecs.wright.edu/~pmateti/Courses/7370/Top/][Distributed Computing]] Course Home Page
1. [[./syllabus.html][Syllabus]] of the IIIT-Delhi version of this course
2. [[../Projects/7370projects.html][Projects]]
3. Two exams. Most likely [[../../Exams/index.html][take-home]].  But, without searching the web or
   whatever for answers.

4. No graded homework.  Implies that you will work on
   various things on your own and discuss.
1. [[https://piazza.com/wright/spring2020/ceg7370/home][Piazza]] is our discussion platform.

1. [[./andrews-multithreaded-toc.org]] Andrews Book.  Noted: Excluded
   chapters and sections.  We do cover things not included in this
   book.

* Today's Lecture

** Terminology

1. We are picky about our terms.
1. Ex: "Process"
   1. Conceptutally the same: process, thread, task, job, ...
   2. On a given platform (e.g., Linux): process v thread v ... are different
   1. By def: a single process is sequential

1. Muliprocess v Multiprocessor v Multi-core

1. Until the last week of this course, we will use "concurrency" as a
   term covering all of networked-, parallel-, distributed- computing.


** Concurrency Fundamentals

3. [[../Fundas/concurrency-fundamentals.org]]


* Home Work

1. Learn the Mine Sweeper game.
1. Study today's lecture.
1. Enroll and post on Piazza the [[../Overview/survey.org][Survey of Prerequisites]] answered in
   some detail.

* References

Reading list for this course is a transitive closure starting from the
ones linked on the course home page. Items marked as Require Reading
are sources for exam questions. Other items do enhance your
understanding, but, if you are not aiming for an A, you may skip.


1. I will list specific chapters from Recommended Books later.
1. Gregory R. Andrews, Concurrent Programming: Principles and
   Practice, Benjamin/Cummings, 1991.  Also see his revision of this book:
   [[./andrews-multithreaded-toc.org]]

1. M. Ben-Ari, Principles of Concurrent and Distributed Programming,
   Addison-Wesley/Pearson, 2006.

1. George Coulouris, Jean Dollimore, Tim Kindberg, and Gordon Blair,
   Distributed Systems: Concepts and Design, 2011.

1. Scala + Akka Documentation, https://doc.akka.io/docs/akka/current/scala.html

1. Java tutorial, https://download.oracle.com/javase/tutorial/ or
   another book of your choice on client/server programming in Java

1. Other references listed in lectures.


# Local variables:
# after-save-hook: org-html-export-to-html
# end:
