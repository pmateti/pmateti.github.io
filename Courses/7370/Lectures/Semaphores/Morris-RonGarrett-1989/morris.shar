From rgarrett Tue May  7 15:20:14 1991
Date: Tue, 7 May 91 15:20:00 -0400
From: rgarrett (Ron Garrett)
Received: by thelma.cs.wright.edu (4.1/SMI-4.1)
	id AA00163; Tue, 7 May 91 15:19:53 EDT
To: pmateti
Subject: morris
Status: OR

morris, an implementation of Morris's algorithm for preventing
starvation

Shows a picture of the system as it executes and collects statistics
about the processes.

Usage:	morris [f | l | p | r] [xx]

where	f indicates fifo     semaphore implementation
	l indicates lifo     semaphore implementation
	p indicates priority semaphore implementation
	r indicates random   semaphore implementation
	(default is random)

	xx is a number from 1 to 40 for the number of competing processes
	(default is 40)

Arguments may be given in either order.

This was written for the SUN workstation; porting should require
little change.

This file includes the makefile, morris.h, morris.c, fifo.c, lifo.c,
priority.c, random.c, and proc.c.

morris is the controller and display process for the system.  proc
is one of the competing processes.  lifo, fifo, priority, and random
implement semaphores in 4 different ways, indicating the way the next
process to get the semaphore is chosen.

--cut here--


#makefile for morris system

system: morris proc lifo fifo priority random

morris: morris.c morris.h
	gcc -g -o morris morris.c -lcurses -ltermcap

proc: proc.c morris.h
	gcc -g -o proc proc.c

lifo: lifo.c morris.h
	gcc -g -o lifo lifo.c

fifo: fifo.c morris.h
	gcc -g -o fifo fifo.c

priority: priority.c morris.h
	gcc -g -o priority priority.c

random: random.c morris.h
	gcc -g -o random random.c

#EOF makefile



/*
   morris.h
   Ron Garrett
   11/19/89
   #defines, typedefs, and #includes for morris and related programs
*/

#include <ctype.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <sys/shm.h>
#include <sys/msg.h>
#include <sys/time.h>
#include <curses.h>
#include <signal.h>
#include <sys/wait.h>

#define MOD                      %
#define MAXPROCS                40
#define NUM_PROC_ARGS            8
#define NUM_ARB_ARGS             3
#define PROC_SLEEP_CONST    100000
#define MORRIS_SLEEP_CONST   10000

typedef int COORDINATES[2];
#define ROW_COORD 0
#define COL_COORD 1

#define NUMSEMS    4

#define B     0            /* the b semaphore, protects na */
#define A     1            /* the a semaphore, protects nm (outer gate) */
#define M     2            /* the m semaphore, protects cs (inner gate) */
#define R     3            /* the r semaphore, protects rs */

#define NUMSTAGES  4       /* possible stages of a competing process */

#define STAGE_RS   4       /* remainder section */
#define STAGE_OUT  5       /* at outer gate */
#define STAGE_IN   6       /* at inner gate */
#define STAGE_CS   7       /* critical section */

#define FIFO     0         /* possible types of semaphore arbitration */
#define LIFO     1
#define PRIORITY 2
#define RANDOM   3

#define p(x)  peevee(id, boxes[(x)], P, replyBox, &(timing[(x)]))
#define v(x)  peevee(id, boxes[(x)], V, replyBox, &(timing[(x)]))

#define SHAREKEY     (key_t)IPC_PRIVATE
#define SHAREVARS    6
#define SHAREFLAGS   IPC_CREAT | 0600  /* create with read/write permission */

#define ATTACHADDR   (char *)0
#define ATTACHFLAGS  0

#define NA     (*((int *)share_ptr))       /* number at outer gate */
#define NM     (*(((int *)share_ptr)+1))   /* number at inner gate */
#define CS     (*(((int *)share_ptr)+2))   /* number in critical section */
#define RS     (*(((int *)share_ptr)+3))   /* number in remainder section */
#define STOP   (*(((int *)share_ptr)+4))   /* global flag to stop system */
#define DONE   (*(((int *)share_ptr)+5))   /* how many procs have stopped */

#define MSGKEY     (key_t)IPC_PRIVATE
#define MSGFLAGS   IPC_CREAT | 0600  /* create with read/write permission */

typedef struct times            /* storage for process statistics */
{
   struct timeval value[NUMSEMS + NUMSTAGES];
} TIMES;

typedef struct pMsg
{
   long pMtype;                 /* type of message */
   int id;                      /* id of proc sending message */
   int op;                      /* operation requested */
   int cs_times;                /* # of times this proc has been in C. S. */
   int reply;                   /* reply Box id */
   int na,                      /* current state of counters */
       nm,
       cs,
       rs;
   TIMES mystats;               /* statistics for this process */
} pMSG;

#define ANY_MESSAGE   0         /* possible types of message */

#define P             1         /* possible semaphore (pMSG) operations */
#define V             2

#define REMAINDER     1         /* possible screen (pMSG) operations */
#define OUTER         2
#define INNER         3
#define IN_CRITICAL   4
#define OUT_CRITICAL  5
#define FINISHED      6

typedef struct rnode
{
   struct rnode *next;          /* next element in list */
   int replyBox;                /* where to send the grant */
} RNODE;
typedef RNODE *Q;
typedef RNODE *STACK;

/* EOF morris.h */



/*
   morris.c
   Ron Garrett
   11/8/1989
   program to simulate Morris's algorithm for starvation-free mutual exclusion
*/

#include "morris.h"

COORDINATES numtimes[] =      /* screen positions for process status reports */
{
   { 03, 57 }, { 04, 57 }, { 05, 57 }, { 06, 57 }, { 07, 57 },
   {  8, 57 }, {  9, 57 }, { 10, 57 }, { 11, 57 }, { 12, 57 },
   { 13, 57 }, { 14, 57 }, { 15, 57 }, { 16, 57 }, { 17, 57 },
   { 18, 57 }, { 19, 57 }, { 20, 57 }, { 21, 57 }, { 22, 57 },

   { 03, 69 }, { 04, 69 }, { 05, 69 }, { 06, 69 }, { 07, 69 },
   {  8, 69 }, {  9, 69 }, { 10, 69 }, { 11, 69 }, { 12, 69 },
   { 13, 69 }, { 14, 69 }, { 15, 69 }, { 16, 69 }, { 17, 69 },
   { 18, 69 }, { 19, 69 }, { 20, 69 }, { 21, 69 }, { 22, 69 }
};

int arbitrator[NUMSEMS];      /* message queue IDs for arbitrator processes */

/* names of the arbitrator processes */
char *arbiter[] = { "fifo", "lifo", "priority", "random" };

/* initial values for semaphores (to be fed to the arbitrator processes) */
char *initial_values[NUMSEMS] = { "0", "0", "1", "0" };

char arbQ[NUMSEMS][10];       /* character strings for feeding competitor */
                              /* processes the arbitrator message queue IDs */

int share;                    /* system ID for shared variable space */
char *share_ptr = (char *)0;  /* private pointer to it */

int msgQ;                     /* morris's message queue for updating screen */

char leader[16];
pMSG request;                 /* the message structures */
char follower[16];

char leader1[16];
static pMSG notice;
char follower1[16];

TIMES stats[MAXPROCS];        /* storage for process statistics */
int passes[MAXPROCS];

char *filename[] =            /* filenames for reporting statistics */
   { "morris.fi", "morris.li", "morris.pr", "morris.ra" };

FILE *results, *fopen();

int determine_sem_style(argc, argv)
   int argc;
   char *argv[];
/* determines which semaphore style to use based on user command line arg */
{
   register char style;

   if ( argc < 2 )                           /* user didn't specify anything */
      return RANDOM;

   /* user specified either a number or an arbitration style */
   if ( isalpha(*(argv[1])) )                       /* first arg is a letter */
      style = *(argv[1]);
   else
   {
      if ( (argc > 2) && (isalpha(*(argv[2]))) )   /* second arg is a letter */
	 style = *(argv[2]);
      else
	 style = 'r';
   }

   switch ( style )            /* now return the proper value based on style */
   {
   case 'f':
   case 'F':
      return FIFO;
   case 'l':
   case 'L':
      return LIFO;
   case 'p':
   case 'P':
      return PRIORITY;
   case 'r':
   case 'R':
   default:
      return RANDOM;
   }
}

int determine_total_procs(argc, argv)
   int argc;
   char *argv[];
/* determines how many processes to start based on user command line arg */
{
   register int howmany;
   double atof();

   if ( argc < 2 )                           /* user didn't specify anything */
      return MAXPROCS;

   /* user specified either a number or an arbitration style */
   if ( isdigit(*(argv[1])) )                       /* first arg is a number */
      howmany = (int)(atof(argv[1]));
   else
   {
      if ( (argc > 2) && (isdigit(*(argv[2]))) )   /* second arg is a number */
	 howmany = (int)(atof(argv[2]));
      else howmany = MAXPROCS;
   }

   /* now make sure we don't get too many processes */
   howmany = ( howmany > MAXPROCS ) ? MAXPROCS : howmany;
   
   return howmany;
}

int give_up_share(share, mem_ptr)
   int share;
   struct shmid_ds *mem_ptr;
/*
return to the system the shared memory identified by
share and at location mem_ptr
*/
{
   shmctl(share, IPC_RMID, mem_ptr);
}

int init_share(share_id, memory_ptr)
   int *share_id;
   char **memory_ptr;
/* get and initialize the shared memory */
{
   char *shmat();

   *share_id = shmget(SHAREKEY, SHAREVARS*sizeof(int), SHAREFLAGS);
   if ( *share_id == -1 )                /* can't get shared memory */
      return FALSE;

   *memory_ptr = shmat(*share_id, ATTACHADDR, ATTACHFLAGS);
   if ( *memory_ptr == (char *)(-1) )    /* can't attach shared memory */
   {
      give_up_share(*share_id, *memory_ptr);
      return FALSE;
   }

   NA = 0;                               /* zero out all shared variables */
   NM = 0;
   CS = 0;
   RS = 0;
   STOP = FALSE;
   DONE = 0;
   return TRUE;
}

give_up_sems(sem)
   int sem[];
/* give up the message queues used for the arbitration processes */
{
   int index;

   for ( index = B; index < NUMSEMS; index++ )
      msgctl(sem[index],IPC_RMID, (struct msqid_ds *)0);
}

int init_sem(sem)
   int sem[];
/* get and initialize all the message queues for the semaphore arbitrators */
{
   int index;

   for ( index = B; index < NUMSEMS; index++ )
      if ( (sem[index] = msgget(MSGKEY, MSGFLAGS)) == -1 )  /* get the queue */
	 return FALSE;
      else
	 sprintf(arbQ[index], "%d", sem[index]);   /* store it in ascii form */
   return TRUE;
}

int init_msgQ(queueID)
   int *queueID;
/* get the message queue to be used for screen update requests */
{
   if ( (*queueID = msgget(MSGKEY, MSGFLAGS)) == -1 )
      return FALSE;
   return TRUE;
}

int catcher(sig, code, context)
   int sig, code;
   struct sigcontext *context;
/* this function will halt the system when the user hits ctrl-c */
{
   if ( STOP )                /* if some process was not started, send */
   {                          /* morris an additional FINISHED message */
      notice.pMtype = 1;
      notice.id = -1;
      notice.op = FINISHED;
      msgsnd(msgQ, (struct msgbuf *)(&notice), sizeof(pMSG), IPC_NOWAIT);
   }
   STOP = TRUE;
}
   
main(argc, argv)
   int argc;
   char *argv[];
{
   int howmany, numProcs, index, newid, arbStyle, status;
   int draw_screen(), close_screen();

   arbStyle = determine_sem_style(argc, argv);  /* determine semaphore style */
   howmany = determine_total_procs(argc, argv); /* determine # of processes */

   if ( !(init_share(&share, &share_ptr)) )     /* get shared memory */
   {
      printf("Unable to initialize shared memory.\n");
      exit(1);
   }

   if ( !(init_sem(arbitrator)) )                       /* get semaphores */
   {
      printf("Unable to initialize semaphores.\n");
      shmdt(share_ptr);
      give_up_share(share, share_ptr);
      give_up_sems(arbitrator);
      exit(1);
   }

   if ( !(init_msgQ(&msgQ)) )                     /* get a message queue for */
   {                                              /* screen update requests */
      printf("Unable to get a message queue.\n");
      shmdt(share_ptr);
      give_up_share(share, share_ptr);
      give_up_sems(arbitrator);
      exit(1);
   }

   signal(SIGINT, catcher);                     /* let morris control SIGINT */

   for ( index = B; index < NUMSEMS; index++ )   /* start arbitration */
   {                                             /* processes for B, A, M, R */
      newid = fork();
      if ( !newid )
      {
	 execl(arbiter[arbStyle], arbiter[arbStyle],
               arbQ[index], initial_values[index], (char *) 0);
      }
      else
	 if ( newid == -1 )
	 {
	    printf("Can't start arbitration process %d.\n", index);
	    STOP = TRUE;
	 }
   }
   
   numProcs = 0;                               /* now start competitor procs */
   for ( index = 0; index < howmany; index++ )
   {
      char id_str[3], share_str[10], msgQ_str[10];

      sprintf(share_str, "%d", share);
      sprintf(msgQ_str, "%d", msgQ);

      newid = fork();
      if ( !newid )
      {
         sprintf(id_str, "%d", index);
	 execl("proc", "proc", id_str, share_str, msgQ_str, 
               arbQ[B], arbQ[A], arbQ[M], arbQ[R], (char *) 0);
	 printf("Can't execute proc, call number: %d reason: %d\n",
                index, errno);
	 DONE++;
      }
      else
      {
	 if ( newid == -1 )                                  /* error return */
	    printf("Can't fork to process number %d\n", index);
	 else
	    numProcs++;
      }
   }

   draw_screen(arbStyle);             /* put up screen with sem style notice */

   while ( DONE < numProcs )                 /* until all processes are done */
   {
         status =  msgrcv(msgQ, (struct msgbuf *)(&request), sizeof(pMSG),
			  (long)ANY_MESSAGE, MSG_NOERROR);

      if ( request.op == FINISHED )
      {
	 stats[request.id] = request.mystats;    /* record the final stats */
	 passes[request.id] = request.cs_times;
	 DONE++;
      }
      else
      {
	 if ( request.id != -1 )                 /* or update the screen */
	    update_screen(&request);
      }
   }

   /* now we've finished: close down all the arbitration processes */
   for ( index = B; index < NUMSEMS; index++ )
   {
      request.pMtype = 1;
      request.op = FINISHED;
      request.reply = msgQ;
      msgsnd(arbitrator[index], (struct msgbuf *)(&request), sizeof(pMSG), 0);
      msgrcv(msgQ, (struct msgbuf *)(&request), sizeof(pMSG),
	     (long)ANY_MESSAGE, MSG_NOERROR);
   }

   /* close the screen and write the results to file */
   close_screen();

   results = fopen(filename[arbStyle], "w");
   fprintf(results, "                      Results Using");
   switch ( arbStyle )
   {
   case FIFO:
      fprintf(results, " FIFO ");
      break;
   case LIFO:
      fprintf(results, " LIFO ");
      break;
   case PRIORITY:
      fprintf(results, " PRIORITY ");
      break;
   case RANDOM:
      fprintf(results, " RANDOM ");
      break;
   }
   fprintf(results, "Semaphores\n\n");

   fprintf(results,
"         Time Awaiting Semaphores                 Time in Stages\n");
   fprintf(results, "Proc   B        A        M        R");
   fprintf(results, "        RS     OUTER    INNER      CS    O's\n\n");
   for ( index = 0; index < numProcs; index++ )
   {
      fprintf(results, "%2d:", index);
      print_stats(results, &(stats[index]));
      fprintf(results, "%4d\n", passes[index]);
   }

   /* now give up all system resources */
   msgctl(msgQ, IPC_RMID, (struct msqid_ds *)0);
   shmdt(share_ptr);
   give_up_share(share, share_ptr);
   give_up_sems(arbitrator);
}

int update_screen(req)
   pMSG *req;
/* redraw the screen based on information in the request */
{
   int index, insertRow;

   switch ( req->op )       /* where does the `X' go? */
   {
   case REMAINDER:
      insertRow = 15;
      break;
   case OUTER:
      insertRow = 3;
      break;
   case INNER:
      insertRow = 7;
      break;
   case IN_CRITICAL:
      insertRow = 11;
      break;
   case OUT_CRITICAL:
      insertRow = 15;
      break;
   }

   for ( index = 3; index < 16; index += 4 )/* show where current process is */
      mvaddch(index, 11 + req->id, ' ');
   mvaddch(insertRow, 11 + req->id, 'X');
   mvprintw( 3, 5, "%2d", req->na);         /* show current shared variables */
   mvprintw( 7, 5, "%2d", req->nm);
   mvprintw(11, 5, "%2d", req->cs);
   mvprintw(15, 5, "%2d", req->rs);
   mvprintw(numtimes[req->id][ROW_COORD],numtimes[req->id][COL_COORD],
	    "%4d %5d", req->id, req->cs_times);

   refresh();
   /* usleep(MORRIS_SLEEP_CONST); */
}

int draw_screen(style)
   int style;
/* put up the initial image on the screen (the background) */
{
   int index;
   extern WINDOW *stdscr;

   initscr();
   leaveok(stdscr, TRUE);

   mvprintw( 0, 16, "CURRENT STATE OF SYSTEM");
   mvprintw( 3,  0, "na = ");
   mvprintw( 5,  9, "------------------outer-gate----------------");
   mvprintw( 7,  0, "nm = ");
   mvprintw( 9,  9, "------------------inner-gate----------------");
   mvprintw(11,  0, "cs = ");
   mvaddch (11,  9, 'C');
   mvaddch (11, 52, 'S');
   mvprintw(13,  9, "-------------------leave-CS-----------------");
   mvprintw(15,  0, "rs = ");
   mvaddch (15,  9, 'R');
   mvaddch (15, 52, 'S');

   for ( index = 0; index < 24; index++ )
      mvaddch(index, 55, '|');

   mvprintw( 0, 57, "PROC");
   mvprintw( 0, 62, "TIMES");
   mvprintw( 0, 69, "PROC");
   mvprintw( 0, 74, "TIMES");
   mvaddch ( 1, 59, '#');
   mvprintw( 1, 62, "IN CS");
   mvaddch ( 1, 71, '#');
   mvprintw( 1, 74, "IN CS");

   move(20, 0);                        /* identify the style of semaphores */
   printw("Using");                    /* being used */
   switch ( style )
   {
   case FIFO:
      printw(" FIFO ");
      break;
   case LIFO:
      printw(" LIFO ");
      break;
   case PRIORITY:
      printw(" PRIORITY ");
      break;
   case RANDOM:
      printw(" RANDOM ");
      break;
   }
   printw("semaphores.");

   refresh();
   return TRUE;
}

int close_screen()
/* clear the screen and shut down curses */
{
   clear();
   move(0, 0);
   refresh();
   endwin();
}

int print_stats(dest, timings)
   FILE *dest;
   TIMES *timings;
/* print to the given FILE one set of statistics */
{
   int index;
   double value;

   for ( index = 0; index < (NUMSEMS + NUMSTAGES); index++ )
   {
      value = (double)(timings->value[index].tv_sec) +
              (double)(timings->value[index].tv_usec) / 1000000.0;
      fprintf(dest, "%7.2lf  ", value);
   }
}



/*
   fifo.c
   Ron Garrett
   11/19/89
   a process to simulate FIFO implementation of semaphores
*/

#include "morris.h"

int taken;

Q fifoQ = (Q)(-1);

char leader[16];
static pMSG grant;          /* a P() grant */
char follower[16];
char leader1[16];
static pMSG service;        /* a P() or V() request */
char follower1[16];

int nq(boxID)
   int boxID;
/* enqueue the request for the semaphore */
{
   char *malloc();
   RNODE *new, *next = fifoQ, *prev = (RNODE *)(-1);

   new = (RNODE *)(malloc(sizeof(RNODE)));    /* get a new node */
   new->replyBox = boxID;
   new->next = (RNODE *)(-1);

   while ( next != (RNODE *)(-1) )            /* find end of list */
   {
      prev = next;
      next = next->next;
   }
   if ( prev == (RNODE *)(-1) )               /* stick new node at end */
      fifoQ = new;
   else
      prev->next = new;

   return TRUE;
}

int dq()
/* get the first node off the queue */
{
   RNODE *first;
   int nextProc;

   if ( fifoQ == (Q)(-1) )                    /* the queue is empty */
      return (-1);
   first = fifoQ;                             /* get first node */
   fifoQ = first->next;                       /* update the queue */
   nextProc = first->replyBox;
   free(first);
   return nextProc;
}

void fifo(reply, op)
   int reply, op;
/* handle semaphore requests on a FIFO basis (queue) */
{
   int nextProc;

   grant.pMtype = 1;

   switch ( op )
   {
   case P:
      if ( taken )      /* if sem is not free, put request in line */
         nq(reply);
      else              /* otherwise, commit it to requester */
      {
         taken = TRUE;
         msgsnd(reply, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      }
      break;
   case V:              /* if someone's waiting, give sem to them */
      nextProc = dq();
      if ( nextProc != -1 )
         msgsnd(nextProc, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      else              /* otherwise, decommit semaphore */
         taken = FALSE;
      break;
   case FINISHED:
      msgsnd(reply, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      break;
   }
}

main(argc, argv)
   int argc;
   char *argv[];
/*
   accepts the message queue received from morris, then processes the
   P and V messages until morris sends a close-down message

   args: argv[1] is the message queue for this arbitration process
         argv[2] is the initial state of taken
*/
{
   int requestQ;               /* P() and V() requests will queue here */
   int finished = FALSE;       /* has morris shut down the system? */

   signal(SIGINT, SIG_IGN);    /* morris handles SIGINT */

   if ( argc != NUM_ARB_ARGS ) /* notify on bad command */
   {
      printf("Incorrect number of arguments received from morris.\n");
      exit(1);
   }
   requestQ = atoi(argv[1]);   /* set up message queue and taken */
   taken = atoi(argv[2]);

   while ( !finished )         /* process requests for the semaphore */
   {
      msgrcv(requestQ, (struct msgbuf *)(&service), sizeof(pMSG),
	     (long)ANY_MESSAGE, MSG_NOERROR);
      if ( service.op == FINISHED )
	 finished = TRUE;
      fifo(service.reply, service.op);
   }
}

/* EOF fifo.c */




/*
   lifo.c
   Ron Garrett
   11/19/89
   a process to simulate LIFO (stack) implementation of semaphores
*/

#include "morris.h"

int taken;

STACK lifoS = (STACK)(-1);      /* which processes want access to my semaphore */

char leader[16];
static pMSG grant;          /* a P() grant */
char follower[16];
char leader1[16];
static pMSG service;        /* a P() or V() request */
char follower1[16];

int push(procID)
   int procID;
/* push the request for my semaphore on the stack */
{
   char *malloc();
   RNODE *new;

   new = (RNODE *)(malloc(sizeof(RNODE)));
   new->replyBox = procID;
   new->next = lifoS;
   lifoS = new;
   return TRUE;
}

int pop()
/* pop a semaphore request off the stack */
{
   RNODE *first;
   int nextProc;

   first = lifoS;
   if ( first == (RNODE *)(-1) )
      return (-1);
   lifoS = first->next;
   nextProc = first->replyBox;
   free(first);
   return nextProc;
}

void lifo(reply, op)
   int reply, op;
/* handle semaphore requests on a LIFO basis (stack) */
{
   int nextProc;

   grant.pMtype = 1;
   
   switch ( op )
   {
   case P:
      if ( taken )      /* if sem is not free, push request */
         push(reply);
      else              /* otherwise, commit it to requester */
      {
         taken = TRUE;
         msgsnd(reply, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      }
      break;
   case V:              /* if someone's waiting, give sem to them */
      nextProc = pop();
      if ( nextProc != -1 )
         msgsnd(nextProc, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      else              /* otherwise, decommit semaphore */
         taken = FALSE;
      break; 
   case FINISHED:
      msgsnd(reply, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      break;
   }
}

main(argc, argv)
   int argc;
   char *argv[];
/*
   accepts the message queue received from morris, then processes the P and V messages
   until morris sends a close-down message

   args: argv[1] is the message queue for this arbitration process
         argv[2] is the initial state of taken
*/
{
   int requestQ;               /* P() and V() requests will queue here */
   int finished = FALSE;       /* has morris shut down the system? */

   signal(SIGINT, SIG_IGN);    /* morris handles SIGINT */
   
   if ( argc != NUM_ARB_ARGS ) /* notify on bad command */
   {
      printf("Incorrect number of arguments received from morris.\n");
      exit(1);
   }
   requestQ = atoi(argv[1]);   /* set up message queue and taken */
   taken = atoi(argv[2]);

   while ( !finished )         /* process requests for my semaphore */
   {
      msgrcv(requestQ, (struct msgbuf *)(&service), sizeof(pMSG),
	     (long)ANY_MESSAGE, MSG_NOERROR);
      if ( service.op == FINISHED )
	 finished = TRUE;
      lifo(service.reply, service.op);
   }
}


/* EOF lifo.c */




/*
   priority.c
   Ron Garrett
   11/19/89
   a process to simulate a process priority implementation of semaphores
*/

#include "morris.h"

int taken;
int procList [MAXPROCS];
int numWaiting = 0;

char leader[16];
static pMSG grant;          /* a P() grant */
char follower[16];
char leader1[16];
static pMSG service;        /* a P() or V() request */
char follower1[16];

void init_array(list)
   int list[];
/* indicate no process is waiting on the semaphore */
{
   register int index;

   for ( index = 0; index < MAXPROCS; index++ )
      list[index] = -1;
}

int enter(id, mbox)
   int id, mbox;
/* enter a process into the priority array */
{
   procList[id] = mbox;
   numWaiting++;
}

int retrieve()
/* get the first process in the priority array */
{
   register int index, nextProc;

   if ( numWaiting == 0 )
      return (-1);
   for ( index = 0; index < MAXPROCS; index++ )
      if ( procList[index] != -1 )
      {
         numWaiting--;
	 nextProc = procList[index];
	 procList[index] = -1;
	 return nextProc;
      }
   return (-1);
}

void priority(proc, reply, op)
   int proc, reply, op;
/* handle semaphore requests on a priority basis, based on the process id */
{
   int nextProc;

   grant.pMtype = 1;
   
   switch ( op )
   {
   case P:
      if ( taken )      /* if sem is not free, enter request into array */
         enter(proc, reply);
      else              /* otherwise, commit it to requester */
      {
         taken = TRUE;
         msgsnd(reply, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      }
      break;
   case V:              /* if someone's waiting, give sem to them */
      if ( (nextProc = retrieve()) != -1 )
         msgsnd(nextProc, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      else              /* otherwise, decommit semaphore */
         taken = FALSE;
      break;
   case FINISHED:
      msgsnd(reply, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      break;
   }
}

main(argc, argv)
   int argc;
   char *argv[];
/*
   accepts the message queue received from morris, then processes the
   P and V messages until morris sends a close-down message

   args: argv[1] is the message queue for this arbitration process
         argv[2] is the initial state of taken
*/
{
   int requestQ;               /* P() and V() requests will queue here */
   int finished = FALSE;       /* has morris shut down the system? */

   signal(SIGINT, SIG_IGN);    /* morris handles SIGINT */

   if ( argc != NUM_ARB_ARGS ) /* notify on bad command */
   {
      printf("Incorrect number of arguments received from morris.\n");
      exit(1);
   }
   requestQ = atoi(argv[1]);   /* set up message queue, taken, and array */
   taken = atoi(argv[2]);
   init_array(procList);

   while ( !finished )         /* process requests for the semaphore */
   {
      msgrcv(requestQ, (struct msgbuf *)(&service), sizeof(pMSG),
	     (long)ANY_MESSAGE, MSG_NOERROR);
      if ( service.op == FINISHED )
	 finished = TRUE;
      priority(service.id, service.reply, service.op);
   }
}


/* EOF priority.c */




/*
   random.c
   Ron Garrett
   11/19/89
   a process to simulate a random implementation of semaphores
*/

#include "morris.h"

int taken;                      /* the semaphore state */

int procList [MAXPROCS];        /* reply boxes of all the processes */
                                /* waiting for my semaphore */
int numWaiting = 0;             /* how many processes are waiting? */

char leader[16];
static pMSG grant;          /* a P() grant */
char follower[16];
char leader1[16];
static pMSG service;        /* a P() or V() request */
char follower1[16];

int enter(replyBox)
   int replyBox;
/* enter a request into the array */
{
   procList[numWaiting++] = replyBox;
}

int retrieve()
/* get a random request back from the array */
{
   int index, nextIndex, nextProc;
   long random();

   if ( numWaiting == 0 )
      return (-1);
   nextIndex = random() MOD numWaiting;            /* get a random request */
   numWaiting--;
   nextProc = procList[nextIndex];
   for ( index = nextIndex; index < numWaiting; index++ )  /* update array */
      procList[index] = procList[index+1];
   return nextProc;
}

void randomize(reply, op)
   int reply, op;
/* handle semaphore requests on a random basis */
{
   int nextProc;

   grant.pMtype = 1;
   
   switch ( op )
   {
   case P:
      if ( taken )      /* if sem is not free, put request in line */
         enter(reply);
      else              /* otherwise, commit it to requester */
      {
         taken = TRUE;
         msgsnd(reply, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      }
      break;
   case V:              /* if someone's waiting, give sem to them */
      nextProc = retrieve();
      if ( nextProc != -1 )
         msgsnd(nextProc, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      else              /* otherwise, decommit semaphore */
         taken = FALSE;
      break;
   case FINISHED:
      msgsnd(reply, (struct msgbuf *)(&grant), sizeof(pMSG), 0);
      break;
   }
}

main(argc, argv)
   int argc;
   char *argv[];
/*
   accepts the message queue received from morris, then processes the
   P and V messages until morris sends a close-down message

   args: argv[1] is the message queue for this arbitration process
         argv[2] is the initial state of taken
*/
{
   int requestQ;               /* P() and V() requests will queue here */
   int finished = FALSE;       /* has morris shut down the system? */

   signal(SIGINT, SIG_IGN);    /* morris handles SIGINT */

   if ( argc != NUM_ARB_ARGS ) /* notify on bad command */
   {
      printf("Incorrect number of arguments received from morris.\n");
      exit(1);
   }
   requestQ = atoi(argv[1]);   /* set up message queue and taken */
   taken = atoi(argv[2]);

   while ( !finished )         /* process requests for the semaphore */
   {
      msgrcv(requestQ, (struct msgbuf *)(&service), sizeof(pMSG),
	     (long)ANY_MESSAGE, MSG_NOERROR);
      if ( service.op == FINISHED )
	 finished = TRUE;
      randomize(service.reply, service.op);
   }
}


/* EOF random.c */


/*
  proc.c
  Ron Garrett
  11/8/89
  one of the competing processes to be arbitrated using Morris's algorithm
*/

#include "morris.h"

char leader[16];
pMSG req;                           /* the message structures */
char follower[16];
char leader1[16];
static pMSG msg;
char follower1[16];

/* structures for storing and calculating the time used */
struct timeval wait_old, wait_new, stage_old, stage_new;
struct timeval timing[NUMSEMS + NUMSTAGES];
struct timeval zero_time = { 0, 0 };

int init_timers()
/* zero out all the time structures */
{
   int index;

   for ( index = 0; index < (NUMSEMS + NUMSTAGES); index++ )
      timing[index] = zero_time;
}

int time_update(old, new, store)
   struct timeval *old, *new, *store;
/* updates the value in *store by the difference between *new and *old */
{
   int borrow = (old->tv_usec > new->tv_usec);

   if ( borrow )
   {
      new->tv_usec += 1000000;
      new->tv_sec--;
   }
   store->tv_usec += (new->tv_usec - old->tv_usec);
   store->tv_sec += (new->tv_sec - old->tv_sec);
   if ( store->tv_usec >= 1000000 )
   {
      store->tv_usec -= 1000000;
      store->tv_sec++;
   }
}

void peevee(id, arbitrator, op, reply, sem_time)
   int id, arbitrator, op, reply;
   struct timeval *sem_time;
/* perform a p() or v() operation on the given semaphore */
{
   int status;

   req.pMtype = 1;
   req.id = id;
   req.op = op;
   req.reply = reply;

   do
   {
      status = msgsnd(arbitrator, (struct msgbuf *)(&req), sizeof(pMSG), 0);
      gettimeofday(&wait_old, 0);
   }
   while ( status == -1 );          /* make sure our message is received */

   if ( op == P )                   /* if p(), wait for a reply */
   {
      msgrcv(reply, (struct msgbuf *)(&req), sizeof(pMSG),
	     (long)ANY_MESSAGE, MSG_NOERROR);
      gettimeofday(&wait_new, 0);
      time_update(&wait_old, &wait_new, sem_time);
   }
}

ScreenRequest(queue, proc, operation, cs_times, na, nm, cs, rs)
   int queue, proc, operation, cs_times, na, nm, cs, rs;
/* send the current state of the system to the display process */
{
   msg.pMtype = 1;
   msg.id = proc;
   msg.op = operation;
   msg.cs_times = cs_times;
   msg.na = na;
   msg.nm = nm;
   msg.cs = cs;
   msg.rs = rs;

   msgsnd(queue, (struct msgbuf *)(&msg), sizeof(pMSG), 0);
}

int FinalMessage(dest, id, passes)
   int dest, id, passes;
/* send the process statistics to morris for storage in a file */
{
   int index;

   msg.pMtype = 1;
   msg.id = id;
   msg.op = FINISHED;
   msg.cs_times = passes;
   for ( index = 0; index < (NUMSEMS + NUMSTAGES); index++ )
      msg.mystats.value[index] = timing[index];

   msgsnd(dest, (struct msgbuf *)(&msg), sizeof(pMSG), 0);
}

main(argc, argv)
   int argc;
   char *argv[];
/* initializes all variables and then repeatedly performs Morris's algorithm */
{
   int index, id, share, cs_times = 0;
   int morrisBox, boxes[NUMSEMS], replyBox;
   char *share_ptr = (char *)0, *shmat();

   signal(SIGINT, SIG_IGN);                   /* morris will handle SIGINT */
   init_timers();                             /* zero out timers */

   if ( argc != NUM_PROC_ARGS )               /* notify on errors in command */
   {
      printf("Bad args: ");
      for ( index = 0; index < argc; index++ )
         printf("%s", argv[index]);
      printf("\n\nNeed %d args\n", NUM_PROC_ARGS);
      exit(1);
   }
   id = atoi(argv[1]);                               /* set up my variables */
   share = atoi(argv[2]);
   morrisBox = atoi(argv[3]);
   for ( index = B; index < NUMSEMS; index++ )       /* semaphore mailboxes */
   {
      boxes[index] = atoi(argv[index+4]);
   }
   if ( (replyBox = msgget(MSGKEY, MSGFLAGS)) == -1 )      /* reply mailbox */
   {
      printf("Process %d unable to open reply mailbox. Exiting...\n", id);
      DONE++;
      exit(1);
   }
   /* shared memory */
   if ( (share_ptr = shmat(share, ATTACHADDR, ATTACHFLAGS)) == (char *)(-1) )
   {
      printf("Process %d unable to attach shared memory. Exiting...\n", id);
      msgctl(replyBox, IPC_RMID, (struct msqid_ds *)0);
      DONE++;
      exit(1);
   }

   while ( !STOP )                         /* now repeat Morris's algorithm */
   {
   /* Morris's algorithm steps are in normal indentation; extra steps */
   /* needed for this program are indented six spaces further. */

            p(R);
	    RS++;
	    ScreenRequest(morrisBox, id, REMAINDER, cs_times, NA, NM, CS, RS);
	    v(R);
            gettimeofday(&stage_old, 0);
      usleep((MAXPROCS-id) * PROC_SLEEP_CONST);         /* remainder section */
            gettimeofday(&stage_new, 0);
            time_update(&stage_old, &stage_new, &(timing[STAGE_RS]));

      /* Morris's algorithm */
      p(B);
	    gettimeofday(&stage_old, 0);
      NA++;
	    p(R);
	    RS--;
	    ScreenRequest(morrisBox, id, OUTER, cs_times, NA, NM, CS, RS);
	    v(R);
      v(B);
            gettimeofday(&stage_new, 0);
            time_update(&stage_old, &stage_new, &(timing[STAGE_OUT]));

      p(A);
	    gettimeofday(&stage_old, 0);
      NM++;
      p(B);
      NA--;
	    ScreenRequest(morrisBox, id, INNER, cs_times, NA, NM, CS, RS);
      if ( NA == 0 )
      {
         v(B);
	 v(M);
      }
      else
      {
         v(B);
	 v(A);
      }
            gettimeofday(&stage_new, 0);
            time_update(&stage_old, &stage_new, &(timing[STAGE_IN]));

      p(M);
	    gettimeofday(&stage_old, 0);
      NM--;
   
      /* critical section */
      cs_times++;
      CS++;
            ScreenRequest(morrisBox, id, IN_CRITICAL, cs_times, NA, NM, CS, RS);
      CS--;
            ScreenRequest(morrisBox, id, OUT_CRITICAL, cs_times, NA, NM, CS, RS);
      if ( NM == 0 )
         v(A);
      else
         v(M);
	    gettimeofday(&stage_new, 0);
	    time_update(&stage_old, &stage_new, &(timing[STAGE_CS]));
   }

   /* someone hit ^C; send a final message with my statistics */
   FinalMessage(morrisBox, id, cs_times);

   /* give up system resources */
   msgctl(replyBox, IPC_RMID, (struct msqid_ds *)0);
   shmdt(share_ptr);
}


/* EOF proc.c */


