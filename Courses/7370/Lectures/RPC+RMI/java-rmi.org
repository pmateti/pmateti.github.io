# -*- mode: org -*-
# -*- org-export-html-postamble:t; -*-
#+DATE: 2020-04-02
#+STARTUP:showeverything
#+TITLE: WhiteBoard Using Java RMI
#+AUTHOR: Prabhaker Mateti
#+DESCRIPTION: Distributed Computing
#+HTML_LINK_HOME: ../../Top/index.html
#+HTML_LINK_UP: ../
#+HTML_HEAD: <style> P,li {text-align: justify} code {color: brown;} @media screen {BODY {margin: 10%} }</style>
#+BIND: org-html-preamble-format (("en" "<a href=\"../../\"> ../../</a>"))
#+BIND: org-html-postamble-format (("en" "<hr size=1>Copyright &copy; 2020 <a href=\"http://www.wright.edu/~pmateti\">www.wright.edu/~pmateti</a> &bull; %d"))
#+STARTUP:showeverything
#+OPTIONS: toc:2
#+OPTIONS: toc:nil


1. P2: Our goal in this part of the course is to have the WhiteBoard,
   [[../Projects/index.html][we have been discussing]], re-done in Java.  Its functionality should
   be the same as P2 that was done in C-RPC.
1. P2 uses RMI.  Slides [[./matetiJavaRMI.pptx]]
1. [[../Projects/WB-Java-RMI/html/index.html]] Java code htmlized by
   doxygen.  This is ideal for reading the Java src code.
1. [[../Projects/WB-Java-RMI.tbz]] tar ball of Java src code.  Expands to
   WhiteBoard/ that can build to P0, equivalent to P0-in-C-RPC.  No
   assertions.  You need to extend P0 to P2.  

1. [If you wish, start with your own Java P0.]  But, the P2 should use
   RMI.


* References

1. Java Concurrency,
   [[http://docs.oracle.com/javase/tutorial/essential/concurrency/]]
   Required Reading.

1. Java RMI, [[http://docs.oracle.com/javase/tutorial/rmi/index.html]]
   Required Reading.

* End
# Local variables:
# after-save-hook: org-html-export-to-html
# end:
